[{"name":"abstract override val text: String","description":"ktast.ast.Node.Expression.ConstantLiteralExpression.text","location":"ast/ktast.ast/-node/-expression/-constant-literal-expression/text.html","searchKeys":["text","abstract override val text: String","ktast.ast.Node.Expression.ConstantLiteralExpression.text"]},{"name":"abstract val annotationSets: List<Node.Modifier.AnnotationSet>","description":"ktast.ast.Node.WithAnnotationSets.annotationSets","location":"ast/ktast.ast/-node/-with-annotation-sets/annotation-sets.html","searchKeys":["annotationSets","abstract val annotationSets: List<Node.Modifier.AnnotationSet>","ktast.ast.Node.WithAnnotationSets.annotationSets"]},{"name":"abstract val arguments: List<Node.ValueArgument>","description":"ktast.ast.Node.WithValueArguments.arguments","location":"ast/ktast.ast/-node/-with-value-arguments/arguments.html","searchKeys":["arguments","abstract val arguments: List<Node.ValueArgument>","ktast.ast.Node.WithValueArguments.arguments"]},{"name":"abstract val arrow: Node.Keyword.Arrow","description":"ktast.ast.Node.Expression.WhenExpression.WhenBranch.arrow","location":"ast/ktast.ast/-node/-expression/-when-expression/-when-branch/arrow.html","searchKeys":["arrow","abstract val arrow: Node.Keyword.Arrow","ktast.ast.Node.Expression.WhenExpression.WhenBranch.arrow"]},{"name":"abstract val body: Node.Declaration.ClassOrObject.ClassBody?","description":"ktast.ast.Node.Declaration.ClassOrObject.body","location":"ast/ktast.ast/-node/-declaration/-class-or-object/body.html","searchKeys":["body","abstract val body: Node.Declaration.ClassOrObject.ClassBody?","ktast.ast.Node.Declaration.ClassOrObject.body"]},{"name":"abstract val body: Node.Expression","description":"ktast.ast.Node.Expression.WhenExpression.WhenBranch.body","location":"ast/ktast.ast/-node/-expression/-when-expression/-when-branch/body.html","searchKeys":["body","abstract val body: Node.Expression","ktast.ast.Node.Expression.WhenExpression.WhenBranch.body"]},{"name":"abstract val body: Node.Expression","description":"ktast.ast.Node.Statement.WhileStatementBase.body","location":"ast/ktast.ast/-node/-statement/-while-statement-base/body.html","searchKeys":["body","abstract val body: Node.Expression","ktast.ast.Node.Statement.WhileStatementBase.body"]},{"name":"abstract val body: Node.Expression?","description":"ktast.ast.Node.Declaration.PropertyDeclaration.Accessor.body","location":"ast/ktast.ast/-node/-declaration/-property-declaration/-accessor/body.html","searchKeys":["body","abstract val body: Node.Expression?","ktast.ast.Node.Declaration.PropertyDeclaration.Accessor.body"]},{"name":"abstract val condition: Node.Expression","description":"ktast.ast.Node.Statement.WhileStatementBase.condition","location":"ast/ktast.ast/-node/-statement/-while-statement-base/condition.html","searchKeys":["condition","abstract val condition: Node.Expression","ktast.ast.Node.Statement.WhileStatementBase.condition"]},{"name":"abstract val conditions: List<Node.Expression.WhenExpression.WhenCondition>","description":"ktast.ast.Node.Expression.WhenExpression.WhenBranch.conditions","location":"ast/ktast.ast/-node/-expression/-when-expression/-when-branch/conditions.html","searchKeys":["conditions","abstract val conditions: List<Node.Expression.WhenExpression.WhenCondition>","ktast.ast.Node.Expression.WhenExpression.WhenBranch.conditions"]},{"name":"abstract val declarationKeyword: Node.Declaration.ClassOrObject.ClassDeclarationKeyword","description":"ktast.ast.Node.Declaration.ClassOrObject.declarationKeyword","location":"ast/ktast.ast/-node/-declaration/-class-or-object/declaration-keyword.html","searchKeys":["declarationKeyword","abstract val declarationKeyword: Node.Declaration.ClassOrObject.ClassDeclarationKeyword","ktast.ast.Node.Declaration.ClassOrObject.declarationKeyword"]},{"name":"abstract val declarations: List<Node.Declaration>","description":"ktast.ast.Node.WithDeclarations.declarations","location":"ast/ktast.ast/-node/-with-declarations/declarations.html","searchKeys":["declarations","abstract val declarations: List<Node.Declaration>","ktast.ast.Node.WithDeclarations.declarations"]},{"name":"abstract val expression: Node.Expression","description":"ktast.ast.Node.Expression.UnaryExpression.expression","location":"ast/ktast.ast/-node/-expression/-unary-expression/expression.html","searchKeys":["expression","abstract val expression: Node.Expression","ktast.ast.Node.Expression.UnaryExpression.expression"]},{"name":"abstract val expression: Node.Expression?","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassParent.expression","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-parent/expression.html","searchKeys":["expression","abstract val expression: Node.Expression?","ktast.ast.Node.Declaration.ClassOrObject.ClassParent.expression"]},{"name":"abstract val expression: Node.Expression?","description":"ktast.ast.Node.Expression.WhenExpression.WhenCondition.expression","location":"ast/ktast.ast/-node/-expression/-when-expression/-when-condition/expression.html","searchKeys":["expression","abstract val expression: Node.Expression?","ktast.ast.Node.Expression.WhenExpression.WhenCondition.expression"]},{"name":"abstract val lAngle: Node.Keyword.Less?","description":"ktast.ast.Node.WithTypeArguments.lAngle","location":"ast/ktast.ast/-node/-with-type-arguments/l-angle.html","searchKeys":["lAngle","abstract val lAngle: Node.Keyword.Less?","ktast.ast.Node.WithTypeArguments.lAngle"]},{"name":"abstract val lAngle: Node.Keyword.Less?","description":"ktast.ast.Node.WithTypeParameters.lAngle","location":"ast/ktast.ast/-node/-with-type-parameters/l-angle.html","searchKeys":["lAngle","abstract val lAngle: Node.Keyword.Less?","ktast.ast.Node.WithTypeParameters.lAngle"]},{"name":"abstract val lPar: Node.Keyword.LPar","description":"ktast.ast.Node.Statement.WhileStatementBase.lPar","location":"ast/ktast.ast/-node/-statement/-while-statement-base/l-par.html","searchKeys":["lPar","abstract val lPar: Node.Keyword.LPar","ktast.ast.Node.Statement.WhileStatementBase.lPar"]},{"name":"abstract val lPar: Node.Keyword.LPar","description":"ktast.ast.Node.WithFunctionParameters.lPar","location":"ast/ktast.ast/-node/-with-function-parameters/l-par.html","searchKeys":["lPar","abstract val lPar: Node.Keyword.LPar","ktast.ast.Node.WithFunctionParameters.lPar"]},{"name":"abstract val lPar: Node.Keyword.LPar?","description":"ktast.ast.Node.Declaration.PropertyDeclaration.Accessor.lPar","location":"ast/ktast.ast/-node/-declaration/-property-declaration/-accessor/l-par.html","searchKeys":["lPar","abstract val lPar: Node.Keyword.LPar?","ktast.ast.Node.Declaration.PropertyDeclaration.Accessor.lPar"]},{"name":"abstract val lPar: Node.Keyword.LPar?","description":"ktast.ast.Node.WithValueArguments.lPar","location":"ast/ktast.ast/-node/-with-value-arguments/l-par.html","searchKeys":["lPar","abstract val lPar: Node.Keyword.LPar?","ktast.ast.Node.WithValueArguments.lPar"]},{"name":"abstract val label: Node.Expression.NameExpression?","description":"ktast.ast.Node.Expression.WithLabel.label","location":"ast/ktast.ast/-node/-expression/-with-label/label.html","searchKeys":["label","abstract val label: Node.Expression.NameExpression?","ktast.ast.Node.Expression.WithLabel.label"]},{"name":"abstract val lhs: Node.Expression?","description":"ktast.ast.Node.Expression.DoubleColonExpression.lhs","location":"ast/ktast.ast/-node/-expression/-double-colon-expression/lhs.html","searchKeys":["lhs","abstract val lhs: Node.Expression?","ktast.ast.Node.Expression.DoubleColonExpression.lhs"]},{"name":"abstract val modifiers: List<Node.Modifier>","description":"ktast.ast.Node.WithModifiers.modifiers","location":"ast/ktast.ast/-node/-with-modifiers/modifiers.html","searchKeys":["modifiers","abstract val modifiers: List<Node.Modifier>","ktast.ast.Node.WithModifiers.modifiers"]},{"name":"abstract val name: Node.Expression.NameExpression?","description":"ktast.ast.Node.Declaration.ClassOrObject.name","location":"ast/ktast.ast/-node/-declaration/-class-or-object/name.html","searchKeys":["name","abstract val name: Node.Expression.NameExpression?","ktast.ast.Node.Declaration.ClassOrObject.name"]},{"name":"abstract val operator: Node.Expression.UnaryExpression.UnaryOperator","description":"ktast.ast.Node.Expression.UnaryExpression.operator","location":"ast/ktast.ast/-node/-expression/-unary-expression/operator.html","searchKeys":["operator","abstract val operator: Node.Expression.UnaryExpression.UnaryOperator","ktast.ast.Node.Expression.UnaryExpression.operator"]},{"name":"abstract val operator: Node.Expression.WhenExpression.WhenConditionOperator?","description":"ktast.ast.Node.Expression.WhenExpression.WhenCondition.operator","location":"ast/ktast.ast/-node/-expression/-when-expression/-when-condition/operator.html","searchKeys":["operator","abstract val operator: Node.Expression.WhenExpression.WhenConditionOperator?","ktast.ast.Node.Expression.WhenExpression.WhenCondition.operator"]},{"name":"abstract val parameters: List<Node.FunctionParameter>","description":"ktast.ast.Node.WithFunctionParameters.parameters","location":"ast/ktast.ast/-node/-with-function-parameters/parameters.html","searchKeys":["parameters","abstract val parameters: List<Node.FunctionParameter>","ktast.ast.Node.WithFunctionParameters.parameters"]},{"name":"abstract val parents: List<Node.Declaration.ClassOrObject.ClassParent>","description":"ktast.ast.Node.Declaration.ClassOrObject.parents","location":"ast/ktast.ast/-node/-declaration/-class-or-object/parents.html","searchKeys":["parents","abstract val parents: List<Node.Declaration.ClassOrObject.ClassParent>","ktast.ast.Node.Declaration.ClassOrObject.parents"]},{"name":"abstract val postModifiers: List<Node.PostModifier>","description":"ktast.ast.Node.WithPostModifiers.postModifiers","location":"ast/ktast.ast/-node/-with-post-modifiers/post-modifiers.html","searchKeys":["postModifiers","abstract val postModifiers: List<Node.PostModifier>","ktast.ast.Node.WithPostModifiers.postModifiers"]},{"name":"abstract val questionMarks: List<Node.Keyword.Question>","description":"ktast.ast.Node.Expression.DoubleColonExpression.questionMarks","location":"ast/ktast.ast/-node/-expression/-double-colon-expression/question-marks.html","searchKeys":["questionMarks","abstract val questionMarks: List<Node.Keyword.Question>","ktast.ast.Node.Expression.DoubleColonExpression.questionMarks"]},{"name":"abstract val rAngle: Node.Keyword.Greater?","description":"ktast.ast.Node.WithTypeArguments.rAngle","location":"ast/ktast.ast/-node/-with-type-arguments/r-angle.html","searchKeys":["rAngle","abstract val rAngle: Node.Keyword.Greater?","ktast.ast.Node.WithTypeArguments.rAngle"]},{"name":"abstract val rAngle: Node.Keyword.Greater?","description":"ktast.ast.Node.WithTypeParameters.rAngle","location":"ast/ktast.ast/-node/-with-type-parameters/r-angle.html","searchKeys":["rAngle","abstract val rAngle: Node.Keyword.Greater?","ktast.ast.Node.WithTypeParameters.rAngle"]},{"name":"abstract val rPar: Node.Keyword.RPar","description":"ktast.ast.Node.Statement.WhileStatementBase.rPar","location":"ast/ktast.ast/-node/-statement/-while-statement-base/r-par.html","searchKeys":["rPar","abstract val rPar: Node.Keyword.RPar","ktast.ast.Node.Statement.WhileStatementBase.rPar"]},{"name":"abstract val rPar: Node.Keyword.RPar","description":"ktast.ast.Node.WithFunctionParameters.rPar","location":"ast/ktast.ast/-node/-with-function-parameters/r-par.html","searchKeys":["rPar","abstract val rPar: Node.Keyword.RPar","ktast.ast.Node.WithFunctionParameters.rPar"]},{"name":"abstract val rPar: Node.Keyword.RPar?","description":"ktast.ast.Node.Declaration.PropertyDeclaration.Accessor.rPar","location":"ast/ktast.ast/-node/-declaration/-property-declaration/-accessor/r-par.html","searchKeys":["rPar","abstract val rPar: Node.Keyword.RPar?","ktast.ast.Node.Declaration.PropertyDeclaration.Accessor.rPar"]},{"name":"abstract val rPar: Node.Keyword.RPar?","description":"ktast.ast.Node.WithValueArguments.rPar","location":"ast/ktast.ast/-node/-with-value-arguments/r-par.html","searchKeys":["rPar","abstract val rPar: Node.Keyword.RPar?","ktast.ast.Node.WithValueArguments.rPar"]},{"name":"abstract val statements: List<Node.Statement>","description":"ktast.ast.Node.WithStatements.statements","location":"ast/ktast.ast/-node/-with-statements/statements.html","searchKeys":["statements","abstract val statements: List<Node.Statement>","ktast.ast.Node.WithStatements.statements"]},{"name":"abstract val supplement: NodeSupplement","description":"ktast.ast.Node.supplement","location":"ast/ktast.ast/-node/supplement.html","searchKeys":["supplement","abstract val supplement: NodeSupplement","ktast.ast.Node.supplement"]},{"name":"abstract val text: String","description":"ktast.ast.Node.SimpleTextNode.text","location":"ast/ktast.ast/-node/-simple-text-node/text.html","searchKeys":["text","abstract val text: String","ktast.ast.Node.SimpleTextNode.text"]},{"name":"abstract val type: Node.Type","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassParent.type","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-parent/type.html","searchKeys":["type","abstract val type: Node.Type","ktast.ast.Node.Declaration.ClassOrObject.ClassParent.type"]},{"name":"abstract val type: Node.Type?","description":"ktast.ast.Node.Expression.WhenExpression.WhenCondition.type","location":"ast/ktast.ast/-node/-expression/-when-expression/-when-condition/type.html","searchKeys":["type","abstract val type: Node.Type?","ktast.ast.Node.Expression.WhenExpression.WhenCondition.type"]},{"name":"abstract val typeArguments: List<Node.TypeArgument>","description":"ktast.ast.Node.WithTypeArguments.typeArguments","location":"ast/ktast.ast/-node/-with-type-arguments/type-arguments.html","searchKeys":["typeArguments","abstract val typeArguments: List<Node.TypeArgument>","ktast.ast.Node.WithTypeArguments.typeArguments"]},{"name":"abstract val typeParameters: List<Node.TypeParameter>","description":"ktast.ast.Node.WithTypeParameters.typeParameters","location":"ast/ktast.ast/-node/-with-type-parameters/type-parameters.html","searchKeys":["typeParameters","abstract val typeParameters: List<Node.TypeParameter>","ktast.ast.Node.WithTypeParameters.typeParameters"]},{"name":"class Dumper(appendable: <Error class: unknown class> = StringBuilder(), withExtras: Boolean = true, withProperties: Boolean = true) : Visitor","description":"ktast.ast.Dumper","location":"ast/ktast.ast/-dumper/index.html","searchKeys":["Dumper","class Dumper(appendable: <Error class: unknown class> = StringBuilder(), withExtras: Boolean = true, withProperties: Boolean = true) : Visitor","ktast.ast.Dumper"]},{"name":"constructor()","description":"ktast.ast.MutableVisitor.MutableVisitor","location":"ast/ktast.ast/-mutable-visitor/-mutable-visitor.html","searchKeys":["MutableVisitor","constructor()","ktast.ast.MutableVisitor.MutableVisitor"]},{"name":"constructor()","description":"ktast.ast.Visitor.Visitor","location":"ast/ktast.ast/-visitor/-visitor.html","searchKeys":["Visitor","constructor()","ktast.ast.Visitor.Visitor"]},{"name":"constructor(annotationSets: List<Node.Modifier.AnnotationSet>, name: Node.Expression.NameExpression, type: Node.Type, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.PostModifier.TypeConstraintSet.TypeConstraint.TypeConstraint","location":"ast/ktast.ast/-node/-post-modifier/-type-constraint-set/-type-constraint/-type-constraint.html","searchKeys":["TypeConstraint","constructor(annotationSets: List<Node.Modifier.AnnotationSet>, name: Node.Expression.NameExpression, type: Node.Type, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.PostModifier.TypeConstraintSet.TypeConstraint.TypeConstraint"]},{"name":"constructor(annotationSets: List<Node.Modifier.AnnotationSet>, name: Node.Expression.NameExpression, type: Node.Type?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Variable.Variable","location":"ast/ktast.ast/-node/-variable/-variable.html","searchKeys":["Variable","constructor(annotationSets: List<Node.Modifier.AnnotationSet>, name: Node.Expression.NameExpression, type: Node.Type?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Variable.Variable"]},{"name":"constructor(annotationSets: List<Node.Modifier.AnnotationSet>, packageDirective: Node.PackageDirective?, importDirectives: List<Node.ImportDirective>, declarations: List<Node.Declaration>, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.KotlinFile.KotlinFile","location":"ast/ktast.ast/-node/-kotlin-file/-kotlin-file.html","searchKeys":["KotlinFile","constructor(annotationSets: List<Node.Modifier.AnnotationSet>, packageDirective: Node.PackageDirective?, importDirectives: List<Node.ImportDirective>, declarations: List<Node.Declaration>, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.KotlinFile.KotlinFile"]},{"name":"constructor(annotationSets: List<Node.Modifier.AnnotationSet>, statement: Node.Statement, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.AnnotatedExpression.AnnotatedExpression","location":"ast/ktast.ast/-node/-expression/-annotated-expression/-annotated-expression.html","searchKeys":["AnnotatedExpression","constructor(annotationSets: List<Node.Modifier.AnnotationSet>, statement: Node.Statement, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.AnnotatedExpression.AnnotatedExpression"]},{"name":"constructor(appendable: <Error class: unknown class> = StringBuilder(), withExtras: Boolean = true)","description":"ktast.ast.Writer.Writer","location":"ast/ktast.ast/-writer/-writer.html","searchKeys":["Writer","constructor(appendable: <Error class: unknown class> = StringBuilder(), withExtras: Boolean = true)","ktast.ast.Writer.Writer"]},{"name":"constructor(appendable: <Error class: unknown class> = StringBuilder(), withExtras: Boolean = true, withProperties: Boolean = true)","description":"ktast.ast.Dumper.Dumper","location":"ast/ktast.ast/-dumper/-dumper.html","searchKeys":["Dumper","constructor(appendable: <Error class: unknown class> = StringBuilder(), withExtras: Boolean = true, withProperties: Boolean = true)","ktast.ast.Dumper.Dumper"]},{"name":"constructor(arrow: Node.Keyword.Arrow, body: Node.Expression, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.WhenExpression.ElseWhenBranch.ElseWhenBranch","location":"ast/ktast.ast/-node/-expression/-when-expression/-else-when-branch/-else-when-branch.html","searchKeys":["ElseWhenBranch","constructor(arrow: Node.Keyword.Arrow, body: Node.Expression, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.WhenExpression.ElseWhenBranch.ElseWhenBranch"]},{"name":"constructor(block: Node.Expression.BlockExpression, catchClauses: List<Node.Expression.TryExpression.CatchClause>, finallyBlock: Node.Expression.BlockExpression?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.TryExpression.TryExpression","location":"ast/ktast.ast/-node/-expression/-try-expression/-try-expression.html","searchKeys":["TryExpression","constructor(block: Node.Expression.BlockExpression, catchClauses: List<Node.Expression.TryExpression.CatchClause>, finallyBlock: Node.Expression.BlockExpression?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.TryExpression.TryExpression"]},{"name":"constructor(block: Node.Expression.BlockExpression, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.Initializer.Initializer","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-initializer/-initializer.html","searchKeys":["Initializer","constructor(block: Node.Expression.BlockExpression, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.Initializer.Initializer"]},{"name":"constructor(body: Node.Expression, lPar: Node.Keyword.LPar, condition: Node.Expression, rPar: Node.Keyword.RPar, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Statement.DoWhileStatement.DoWhileStatement","location":"ast/ktast.ast/-node/-statement/-do-while-statement/-do-while-statement.html","searchKeys":["DoWhileStatement","constructor(body: Node.Expression, lPar: Node.Keyword.LPar, condition: Node.Expression, rPar: Node.Keyword.RPar, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Statement.DoWhileStatement.DoWhileStatement"]},{"name":"constructor(body: Node.Statement, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Declaration.ScriptInitializer.ScriptInitializer","location":"ast/ktast.ast/-node/-declaration/-script-initializer/-script-initializer.html","searchKeys":["ScriptInitializer","constructor(body: Node.Statement, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Declaration.ScriptInitializer.ScriptInitializer"]},{"name":"constructor(calleeExpression: Node.Expression, lAngle: Node.Keyword.Less?, typeArguments: List<Node.TypeArgument>, rAngle: Node.Keyword.Greater?, lPar: Node.Keyword.LPar?, arguments: List<Node.ValueArgument>, rPar: Node.Keyword.RPar?, lambdaArgument: Node.Expression?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.CallExpression.CallExpression","location":"ast/ktast.ast/-node/-expression/-call-expression/-call-expression.html","searchKeys":["CallExpression","constructor(calleeExpression: Node.Expression, lAngle: Node.Keyword.Less?, typeArguments: List<Node.TypeArgument>, rAngle: Node.Keyword.Greater?, lPar: Node.Keyword.LPar?, arguments: List<Node.ValueArgument>, rPar: Node.Keyword.RPar?, lambdaArgument: Node.Expression?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.CallExpression.CallExpression"]},{"name":"constructor(conditions: List<Node.Expression.WhenExpression.WhenCondition>, arrow: Node.Keyword.Arrow, body: Node.Expression, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.WhenExpression.ConditionalWhenBranch.ConditionalWhenBranch","location":"ast/ktast.ast/-node/-expression/-when-expression/-conditional-when-branch/-conditional-when-branch.html","searchKeys":["ConditionalWhenBranch","constructor(conditions: List<Node.Expression.WhenExpression.WhenCondition>, arrow: Node.Keyword.Arrow, body: Node.Expression, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.WhenExpression.ConditionalWhenBranch.ConditionalWhenBranch"]},{"name":"constructor(constraints: List<Node.PostModifier.TypeConstraintSet.TypeConstraint>, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.PostModifier.TypeConstraintSet.TypeConstraintSet","location":"ast/ktast.ast/-node/-post-modifier/-type-constraint-set/-type-constraint-set.html","searchKeys":["TypeConstraintSet","constructor(constraints: List<Node.PostModifier.TypeConstraintSet.TypeConstraint>, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.PostModifier.TypeConstraintSet.TypeConstraintSet"]},{"name":"constructor(declaration: Node.Declaration.ObjectDeclaration, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.ObjectLiteralExpression.ObjectLiteralExpression","location":"ast/ktast.ast/-node/-expression/-object-literal-expression/-object-literal-expression.html","searchKeys":["ObjectLiteralExpression","constructor(declaration: Node.Declaration.ObjectDeclaration, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.ObjectLiteralExpression.ObjectLiteralExpression"]},{"name":"constructor(declarations: List<Node.Declaration>, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Declaration.ScriptBody.ScriptBody","location":"ast/ktast.ast/-node/-declaration/-script-body/-script-body.html","searchKeys":["ScriptBody","constructor(declarations: List<Node.Declaration>, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Declaration.ScriptBody.ScriptBody"]},{"name":"constructor(entries: List<Node.Expression.StringLiteralExpression.StringEntry>, raw: Boolean, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.StringLiteralExpression.StringLiteralExpression","location":"ast/ktast.ast/-node/-expression/-string-literal-expression/-string-literal-expression.html","searchKeys":["StringLiteralExpression","constructor(entries: List<Node.Expression.StringLiteralExpression.StringEntry>, raw: Boolean, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.StringLiteralExpression.StringLiteralExpression"]},{"name":"constructor(enumEntries: List<Node.Declaration.ClassOrObject.ClassBody.EnumEntry>, declarations: List<Node.Declaration>, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.ClassBody","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-class-body.html","searchKeys":["ClassBody","constructor(enumEntries: List<Node.Declaration.ClassOrObject.ClassBody.EnumEntry>, declarations: List<Node.Declaration>, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.ClassBody"]},{"name":"constructor(expression: Node.Expression, indices: List<Node.Expression>, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.IndexedAccessExpression.IndexedAccessExpression","location":"ast/ktast.ast/-node/-expression/-indexed-access-expression/-indexed-access-expression.html","searchKeys":["IndexedAccessExpression","constructor(expression: Node.Expression, indices: List<Node.Expression>, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.IndexedAccessExpression.IndexedAccessExpression"]},{"name":"constructor(expression: Node.Expression, operator: Node.Expression.UnaryExpression.UnaryOperator, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.PostfixUnaryExpression.PostfixUnaryExpression","location":"ast/ktast.ast/-node/-expression/-postfix-unary-expression/-postfix-unary-expression.html","searchKeys":["PostfixUnaryExpression","constructor(expression: Node.Expression, operator: Node.Expression.UnaryExpression.UnaryOperator, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.PostfixUnaryExpression.PostfixUnaryExpression"]},{"name":"constructor(expression: Node.Expression, short: Boolean, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.StringLiteralExpression.TemplateStringEntry.TemplateStringEntry","location":"ast/ktast.ast/-node/-expression/-string-literal-expression/-template-string-entry/-template-string-entry.html","searchKeys":["TemplateStringEntry","constructor(expression: Node.Expression, short: Boolean, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.StringLiteralExpression.TemplateStringEntry.TemplateStringEntry"]},{"name":"constructor(expression: Node.Expression, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.ThrowExpression.ThrowExpression","location":"ast/ktast.ast/-node/-expression/-throw-expression/-throw-expression.html","searchKeys":["ThrowExpression","constructor(expression: Node.Expression, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.ThrowExpression.ThrowExpression"]},{"name":"constructor(expression: Node.Expression, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.WhenExpression.ExpressionWhenCondition.ExpressionWhenCondition","location":"ast/ktast.ast/-node/-expression/-when-expression/-expression-when-condition/-expression-when-condition.html","searchKeys":["ExpressionWhenCondition","constructor(expression: Node.Expression, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.WhenExpression.ExpressionWhenCondition.ExpressionWhenCondition"]},{"name":"constructor(expressions: List<Node.Expression>, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.CollectionLiteralExpression.CollectionLiteralExpression","location":"ast/ktast.ast/-node/-expression/-collection-literal-expression/-collection-literal-expression.html","searchKeys":["CollectionLiteralExpression","constructor(expressions: List<Node.Expression>, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.CollectionLiteralExpression.CollectionLiteralExpression"]},{"name":"constructor(extrasBefore: List<Node.Extra> = listOf(), extrasWithin: List<Node.Extra> = listOf(), extrasAfter: List<Node.Extra> = listOf(), tag: Any? = null)","description":"ktast.ast.NodeSupplement.NodeSupplement","location":"ast/ktast.ast/-node-supplement/-node-supplement.html","searchKeys":["NodeSupplement","constructor(extrasBefore: List<Node.Extra> = listOf(), extrasWithin: List<Node.Extra> = listOf(), extrasAfter: List<Node.Extra> = listOf(), tag: Any? = null)","ktast.ast.NodeSupplement.NodeSupplement"]},{"name":"constructor(function: Node.Declaration.FunctionDeclaration, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.AnonymousFunctionExpression.AnonymousFunctionExpression","location":"ast/ktast.ast/-node/-expression/-anonymous-function-expression/-anonymous-function-expression.html","searchKeys":["AnonymousFunctionExpression","constructor(function: Node.Declaration.FunctionDeclaration, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.AnonymousFunctionExpression.AnonymousFunctionExpression"]},{"name":"constructor(innerExpression: Node.Expression, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.ParenthesizedExpression.ParenthesizedExpression","location":"ast/ktast.ast/-node/-expression/-parenthesized-expression/-parenthesized-expression.html","searchKeys":["ParenthesizedExpression","constructor(innerExpression: Node.Expression, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.ParenthesizedExpression.ParenthesizedExpression"]},{"name":"constructor(lBracket: Node.Keyword.LBracket, contractEffects: List<Node.Expression>, rBracket: Node.Keyword.RBracket, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.PostModifier.Contract.Contract","location":"ast/ktast.ast/-node/-post-modifier/-contract/-contract.html","searchKeys":["Contract","constructor(lBracket: Node.Keyword.LBracket, contractEffects: List<Node.Expression>, rBracket: Node.Keyword.RBracket, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.PostModifier.Contract.Contract"]},{"name":"constructor(lPar: Node.Keyword.LPar, annotationSets: List<Node.Modifier.AnnotationSet>, variable: Node.Variable?, expression: Node.Expression, rPar: Node.Keyword.RPar, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.WhenExpression.WhenSubject.WhenSubject","location":"ast/ktast.ast/-node/-expression/-when-expression/-when-subject/-when-subject.html","searchKeys":["WhenSubject","constructor(lPar: Node.Keyword.LPar, annotationSets: List<Node.Modifier.AnnotationSet>, variable: Node.Variable?, expression: Node.Expression, rPar: Node.Keyword.RPar, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.WhenExpression.WhenSubject.WhenSubject"]},{"name":"constructor(lPar: Node.Keyword.LPar, condition: Node.Expression, rPar: Node.Keyword.RPar, body: Node.Expression, elseBody: Node.Expression?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.IfExpression.IfExpression","location":"ast/ktast.ast/-node/-expression/-if-expression/-if-expression.html","searchKeys":["IfExpression","constructor(lPar: Node.Keyword.LPar, condition: Node.Expression, rPar: Node.Keyword.RPar, body: Node.Expression, elseBody: Node.Expression?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.IfExpression.IfExpression"]},{"name":"constructor(lPar: Node.Keyword.LPar, condition: Node.Expression, rPar: Node.Keyword.RPar, body: Node.Expression, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Statement.WhileStatement.WhileStatement","location":"ast/ktast.ast/-node/-statement/-while-statement/-while-statement.html","searchKeys":["WhileStatement","constructor(lPar: Node.Keyword.LPar, condition: Node.Expression, rPar: Node.Keyword.RPar, body: Node.Expression, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Statement.WhileStatement.WhileStatement"]},{"name":"constructor(lPar: Node.Keyword.LPar, loopParameter: Node.LambdaParameter, inKeyword: Node.Keyword.In, loopRange: Node.Expression, rPar: Node.Keyword.RPar, body: Node.Expression, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Statement.ForStatement.ForStatement","location":"ast/ktast.ast/-node/-statement/-for-statement/-for-statement.html","searchKeys":["ForStatement","constructor(lPar: Node.Keyword.LPar, loopParameter: Node.LambdaParameter, inKeyword: Node.Keyword.In, loopRange: Node.Expression, rPar: Node.Keyword.RPar, body: Node.Expression, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Statement.ForStatement.ForStatement"]},{"name":"constructor(lPar: Node.Keyword.LPar, parameters: List<Node.FunctionParameter>, rPar: Node.Keyword.RPar, block: Node.Expression.BlockExpression, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.TryExpression.CatchClause.CatchClause","location":"ast/ktast.ast/-node/-expression/-try-expression/-catch-clause/-catch-clause.html","searchKeys":["CatchClause","constructor(lPar: Node.Keyword.LPar, parameters: List<Node.FunctionParameter>, rPar: Node.Keyword.RPar, block: Node.Expression.BlockExpression, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.TryExpression.CatchClause.CatchClause"]},{"name":"constructor(lPar: Node.Keyword.LPar, receiverTypes: List<Node.Type>, rPar: Node.Keyword.RPar, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.ContextReceiver.ContextReceiver","location":"ast/ktast.ast/-node/-context-receiver/-context-receiver.html","searchKeys":["ContextReceiver","constructor(lPar: Node.Keyword.LPar, receiverTypes: List<Node.Type>, rPar: Node.Keyword.RPar, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.ContextReceiver.ContextReceiver"]},{"name":"constructor(lPar: Node.Keyword.LPar?, variables: List<Node.Variable>, rPar: Node.Keyword.RPar?, destructuringType: Node.Type?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.LambdaParameter.LambdaParameter","location":"ast/ktast.ast/-node/-lambda-parameter/-lambda-parameter.html","searchKeys":["LambdaParameter","constructor(lPar: Node.Keyword.LPar?, variables: List<Node.Variable>, rPar: Node.Keyword.RPar?, destructuringType: Node.Type?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.LambdaParameter.LambdaParameter"]},{"name":"constructor(label: Node.Expression.NameExpression, statement: Node.Statement, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.LabeledExpression.LabeledExpression","location":"ast/ktast.ast/-node/-expression/-labeled-expression/-labeled-expression.html","searchKeys":["LabeledExpression","constructor(label: Node.Expression.NameExpression, statement: Node.Statement, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.LabeledExpression.LabeledExpression"]},{"name":"constructor(label: Node.Expression.NameExpression?, expression: Node.Expression?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.ReturnExpression.ReturnExpression","location":"ast/ktast.ast/-node/-expression/-return-expression/-return-expression.html","searchKeys":["ReturnExpression","constructor(label: Node.Expression.NameExpression?, expression: Node.Expression?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.ReturnExpression.ReturnExpression"]},{"name":"constructor(label: Node.Expression.NameExpression?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.BreakExpression.BreakExpression","location":"ast/ktast.ast/-node/-expression/-break-expression/-break-expression.html","searchKeys":["BreakExpression","constructor(label: Node.Expression.NameExpression?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.BreakExpression.BreakExpression"]},{"name":"constructor(label: Node.Expression.NameExpression?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.ContinueExpression.ContinueExpression","location":"ast/ktast.ast/-node/-expression/-continue-expression/-continue-expression.html","searchKeys":["ContinueExpression","constructor(label: Node.Expression.NameExpression?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.ContinueExpression.ContinueExpression"]},{"name":"constructor(label: Node.Expression.NameExpression?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.ThisExpression.ThisExpression","location":"ast/ktast.ast/-node/-expression/-this-expression/-this-expression.html","searchKeys":["ThisExpression","constructor(label: Node.Expression.NameExpression?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.ThisExpression.ThisExpression"]},{"name":"constructor(lhs: Node.Expression, operator: Node.Expression.BinaryExpression.BinaryOperator, rhs: Node.Expression, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.BinaryExpression.BinaryExpression","location":"ast/ktast.ast/-node/-expression/-binary-expression/-binary-expression.html","searchKeys":["BinaryExpression","constructor(lhs: Node.Expression, operator: Node.Expression.BinaryExpression.BinaryOperator, rhs: Node.Expression, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.BinaryExpression.BinaryExpression"]},{"name":"constructor(lhs: Node.Expression, operator: Node.Expression.BinaryTypeExpression.BinaryTypeOperator, rhs: Node.Type, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.BinaryTypeExpression.BinaryTypeExpression","location":"ast/ktast.ast/-node/-expression/-binary-type-expression/-binary-type-expression.html","searchKeys":["BinaryTypeExpression","constructor(lhs: Node.Expression, operator: Node.Expression.BinaryTypeExpression.BinaryTypeOperator, rhs: Node.Type, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.BinaryTypeExpression.BinaryTypeExpression"]},{"name":"constructor(lhs: Node.Expression, questionMarks: List<Node.Keyword.Question>, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.ClassLiteralExpression.ClassLiteralExpression","location":"ast/ktast.ast/-node/-expression/-class-literal-expression/-class-literal-expression.html","searchKeys":["ClassLiteralExpression","constructor(lhs: Node.Expression, questionMarks: List<Node.Keyword.Question>, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.ClassLiteralExpression.ClassLiteralExpression"]},{"name":"constructor(lhs: Node.Expression?, questionMarks: List<Node.Keyword.Question>, rhs: Node.Expression.NameExpression, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.CallableReferenceExpression.CallableReferenceExpression","location":"ast/ktast.ast/-node/-expression/-callable-reference-expression/-callable-reference-expression.html","searchKeys":["CallableReferenceExpression","constructor(lhs: Node.Expression?, questionMarks: List<Node.Keyword.Question>, rhs: Node.Expression.NameExpression, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.CallableReferenceExpression.CallableReferenceExpression"]},{"name":"constructor(modifiers: List<Node.Modifier>, constructorKeyword: Node.Keyword.Constructor, lPar: Node.Keyword.LPar, parameters: List<Node.FunctionParameter>, rPar: Node.Keyword.RPar, delegationCall: Node.Expression.CallExpression?, block: Node.Expression.BlockExpression?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.SecondaryConstructor.SecondaryConstructor","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-secondary-constructor/-secondary-constructor.html","searchKeys":["SecondaryConstructor","constructor(modifiers: List<Node.Modifier>, constructorKeyword: Node.Keyword.Constructor, lPar: Node.Keyword.LPar, parameters: List<Node.FunctionParameter>, rPar: Node.Keyword.RPar, delegationCall: Node.Expression.CallExpression?, block: Node.Expression.BlockExpression?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.SecondaryConstructor.SecondaryConstructor"]},{"name":"constructor(modifiers: List<Node.Modifier>, constructorKeyword: Node.Keyword.Constructor?, lPar: Node.Keyword.LPar, parameters: List<Node.FunctionParameter>, rPar: Node.Keyword.RPar, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Declaration.ClassDeclaration.PrimaryConstructor.PrimaryConstructor","location":"ast/ktast.ast/-node/-declaration/-class-declaration/-primary-constructor/-primary-constructor.html","searchKeys":["PrimaryConstructor","constructor(modifiers: List<Node.Modifier>, constructorKeyword: Node.Keyword.Constructor?, lPar: Node.Keyword.LPar, parameters: List<Node.FunctionParameter>, rPar: Node.Keyword.RPar, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Declaration.ClassDeclaration.PrimaryConstructor.PrimaryConstructor"]},{"name":"constructor(modifiers: List<Node.Modifier>, contextReceiver: Node.ContextReceiver?, receiverType: Node.Type?, lPar: Node.Keyword.LPar, parameters: List<Node.Type.FunctionType.FunctionTypeParameter>, rPar: Node.Keyword.RPar, returnType: Node.Type, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Type.FunctionType.FunctionType","location":"ast/ktast.ast/-node/-type/-function-type/-function-type.html","searchKeys":["FunctionType","constructor(modifiers: List<Node.Modifier>, contextReceiver: Node.ContextReceiver?, receiverType: Node.Type?, lPar: Node.Keyword.LPar, parameters: List<Node.Type.FunctionType.FunctionTypeParameter>, rPar: Node.Keyword.RPar, returnType: Node.Type, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Type.FunctionType.FunctionType"]},{"name":"constructor(modifiers: List<Node.Modifier>, declarationKeyword: Node.Declaration.ClassDeclaration.ClassOrInterfaceKeyword, name: Node.Expression.NameExpression, lAngle: Node.Keyword.Less?, typeParameters: List<Node.TypeParameter>, rAngle: Node.Keyword.Greater?, primaryConstructor: Node.Declaration.ClassDeclaration.PrimaryConstructor?, parents: List<Node.Declaration.ClassOrObject.ClassParent>, typeConstraintSet: Node.PostModifier.TypeConstraintSet?, body: Node.Declaration.ClassOrObject.ClassBody?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Declaration.ClassDeclaration.ClassDeclaration","location":"ast/ktast.ast/-node/-declaration/-class-declaration/-class-declaration.html","searchKeys":["ClassDeclaration","constructor(modifiers: List<Node.Modifier>, declarationKeyword: Node.Declaration.ClassDeclaration.ClassOrInterfaceKeyword, name: Node.Expression.NameExpression, lAngle: Node.Keyword.Less?, typeParameters: List<Node.TypeParameter>, rAngle: Node.Keyword.Greater?, primaryConstructor: Node.Declaration.ClassDeclaration.PrimaryConstructor?, parents: List<Node.Declaration.ClassOrObject.ClassParent>, typeConstraintSet: Node.PostModifier.TypeConstraintSet?, body: Node.Declaration.ClassOrObject.ClassBody?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Declaration.ClassDeclaration.ClassDeclaration"]},{"name":"constructor(modifiers: List<Node.Modifier>, declarationKeyword: Node.Keyword.Object, name: Node.Expression.NameExpression?, parents: List<Node.Declaration.ClassOrObject.ClassParent>, body: Node.Declaration.ClassOrObject.ClassBody?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Declaration.ObjectDeclaration.ObjectDeclaration","location":"ast/ktast.ast/-node/-declaration/-object-declaration/-object-declaration.html","searchKeys":["ObjectDeclaration","constructor(modifiers: List<Node.Modifier>, declarationKeyword: Node.Keyword.Object, name: Node.Expression.NameExpression?, parents: List<Node.Declaration.ClassOrObject.ClassParent>, body: Node.Declaration.ClassOrObject.ClassBody?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Declaration.ObjectDeclaration.ObjectDeclaration"]},{"name":"constructor(modifiers: List<Node.Modifier>, innerType: Node.Type, questionMark: Node.Keyword.Question, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Type.NullableType.NullableType","location":"ast/ktast.ast/-node/-type/-nullable-type/-nullable-type.html","searchKeys":["NullableType","constructor(modifiers: List<Node.Modifier>, innerType: Node.Type, questionMark: Node.Keyword.Question, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Type.NullableType.NullableType"]},{"name":"constructor(modifiers: List<Node.Modifier>, lAngle: Node.Keyword.Less?, typeParameters: List<Node.TypeParameter>, rAngle: Node.Keyword.Greater?, receiverType: Node.Type?, name: Node.Expression.NameExpression?, lPar: Node.Keyword.LPar, parameters: List<Node.FunctionParameter>, rPar: Node.Keyword.RPar, returnType: Node.Type?, postModifiers: List<Node.PostModifier>, body: Node.Expression?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Declaration.FunctionDeclaration.FunctionDeclaration","location":"ast/ktast.ast/-node/-declaration/-function-declaration/-function-declaration.html","searchKeys":["FunctionDeclaration","constructor(modifiers: List<Node.Modifier>, lAngle: Node.Keyword.Less?, typeParameters: List<Node.TypeParameter>, rAngle: Node.Keyword.Greater?, receiverType: Node.Type?, name: Node.Expression.NameExpression?, lPar: Node.Keyword.LPar, parameters: List<Node.FunctionParameter>, rPar: Node.Keyword.RPar, returnType: Node.Type?, postModifiers: List<Node.PostModifier>, body: Node.Expression?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Declaration.FunctionDeclaration.FunctionDeclaration"]},{"name":"constructor(modifiers: List<Node.Modifier>, lPar: Node.Keyword.LPar, innerType: Node.Type, rPar: Node.Keyword.RPar, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Type.ParenthesizedType.ParenthesizedType","location":"ast/ktast.ast/-node/-type/-parenthesized-type/-parenthesized-type.html","searchKeys":["ParenthesizedType","constructor(modifiers: List<Node.Modifier>, lPar: Node.Keyword.LPar, innerType: Node.Type, rPar: Node.Keyword.RPar, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Type.ParenthesizedType.ParenthesizedType"]},{"name":"constructor(modifiers: List<Node.Modifier>, lPar: Node.Keyword.LPar?, parameter: Node.FunctionParameter?, rPar: Node.Keyword.RPar?, postModifiers: List<Node.PostModifier>, body: Node.Expression?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Declaration.PropertyDeclaration.Setter.Setter","location":"ast/ktast.ast/-node/-declaration/-property-declaration/-setter/-setter.html","searchKeys":["Setter","constructor(modifiers: List<Node.Modifier>, lPar: Node.Keyword.LPar?, parameter: Node.FunctionParameter?, rPar: Node.Keyword.RPar?, postModifiers: List<Node.PostModifier>, body: Node.Expression?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Declaration.PropertyDeclaration.Setter.Setter"]},{"name":"constructor(modifiers: List<Node.Modifier>, lPar: Node.Keyword.LPar?, rPar: Node.Keyword.RPar?, type: Node.Type?, postModifiers: List<Node.PostModifier>, body: Node.Expression?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Declaration.PropertyDeclaration.Getter.Getter","location":"ast/ktast.ast/-node/-declaration/-property-declaration/-getter/-getter.html","searchKeys":["Getter","constructor(modifiers: List<Node.Modifier>, lPar: Node.Keyword.LPar?, rPar: Node.Keyword.RPar?, type: Node.Type?, postModifiers: List<Node.PostModifier>, body: Node.Expression?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Declaration.PropertyDeclaration.Getter.Getter"]},{"name":"constructor(modifiers: List<Node.Modifier>, name: Node.Expression.NameExpression, lAngle: Node.Keyword.Less?, typeParameters: List<Node.TypeParameter>, rAngle: Node.Keyword.Greater?, type: Node.Type, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Declaration.TypeAliasDeclaration.TypeAliasDeclaration","location":"ast/ktast.ast/-node/-declaration/-type-alias-declaration/-type-alias-declaration.html","searchKeys":["TypeAliasDeclaration","constructor(modifiers: List<Node.Modifier>, name: Node.Expression.NameExpression, lAngle: Node.Keyword.Less?, typeParameters: List<Node.TypeParameter>, rAngle: Node.Keyword.Greater?, type: Node.Type, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Declaration.TypeAliasDeclaration.TypeAliasDeclaration"]},{"name":"constructor(modifiers: List<Node.Modifier>, name: Node.Expression.NameExpression, lPar: Node.Keyword.LPar?, arguments: List<Node.ValueArgument>, rPar: Node.Keyword.RPar?, classBody: Node.Declaration.ClassOrObject.ClassBody?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.EnumEntry.EnumEntry","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-enum-entry/-enum-entry.html","searchKeys":["EnumEntry","constructor(modifiers: List<Node.Modifier>, name: Node.Expression.NameExpression, lPar: Node.Keyword.LPar?, arguments: List<Node.ValueArgument>, rPar: Node.Keyword.RPar?, classBody: Node.Declaration.ClassOrObject.ClassBody?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.EnumEntry.EnumEntry"]},{"name":"constructor(modifiers: List<Node.Modifier>, name: Node.Expression.NameExpression, type: Node.Type?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.TypeParameter.TypeParameter","location":"ast/ktast.ast/-node/-type-parameter/-type-parameter.html","searchKeys":["TypeParameter","constructor(modifiers: List<Node.Modifier>, name: Node.Expression.NameExpression, type: Node.Type?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.TypeParameter.TypeParameter"]},{"name":"constructor(modifiers: List<Node.Modifier>, qualifiers: List<Node.Type.SimpleType.SimpleTypeQualifier>, name: Node.Expression.NameExpression, lAngle: Node.Keyword.Less?, typeArguments: List<Node.TypeArgument>, rAngle: Node.Keyword.Greater?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Type.SimpleType.SimpleType","location":"ast/ktast.ast/-node/-type/-simple-type/-simple-type.html","searchKeys":["SimpleType","constructor(modifiers: List<Node.Modifier>, qualifiers: List<Node.Type.SimpleType.SimpleTypeQualifier>, name: Node.Expression.NameExpression, lAngle: Node.Keyword.Less?, typeArguments: List<Node.TypeArgument>, rAngle: Node.Keyword.Greater?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Type.SimpleType.SimpleType"]},{"name":"constructor(modifiers: List<Node.Modifier>, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Type.DynamicType.DynamicType","location":"ast/ktast.ast/-node/-type/-dynamic-type/-dynamic-type.html","searchKeys":["DynamicType","constructor(modifiers: List<Node.Modifier>, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Type.DynamicType.DynamicType"]},{"name":"constructor(modifiers: List<Node.Modifier>, type: Node.Type, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.TypeArgument.TypeArgument","location":"ast/ktast.ast/-node/-type-argument/-type-argument.html","searchKeys":["TypeArgument","constructor(modifiers: List<Node.Modifier>, type: Node.Type, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.TypeArgument.TypeArgument"]},{"name":"constructor(modifiers: List<Node.Modifier>, valOrVarKeyword: Node.Keyword.ValOrVarKeyword, lAngle: Node.Keyword.Less?, typeParameters: List<Node.TypeParameter>, rAngle: Node.Keyword.Greater?, receiverType: Node.Type?, lPar: Node.Keyword.LPar?, variables: List<Node.Variable>, rPar: Node.Keyword.RPar?, typeConstraintSet: Node.PostModifier.TypeConstraintSet?, initializerExpression: Node.Expression?, delegateExpression: Node.Expression?, accessors: List<Node.Declaration.PropertyDeclaration.Accessor>, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Declaration.PropertyDeclaration.PropertyDeclaration","location":"ast/ktast.ast/-node/-declaration/-property-declaration/-property-declaration.html","searchKeys":["PropertyDeclaration","constructor(modifiers: List<Node.Modifier>, valOrVarKeyword: Node.Keyword.ValOrVarKeyword, lAngle: Node.Keyword.Less?, typeParameters: List<Node.TypeParameter>, rAngle: Node.Keyword.Greater?, receiverType: Node.Type?, lPar: Node.Keyword.LPar?, variables: List<Node.Variable>, rPar: Node.Keyword.RPar?, typeConstraintSet: Node.PostModifier.TypeConstraintSet?, initializerExpression: Node.Expression?, delegateExpression: Node.Expression?, accessors: List<Node.Declaration.PropertyDeclaration.Accessor>, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Declaration.PropertyDeclaration.PropertyDeclaration"]},{"name":"constructor(modifiers: List<Node.Modifier>, valOrVarKeyword: Node.Keyword.ValOrVarKeyword?, name: Node.Expression.NameExpression, type: Node.Type?, defaultValue: Node.Expression?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.FunctionParameter.FunctionParameter","location":"ast/ktast.ast/-node/-function-parameter/-function-parameter.html","searchKeys":["FunctionParameter","constructor(modifiers: List<Node.Modifier>, valOrVarKeyword: Node.Keyword.ValOrVarKeyword?, name: Node.Expression.NameExpression, type: Node.Type?, defaultValue: Node.Expression?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.FunctionParameter.FunctionParameter"]},{"name":"constructor(name: Node.Expression.NameExpression, lAngle: Node.Keyword.Less?, typeArguments: List<Node.TypeArgument>, rAngle: Node.Keyword.Greater?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Type.SimpleType.SimpleTypeQualifier.SimpleTypeQualifier","location":"ast/ktast.ast/-node/-type/-simple-type/-simple-type-qualifier/-simple-type-qualifier.html","searchKeys":["SimpleTypeQualifier","constructor(name: Node.Expression.NameExpression, lAngle: Node.Keyword.Less?, typeArguments: List<Node.TypeArgument>, rAngle: Node.Keyword.Greater?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Type.SimpleType.SimpleTypeQualifier.SimpleTypeQualifier"]},{"name":"constructor(name: Node.Expression.NameExpression?, spreadOperator: Node.Keyword.Asterisk?, expression: Node.Expression, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.ValueArgument.ValueArgument","location":"ast/ktast.ast/-node/-value-argument/-value-argument.html","searchKeys":["ValueArgument","constructor(name: Node.Expression.NameExpression?, spreadOperator: Node.Keyword.Asterisk?, expression: Node.Expression, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.ValueArgument.ValueArgument"]},{"name":"constructor(name: Node.Expression.NameExpression?, type: Node.Type, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Type.FunctionType.FunctionTypeParameter.FunctionTypeParameter","location":"ast/ktast.ast/-node/-type/-function-type/-function-type-parameter/-function-type-parameter.html","searchKeys":["FunctionTypeParameter","constructor(name: Node.Expression.NameExpression?, type: Node.Type, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Type.FunctionType.FunctionTypeParameter.FunctionTypeParameter"]},{"name":"constructor(names: List<Node.Expression.NameExpression>, aliasName: Node.Expression.NameExpression?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.ImportDirective.ImportDirective","location":"ast/ktast.ast/-node/-import-directive/-import-directive.html","searchKeys":["ImportDirective","constructor(names: List<Node.Expression.NameExpression>, aliasName: Node.Expression.NameExpression?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.ImportDirective.ImportDirective"]},{"name":"constructor(names: List<Node.Expression.NameExpression>, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.PackageDirective.PackageDirective","location":"ast/ktast.ast/-node/-package-directive/-package-directive.html","searchKeys":["PackageDirective","constructor(names: List<Node.Expression.NameExpression>, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.PackageDirective.PackageDirective"]},{"name":"constructor(node: T, parent: NodePath<*>?)","description":"ktast.ast.NodePath.NodePath","location":"ast/ktast.ast/-node-path/-node-path.html","searchKeys":["NodePath","constructor(node: T, parent: NodePath<*>?)","ktast.ast.NodePath.NodePath"]},{"name":"constructor(operator: Node.Expression.UnaryExpression.UnaryOperator, expression: Node.Expression, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.PrefixUnaryExpression.PrefixUnaryExpression","location":"ast/ktast.ast/-node/-expression/-prefix-unary-expression/-prefix-unary-expression.html","searchKeys":["PrefixUnaryExpression","constructor(operator: Node.Expression.UnaryExpression.UnaryOperator, expression: Node.Expression, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.PrefixUnaryExpression.PrefixUnaryExpression"]},{"name":"constructor(operator: Node.Expression.WhenExpression.WhenConditionRangeOperator, expression: Node.Expression, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.WhenExpression.RangeWhenCondition.RangeWhenCondition","location":"ast/ktast.ast/-node/-expression/-when-expression/-range-when-condition/-range-when-condition.html","searchKeys":["RangeWhenCondition","constructor(operator: Node.Expression.WhenExpression.WhenConditionRangeOperator, expression: Node.Expression, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.WhenExpression.RangeWhenCondition.RangeWhenCondition"]},{"name":"constructor(operator: Node.Expression.WhenExpression.WhenConditionTypeOperator, type: Node.Type, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.WhenExpression.TypeWhenCondition.TypeWhenCondition","location":"ast/ktast.ast/-node/-expression/-when-expression/-type-when-condition/-type-when-condition.html","searchKeys":["TypeWhenCondition","constructor(operator: Node.Expression.WhenExpression.WhenConditionTypeOperator, type: Node.Type, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.WhenExpression.TypeWhenCondition.TypeWhenCondition"]},{"name":"constructor(parameters: List<Node.LambdaParameter>, arrow: Node.Keyword.Arrow?, statements: List<Node.Statement>, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.LambdaExpression.LambdaExpression","location":"ast/ktast.ast/-node/-expression/-lambda-expression/-lambda-expression.html","searchKeys":["LambdaExpression","constructor(parameters: List<Node.LambdaParameter>, arrow: Node.Keyword.Arrow?, statements: List<Node.Statement>, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.LambdaExpression.LambdaExpression"]},{"name":"constructor(statements: List<Node.Statement>, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.BlockExpression.BlockExpression","location":"ast/ktast.ast/-node/-expression/-block-expression/-block-expression.html","searchKeys":["BlockExpression","constructor(statements: List<Node.Statement>, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.BlockExpression.BlockExpression"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.NullLiteralExpression.NullLiteralExpression","location":"ast/ktast.ast/-node/-expression/-null-literal-expression/-null-literal-expression.html","searchKeys":["NullLiteralExpression","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.NullLiteralExpression.NullLiteralExpression"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Extra.Semicolon.Semicolon","location":"ast/ktast.ast/-node/-extra/-semicolon/-semicolon.html","searchKeys":["Semicolon","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Extra.Semicolon.Semicolon"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Extra.TrailingComma.TrailingComma","location":"ast/ktast.ast/-node/-extra/-trailing-comma/-trailing-comma.html","searchKeys":["TrailingComma","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Extra.TrailingComma.TrailingComma"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Abstract.Abstract","location":"ast/ktast.ast/-node/-keyword/-abstract/-abstract.html","searchKeys":["Abstract","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Abstract.Abstract"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Actual.Actual","location":"ast/ktast.ast/-node/-keyword/-actual/-actual.html","searchKeys":["Actual","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Actual.Actual"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.AndAnd.AndAnd","location":"ast/ktast.ast/-node/-keyword/-and-and/-and-and.html","searchKeys":["AndAnd","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.AndAnd.AndAnd"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Annotation.Annotation","location":"ast/ktast.ast/-node/-keyword/-annotation/-annotation.html","searchKeys":["Annotation","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Annotation.Annotation"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Arrow.Arrow","location":"ast/ktast.ast/-node/-keyword/-arrow/-arrow.html","searchKeys":["Arrow","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Arrow.Arrow"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.As.As","location":"ast/ktast.ast/-node/-keyword/-as/-as.html","searchKeys":["As","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.As.As"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.AsQuestion.AsQuestion","location":"ast/ktast.ast/-node/-keyword/-as-question/-as-question.html","searchKeys":["AsQuestion","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.AsQuestion.AsQuestion"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Asterisk.Asterisk","location":"ast/ktast.ast/-node/-keyword/-asterisk/-asterisk.html","searchKeys":["Asterisk","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Asterisk.Asterisk"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.AsteriskEqual.AsteriskEqual","location":"ast/ktast.ast/-node/-keyword/-asterisk-equal/-asterisk-equal.html","searchKeys":["AsteriskEqual","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.AsteriskEqual.AsteriskEqual"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Class.Class","location":"ast/ktast.ast/-node/-keyword/-class/-class.html","searchKeys":["Class","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Class.Class"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Companion.Companion","location":"ast/ktast.ast/-node/-keyword/-companion/-companion.html","searchKeys":["Companion","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Companion.Companion"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Const.Const","location":"ast/ktast.ast/-node/-keyword/-const/-const.html","searchKeys":["Const","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Const.Const"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Constructor.Constructor","location":"ast/ktast.ast/-node/-keyword/-constructor/-constructor.html","searchKeys":["Constructor","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Constructor.Constructor"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.CrossInline.CrossInline","location":"ast/ktast.ast/-node/-keyword/-cross-inline/-cross-inline.html","searchKeys":["CrossInline","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.CrossInline.CrossInline"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Data.Data","location":"ast/ktast.ast/-node/-keyword/-data/-data.html","searchKeys":["Data","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Data.Data"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Delegate.Delegate","location":"ast/ktast.ast/-node/-keyword/-delegate/-delegate.html","searchKeys":["Delegate","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Delegate.Delegate"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Dot.Dot","location":"ast/ktast.ast/-node/-keyword/-dot/-dot.html","searchKeys":["Dot","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Dot.Dot"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.DotDot.DotDot","location":"ast/ktast.ast/-node/-keyword/-dot-dot/-dot-dot.html","searchKeys":["DotDot","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.DotDot.DotDot"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.DotDotLess.DotDotLess","location":"ast/ktast.ast/-node/-keyword/-dot-dot-less/-dot-dot-less.html","searchKeys":["DotDotLess","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.DotDotLess.DotDotLess"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Enum.Enum","location":"ast/ktast.ast/-node/-keyword/-enum/-enum.html","searchKeys":["Enum","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Enum.Enum"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.EqualEqual.EqualEqual","location":"ast/ktast.ast/-node/-keyword/-equal-equal/-equal-equal.html","searchKeys":["EqualEqual","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.EqualEqual.EqualEqual"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Expect.Expect","location":"ast/ktast.ast/-node/-keyword/-expect/-expect.html","searchKeys":["Expect","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Expect.Expect"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.External.External","location":"ast/ktast.ast/-node/-keyword/-external/-external.html","searchKeys":["External","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.External.External"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Field.Field","location":"ast/ktast.ast/-node/-keyword/-field/-field.html","searchKeys":["Field","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Field.Field"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.File.File","location":"ast/ktast.ast/-node/-keyword/-file/-file.html","searchKeys":["File","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.File.File"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Final.Final","location":"ast/ktast.ast/-node/-keyword/-final/-final.html","searchKeys":["Final","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Final.Final"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Fun.Fun","location":"ast/ktast.ast/-node/-keyword/-fun/-fun.html","searchKeys":["Fun","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Fun.Fun"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Get.Get","location":"ast/ktast.ast/-node/-keyword/-get/-get.html","searchKeys":["Get","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Get.Get"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Greater.Greater","location":"ast/ktast.ast/-node/-keyword/-greater/-greater.html","searchKeys":["Greater","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Greater.Greater"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.GreaterEqual.GreaterEqual","location":"ast/ktast.ast/-node/-keyword/-greater-equal/-greater-equal.html","searchKeys":["GreaterEqual","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.GreaterEqual.GreaterEqual"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.In.In","location":"ast/ktast.ast/-node/-keyword/-in/-in.html","searchKeys":["In","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.In.In"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Infix.Infix","location":"ast/ktast.ast/-node/-keyword/-infix/-infix.html","searchKeys":["Infix","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Infix.Infix"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Inline.Inline","location":"ast/ktast.ast/-node/-keyword/-inline/-inline.html","searchKeys":["Inline","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Inline.Inline"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Inner.Inner","location":"ast/ktast.ast/-node/-keyword/-inner/-inner.html","searchKeys":["Inner","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Inner.Inner"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Interface.Interface","location":"ast/ktast.ast/-node/-keyword/-interface/-interface.html","searchKeys":["Interface","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Interface.Interface"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Internal.Internal","location":"ast/ktast.ast/-node/-keyword/-internal/-internal.html","searchKeys":["Internal","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Internal.Internal"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Is.Is","location":"ast/ktast.ast/-node/-keyword/-is/-is.html","searchKeys":["Is","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Is.Is"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.LBracket.LBracket","location":"ast/ktast.ast/-node/-keyword/-l-bracket/-l-bracket.html","searchKeys":["LBracket","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.LBracket.LBracket"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.LPar.LPar","location":"ast/ktast.ast/-node/-keyword/-l-par/-l-par.html","searchKeys":["LPar","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.LPar.LPar"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.LateInit.LateInit","location":"ast/ktast.ast/-node/-keyword/-late-init/-late-init.html","searchKeys":["LateInit","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.LateInit.LateInit"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Less.Less","location":"ast/ktast.ast/-node/-keyword/-less/-less.html","searchKeys":["Less","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Less.Less"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.LessEqual.LessEqual","location":"ast/ktast.ast/-node/-keyword/-less-equal/-less-equal.html","searchKeys":["LessEqual","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.LessEqual.LessEqual"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Minus.Minus","location":"ast/ktast.ast/-node/-keyword/-minus/-minus.html","searchKeys":["Minus","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Minus.Minus"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.MinusEqual.MinusEqual","location":"ast/ktast.ast/-node/-keyword/-minus-equal/-minus-equal.html","searchKeys":["MinusEqual","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.MinusEqual.MinusEqual"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.MinusMinus.MinusMinus","location":"ast/ktast.ast/-node/-keyword/-minus-minus/-minus-minus.html","searchKeys":["MinusMinus","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.MinusMinus.MinusMinus"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Noinline.Noinline","location":"ast/ktast.ast/-node/-keyword/-noinline/-noinline.html","searchKeys":["Noinline","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Noinline.Noinline"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Not.Not","location":"ast/ktast.ast/-node/-keyword/-not/-not.html","searchKeys":["Not","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Not.Not"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.NotEqual.NotEqual","location":"ast/ktast.ast/-node/-keyword/-not-equal/-not-equal.html","searchKeys":["NotEqual","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.NotEqual.NotEqual"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.NotIn.NotIn","location":"ast/ktast.ast/-node/-keyword/-not-in/-not-in.html","searchKeys":["NotIn","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.NotIn.NotIn"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.NotIs.NotIs","location":"ast/ktast.ast/-node/-keyword/-not-is/-not-is.html","searchKeys":["NotIs","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.NotIs.NotIs"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.NotNot.NotNot","location":"ast/ktast.ast/-node/-keyword/-not-not/-not-not.html","searchKeys":["NotNot","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.NotNot.NotNot"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Object.Object","location":"ast/ktast.ast/-node/-keyword/-object/-object.html","searchKeys":["Object","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Object.Object"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Open.Open","location":"ast/ktast.ast/-node/-keyword/-open/-open.html","searchKeys":["Open","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Open.Open"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Operator.Operator","location":"ast/ktast.ast/-node/-keyword/-operator/-operator.html","searchKeys":["Operator","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Operator.Operator"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.OrOr.OrOr","location":"ast/ktast.ast/-node/-keyword/-or-or/-or-or.html","searchKeys":["OrOr","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.OrOr.OrOr"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Out.Out","location":"ast/ktast.ast/-node/-keyword/-out/-out.html","searchKeys":["Out","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Out.Out"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Override.Override","location":"ast/ktast.ast/-node/-keyword/-override/-override.html","searchKeys":["Override","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Override.Override"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Param.Param","location":"ast/ktast.ast/-node/-keyword/-param/-param.html","searchKeys":["Param","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Param.Param"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Percent.Percent","location":"ast/ktast.ast/-node/-keyword/-percent/-percent.html","searchKeys":["Percent","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Percent.Percent"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.PercentEqual.PercentEqual","location":"ast/ktast.ast/-node/-keyword/-percent-equal/-percent-equal.html","searchKeys":["PercentEqual","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.PercentEqual.PercentEqual"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Plus.Plus","location":"ast/ktast.ast/-node/-keyword/-plus/-plus.html","searchKeys":["Plus","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Plus.Plus"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.PlusEqual.PlusEqual","location":"ast/ktast.ast/-node/-keyword/-plus-equal/-plus-equal.html","searchKeys":["PlusEqual","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.PlusEqual.PlusEqual"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.PlusPlus.PlusPlus","location":"ast/ktast.ast/-node/-keyword/-plus-plus/-plus-plus.html","searchKeys":["PlusPlus","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.PlusPlus.PlusPlus"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Private.Private","location":"ast/ktast.ast/-node/-keyword/-private/-private.html","searchKeys":["Private","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Private.Private"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Property.Property","location":"ast/ktast.ast/-node/-keyword/-property/-property.html","searchKeys":["Property","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Property.Property"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Protected.Protected","location":"ast/ktast.ast/-node/-keyword/-protected/-protected.html","searchKeys":["Protected","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Protected.Protected"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Public.Public","location":"ast/ktast.ast/-node/-keyword/-public/-public.html","searchKeys":["Public","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Public.Public"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Question.Question","location":"ast/ktast.ast/-node/-keyword/-question/-question.html","searchKeys":["Question","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Question.Question"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.QuestionColon.QuestionColon","location":"ast/ktast.ast/-node/-keyword/-question-colon/-question-colon.html","searchKeys":["QuestionColon","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.QuestionColon.QuestionColon"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.QuestionDot.QuestionDot","location":"ast/ktast.ast/-node/-keyword/-question-dot/-question-dot.html","searchKeys":["QuestionDot","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.QuestionDot.QuestionDot"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.RBracket.RBracket","location":"ast/ktast.ast/-node/-keyword/-r-bracket/-r-bracket.html","searchKeys":["RBracket","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.RBracket.RBracket"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.RPar.RPar","location":"ast/ktast.ast/-node/-keyword/-r-par/-r-par.html","searchKeys":["RPar","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.RPar.RPar"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Receiver.Receiver","location":"ast/ktast.ast/-node/-keyword/-receiver/-receiver.html","searchKeys":["Receiver","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Receiver.Receiver"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Reified.Reified","location":"ast/ktast.ast/-node/-keyword/-reified/-reified.html","searchKeys":["Reified","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Reified.Reified"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Sealed.Sealed","location":"ast/ktast.ast/-node/-keyword/-sealed/-sealed.html","searchKeys":["Sealed","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Sealed.Sealed"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Set.Set","location":"ast/ktast.ast/-node/-keyword/-set/-set.html","searchKeys":["Set","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Set.Set"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.SetParam.SetParam","location":"ast/ktast.ast/-node/-keyword/-set-param/-set-param.html","searchKeys":["SetParam","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.SetParam.SetParam"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Slash.Slash","location":"ast/ktast.ast/-node/-keyword/-slash/-slash.html","searchKeys":["Slash","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Slash.Slash"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.SlashEqual.SlashEqual","location":"ast/ktast.ast/-node/-keyword/-slash-equal/-slash-equal.html","searchKeys":["SlashEqual","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.SlashEqual.SlashEqual"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Suspend.Suspend","location":"ast/ktast.ast/-node/-keyword/-suspend/-suspend.html","searchKeys":["Suspend","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Suspend.Suspend"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.TailRec.TailRec","location":"ast/ktast.ast/-node/-keyword/-tail-rec/-tail-rec.html","searchKeys":["TailRec","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.TailRec.TailRec"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Val.Val","location":"ast/ktast.ast/-node/-keyword/-val/-val.html","searchKeys":["Val","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Val.Val"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Value.Value","location":"ast/ktast.ast/-node/-keyword/-value/-value.html","searchKeys":["Value","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Value.Value"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Var.Var","location":"ast/ktast.ast/-node/-keyword/-var/-var.html","searchKeys":["Var","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Var.Var"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.Vararg.Vararg","location":"ast/ktast.ast/-node/-keyword/-vararg/-vararg.html","searchKeys":["Vararg","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.Vararg.Vararg"]},{"name":"constructor(supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Keyword.When.When","location":"ast/ktast.ast/-node/-keyword/-when/-when.html","searchKeys":["When","constructor(supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Keyword.When.When"]},{"name":"constructor(target: Node.Modifier.AnnotationSet.AnnotationTarget?, lBracket: Node.Keyword.LBracket?, annotations: List<Node.Modifier.AnnotationSet.Annotation>, rBracket: Node.Keyword.RBracket?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Modifier.AnnotationSet.AnnotationSet","location":"ast/ktast.ast/-node/-modifier/-annotation-set/-annotation-set.html","searchKeys":["AnnotationSet","constructor(target: Node.Modifier.AnnotationSet.AnnotationTarget?, lBracket: Node.Keyword.LBracket?, annotations: List<Node.Modifier.AnnotationSet.Annotation>, rBracket: Node.Keyword.RBracket?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Modifier.AnnotationSet.AnnotationSet"]},{"name":"constructor(text: String, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.BooleanLiteralExpression.BooleanLiteralExpression","location":"ast/ktast.ast/-node/-expression/-boolean-literal-expression/-boolean-literal-expression.html","searchKeys":["BooleanLiteralExpression","constructor(text: String, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.BooleanLiteralExpression.BooleanLiteralExpression"]},{"name":"constructor(text: String, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.CharacterLiteralExpression.CharacterLiteralExpression","location":"ast/ktast.ast/-node/-expression/-character-literal-expression/-character-literal-expression.html","searchKeys":["CharacterLiteralExpression","constructor(text: String, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.CharacterLiteralExpression.CharacterLiteralExpression"]},{"name":"constructor(text: String, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.IntegerLiteralExpression.IntegerLiteralExpression","location":"ast/ktast.ast/-node/-expression/-integer-literal-expression/-integer-literal-expression.html","searchKeys":["IntegerLiteralExpression","constructor(text: String, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.IntegerLiteralExpression.IntegerLiteralExpression"]},{"name":"constructor(text: String, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.NameExpression.NameExpression","location":"ast/ktast.ast/-node/-expression/-name-expression/-name-expression.html","searchKeys":["NameExpression","constructor(text: String, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.NameExpression.NameExpression"]},{"name":"constructor(text: String, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.RealLiteralExpression.RealLiteralExpression","location":"ast/ktast.ast/-node/-expression/-real-literal-expression/-real-literal-expression.html","searchKeys":["RealLiteralExpression","constructor(text: String, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.RealLiteralExpression.RealLiteralExpression"]},{"name":"constructor(text: String, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.StringLiteralExpression.EscapeStringEntry.EscapeStringEntry","location":"ast/ktast.ast/-node/-expression/-string-literal-expression/-escape-string-entry/-escape-string-entry.html","searchKeys":["EscapeStringEntry","constructor(text: String, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.StringLiteralExpression.EscapeStringEntry.EscapeStringEntry"]},{"name":"constructor(text: String, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.StringLiteralExpression.LiteralStringEntry.LiteralStringEntry","location":"ast/ktast.ast/-node/-expression/-string-literal-expression/-literal-string-entry/-literal-string-entry.html","searchKeys":["LiteralStringEntry","constructor(text: String, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.StringLiteralExpression.LiteralStringEntry.LiteralStringEntry"]},{"name":"constructor(text: String, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Extra.Comment.Comment","location":"ast/ktast.ast/-node/-extra/-comment/-comment.html","searchKeys":["Comment","constructor(text: String, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Extra.Comment.Comment"]},{"name":"constructor(text: String, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Extra.Whitespace.Whitespace","location":"ast/ktast.ast/-node/-extra/-whitespace/-whitespace.html","searchKeys":["Whitespace","constructor(text: String, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Extra.Whitespace.Whitespace"]},{"name":"constructor(type: Node.Type, expression: Node.Expression, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Declaration.ClassOrObject.DelegationClassParent.DelegationClassParent","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-delegation-class-parent/-delegation-class-parent.html","searchKeys":["DelegationClassParent","constructor(type: Node.Type, expression: Node.Expression, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Declaration.ClassOrObject.DelegationClassParent.DelegationClassParent"]},{"name":"constructor(type: Node.Type, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Declaration.ClassOrObject.TypeClassParent.TypeClassParent","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-type-class-parent/-type-class-parent.html","searchKeys":["TypeClassParent","constructor(type: Node.Type, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Declaration.ClassOrObject.TypeClassParent.TypeClassParent"]},{"name":"constructor(type: Node.Type.SimpleType, lPar: Node.Keyword.LPar, arguments: List<Node.ValueArgument>, rPar: Node.Keyword.RPar, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Declaration.ClassOrObject.ConstructorClassParent.ConstructorClassParent","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-constructor-class-parent/-constructor-class-parent.html","searchKeys":["ConstructorClassParent","constructor(type: Node.Type.SimpleType, lPar: Node.Keyword.LPar, arguments: List<Node.ValueArgument>, rPar: Node.Keyword.RPar, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Declaration.ClassOrObject.ConstructorClassParent.ConstructorClassParent"]},{"name":"constructor(type: Node.Type.SimpleType, lPar: Node.Keyword.LPar?, arguments: List<Node.ValueArgument>, rPar: Node.Keyword.RPar?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Modifier.AnnotationSet.Annotation.Annotation","location":"ast/ktast.ast/-node/-modifier/-annotation-set/-annotation/-annotation.html","searchKeys":["Annotation","constructor(type: Node.Type.SimpleType, lPar: Node.Keyword.LPar?, arguments: List<Node.ValueArgument>, rPar: Node.Keyword.RPar?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Modifier.AnnotationSet.Annotation.Annotation"]},{"name":"constructor(typeArgument: Node.TypeArgument?, label: Node.Expression.NameExpression?, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.SuperExpression.SuperExpression","location":"ast/ktast.ast/-node/-expression/-super-expression/-super-expression.html","searchKeys":["SuperExpression","constructor(typeArgument: Node.TypeArgument?, label: Node.Expression.NameExpression?, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.SuperExpression.SuperExpression"]},{"name":"constructor(whenKeyword: Node.Keyword.When, subject: Node.Expression.WhenExpression.WhenSubject?, branches: List<Node.Expression.WhenExpression.WhenBranch>, supplement: NodeSupplement = NodeSupplement())","description":"ktast.ast.Node.Expression.WhenExpression.WhenExpression","location":"ast/ktast.ast/-node/-expression/-when-expression/-when-expression.html","searchKeys":["WhenExpression","constructor(whenKeyword: Node.Keyword.When, subject: Node.Expression.WhenExpression.WhenSubject?, branches: List<Node.Expression.WhenExpression.WhenBranch>, supplement: NodeSupplement = NodeSupplement())","ktast.ast.Node.Expression.WhenExpression.WhenExpression"]},{"name":"data class Abstract(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Abstract","location":"ast/ktast.ast/-node/-keyword/-abstract/index.html","searchKeys":["Abstract","data class Abstract(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Abstract"]},{"name":"data class Actual(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Actual","location":"ast/ktast.ast/-node/-keyword/-actual/index.html","searchKeys":["Actual","data class Actual(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Actual"]},{"name":"data class AndAnd(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Keyword.AndAnd","location":"ast/ktast.ast/-node/-keyword/-and-and/index.html","searchKeys":["AndAnd","data class AndAnd(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Keyword.AndAnd"]},{"name":"data class AnnotatedExpression(val annotationSets: List<Node.Modifier.AnnotationSet>, val statement: Node.Statement, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression, Node.WithAnnotationSets","description":"ktast.ast.Node.Expression.AnnotatedExpression","location":"ast/ktast.ast/-node/-expression/-annotated-expression/index.html","searchKeys":["AnnotatedExpression","data class AnnotatedExpression(val annotationSets: List<Node.Modifier.AnnotationSet>, val statement: Node.Statement, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression, Node.WithAnnotationSets","ktast.ast.Node.Expression.AnnotatedExpression"]},{"name":"data class Annotation(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Annotation","location":"ast/ktast.ast/-node/-keyword/-annotation/index.html","searchKeys":["Annotation","data class Annotation(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Annotation"]},{"name":"data class Annotation(val type: Node.Type.SimpleType, val lPar: Node.Keyword.LPar?, val arguments: List<Node.ValueArgument>, val rPar: Node.Keyword.RPar?, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithValueArguments","description":"ktast.ast.Node.Modifier.AnnotationSet.Annotation","location":"ast/ktast.ast/-node/-modifier/-annotation-set/-annotation/index.html","searchKeys":["Annotation","data class Annotation(val type: Node.Type.SimpleType, val lPar: Node.Keyword.LPar?, val arguments: List<Node.ValueArgument>, val rPar: Node.Keyword.RPar?, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithValueArguments","ktast.ast.Node.Modifier.AnnotationSet.Annotation"]},{"name":"data class AnnotationSet(val target: Node.Modifier.AnnotationSet.AnnotationTarget?, val lBracket: Node.Keyword.LBracket?, val annotations: List<Node.Modifier.AnnotationSet.Annotation>, val rBracket: Node.Keyword.RBracket?, val supplement: NodeSupplement = NodeSupplement()) : Node.Modifier","description":"ktast.ast.Node.Modifier.AnnotationSet","location":"ast/ktast.ast/-node/-modifier/-annotation-set/index.html","searchKeys":["AnnotationSet","data class AnnotationSet(val target: Node.Modifier.AnnotationSet.AnnotationTarget?, val lBracket: Node.Keyword.LBracket?, val annotations: List<Node.Modifier.AnnotationSet.Annotation>, val rBracket: Node.Keyword.RBracket?, val supplement: NodeSupplement = NodeSupplement()) : Node.Modifier","ktast.ast.Node.Modifier.AnnotationSet"]},{"name":"data class AnonymousFunctionExpression(val function: Node.Declaration.FunctionDeclaration, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","description":"ktast.ast.Node.Expression.AnonymousFunctionExpression","location":"ast/ktast.ast/-node/-expression/-anonymous-function-expression/index.html","searchKeys":["AnonymousFunctionExpression","data class AnonymousFunctionExpression(val function: Node.Declaration.FunctionDeclaration, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","ktast.ast.Node.Expression.AnonymousFunctionExpression"]},{"name":"data class Arrow(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword","description":"ktast.ast.Node.Keyword.Arrow","location":"ast/ktast.ast/-node/-keyword/-arrow/index.html","searchKeys":["Arrow","data class Arrow(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword","ktast.ast.Node.Keyword.Arrow"]},{"name":"data class As(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryTypeExpression.BinaryTypeOperator","description":"ktast.ast.Node.Keyword.As","location":"ast/ktast.ast/-node/-keyword/-as/index.html","searchKeys":["As","data class As(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryTypeExpression.BinaryTypeOperator","ktast.ast.Node.Keyword.As"]},{"name":"data class AsQuestion(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryTypeExpression.BinaryTypeOperator","description":"ktast.ast.Node.Keyword.AsQuestion","location":"ast/ktast.ast/-node/-keyword/-as-question/index.html","searchKeys":["AsQuestion","data class AsQuestion(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryTypeExpression.BinaryTypeOperator","ktast.ast.Node.Keyword.AsQuestion"]},{"name":"data class Asterisk(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Keyword.Asterisk","location":"ast/ktast.ast/-node/-keyword/-asterisk/index.html","searchKeys":["Asterisk","data class Asterisk(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Keyword.Asterisk"]},{"name":"data class AsteriskEqual(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Keyword.AsteriskEqual","location":"ast/ktast.ast/-node/-keyword/-asterisk-equal/index.html","searchKeys":["AsteriskEqual","data class AsteriskEqual(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Keyword.AsteriskEqual"]},{"name":"data class BinaryExpression(val lhs: Node.Expression, val operator: Node.Expression.BinaryExpression.BinaryOperator, val rhs: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","description":"ktast.ast.Node.Expression.BinaryExpression","location":"ast/ktast.ast/-node/-expression/-binary-expression/index.html","searchKeys":["BinaryExpression","data class BinaryExpression(val lhs: Node.Expression, val operator: Node.Expression.BinaryExpression.BinaryOperator, val rhs: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","ktast.ast.Node.Expression.BinaryExpression"]},{"name":"data class BinaryTypeExpression(val lhs: Node.Expression, val operator: Node.Expression.BinaryTypeExpression.BinaryTypeOperator, val rhs: Node.Type, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","description":"ktast.ast.Node.Expression.BinaryTypeExpression","location":"ast/ktast.ast/-node/-expression/-binary-type-expression/index.html","searchKeys":["BinaryTypeExpression","data class BinaryTypeExpression(val lhs: Node.Expression, val operator: Node.Expression.BinaryTypeExpression.BinaryTypeOperator, val rhs: Node.Type, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","ktast.ast.Node.Expression.BinaryTypeExpression"]},{"name":"data class BlockExpression(val statements: List<Node.Statement>, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression, Node.WithStatements","description":"ktast.ast.Node.Expression.BlockExpression","location":"ast/ktast.ast/-node/-expression/-block-expression/index.html","searchKeys":["BlockExpression","data class BlockExpression(val statements: List<Node.Statement>, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression, Node.WithStatements","ktast.ast.Node.Expression.BlockExpression"]},{"name":"data class BooleanLiteralExpression(val text: String, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.ConstantLiteralExpression","description":"ktast.ast.Node.Expression.BooleanLiteralExpression","location":"ast/ktast.ast/-node/-expression/-boolean-literal-expression/index.html","searchKeys":["BooleanLiteralExpression","data class BooleanLiteralExpression(val text: String, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.ConstantLiteralExpression","ktast.ast.Node.Expression.BooleanLiteralExpression"]},{"name":"data class BreakExpression(val label: Node.Expression.NameExpression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression, Node.Expression.WithLabel","description":"ktast.ast.Node.Expression.BreakExpression","location":"ast/ktast.ast/-node/-expression/-break-expression/index.html","searchKeys":["BreakExpression","data class BreakExpression(val label: Node.Expression.NameExpression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression, Node.Expression.WithLabel","ktast.ast.Node.Expression.BreakExpression"]},{"name":"data class CallExpression(val calleeExpression: Node.Expression, val lAngle: Node.Keyword.Less?, val typeArguments: List<Node.TypeArgument>, val rAngle: Node.Keyword.Greater?, val lPar: Node.Keyword.LPar?, val arguments: List<Node.ValueArgument>, val rPar: Node.Keyword.RPar?, val lambdaArgument: Node.Expression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression, Node.WithTypeArguments, Node.WithValueArguments","description":"ktast.ast.Node.Expression.CallExpression","location":"ast/ktast.ast/-node/-expression/-call-expression/index.html","searchKeys":["CallExpression","data class CallExpression(val calleeExpression: Node.Expression, val lAngle: Node.Keyword.Less?, val typeArguments: List<Node.TypeArgument>, val rAngle: Node.Keyword.Greater?, val lPar: Node.Keyword.LPar?, val arguments: List<Node.ValueArgument>, val rPar: Node.Keyword.RPar?, val lambdaArgument: Node.Expression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression, Node.WithTypeArguments, Node.WithValueArguments","ktast.ast.Node.Expression.CallExpression"]},{"name":"data class CallableReferenceExpression(val lhs: Node.Expression?, val questionMarks: List<Node.Keyword.Question>, val rhs: Node.Expression.NameExpression, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.DoubleColonExpression","description":"ktast.ast.Node.Expression.CallableReferenceExpression","location":"ast/ktast.ast/-node/-expression/-callable-reference-expression/index.html","searchKeys":["CallableReferenceExpression","data class CallableReferenceExpression(val lhs: Node.Expression?, val questionMarks: List<Node.Keyword.Question>, val rhs: Node.Expression.NameExpression, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.DoubleColonExpression","ktast.ast.Node.Expression.CallableReferenceExpression"]},{"name":"data class CatchClause(val lPar: Node.Keyword.LPar, val parameters: List<Node.FunctionParameter>, val rPar: Node.Keyword.RPar, val block: Node.Expression.BlockExpression, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithFunctionParameters","description":"ktast.ast.Node.Expression.TryExpression.CatchClause","location":"ast/ktast.ast/-node/-expression/-try-expression/-catch-clause/index.html","searchKeys":["CatchClause","data class CatchClause(val lPar: Node.Keyword.LPar, val parameters: List<Node.FunctionParameter>, val rPar: Node.Keyword.RPar, val block: Node.Expression.BlockExpression, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithFunctionParameters","ktast.ast.Node.Expression.TryExpression.CatchClause"]},{"name":"data class CharacterLiteralExpression(val text: String, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.ConstantLiteralExpression","description":"ktast.ast.Node.Expression.CharacterLiteralExpression","location":"ast/ktast.ast/-node/-expression/-character-literal-expression/index.html","searchKeys":["CharacterLiteralExpression","data class CharacterLiteralExpression(val text: String, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.ConstantLiteralExpression","ktast.ast.Node.Expression.CharacterLiteralExpression"]},{"name":"data class Class(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Declaration.ClassDeclaration.ClassOrInterfaceKeyword","description":"ktast.ast.Node.Keyword.Class","location":"ast/ktast.ast/-node/-keyword/-class/index.html","searchKeys":["Class","data class Class(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Declaration.ClassDeclaration.ClassOrInterfaceKeyword","ktast.ast.Node.Keyword.Class"]},{"name":"data class ClassBody(val enumEntries: List<Node.Declaration.ClassOrObject.ClassBody.EnumEntry>, val declarations: List<Node.Declaration>, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithDeclarations","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/index.html","searchKeys":["ClassBody","data class ClassBody(val enumEntries: List<Node.Declaration.ClassOrObject.ClassBody.EnumEntry>, val declarations: List<Node.Declaration>, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithDeclarations","ktast.ast.Node.Declaration.ClassOrObject.ClassBody"]},{"name":"data class ClassDeclaration(val modifiers: List<Node.Modifier>, val declarationKeyword: Node.Declaration.ClassDeclaration.ClassOrInterfaceKeyword, val name: Node.Expression.NameExpression, val lAngle: Node.Keyword.Less?, val typeParameters: List<Node.TypeParameter>, val rAngle: Node.Keyword.Greater?, val primaryConstructor: Node.Declaration.ClassDeclaration.PrimaryConstructor?, val parents: List<Node.Declaration.ClassOrObject.ClassParent>, val typeConstraintSet: Node.PostModifier.TypeConstraintSet?, val body: Node.Declaration.ClassOrObject.ClassBody?, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration.ClassOrObject, Node.WithTypeParameters","description":"ktast.ast.Node.Declaration.ClassDeclaration","location":"ast/ktast.ast/-node/-declaration/-class-declaration/index.html","searchKeys":["ClassDeclaration","data class ClassDeclaration(val modifiers: List<Node.Modifier>, val declarationKeyword: Node.Declaration.ClassDeclaration.ClassOrInterfaceKeyword, val name: Node.Expression.NameExpression, val lAngle: Node.Keyword.Less?, val typeParameters: List<Node.TypeParameter>, val rAngle: Node.Keyword.Greater?, val primaryConstructor: Node.Declaration.ClassDeclaration.PrimaryConstructor?, val parents: List<Node.Declaration.ClassOrObject.ClassParent>, val typeConstraintSet: Node.PostModifier.TypeConstraintSet?, val body: Node.Declaration.ClassOrObject.ClassBody?, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration.ClassOrObject, Node.WithTypeParameters","ktast.ast.Node.Declaration.ClassDeclaration"]},{"name":"data class ClassLiteralExpression(val lhs: Node.Expression, val questionMarks: List<Node.Keyword.Question>, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.DoubleColonExpression","description":"ktast.ast.Node.Expression.ClassLiteralExpression","location":"ast/ktast.ast/-node/-expression/-class-literal-expression/index.html","searchKeys":["ClassLiteralExpression","data class ClassLiteralExpression(val lhs: Node.Expression, val questionMarks: List<Node.Keyword.Question>, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.DoubleColonExpression","ktast.ast.Node.Expression.ClassLiteralExpression"]},{"name":"data class CollectionLiteralExpression(val expressions: List<Node.Expression>, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","description":"ktast.ast.Node.Expression.CollectionLiteralExpression","location":"ast/ktast.ast/-node/-expression/-collection-literal-expression/index.html","searchKeys":["CollectionLiteralExpression","data class CollectionLiteralExpression(val expressions: List<Node.Expression>, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","ktast.ast.Node.Expression.CollectionLiteralExpression"]},{"name":"data class Comment(val text: String, val supplement: NodeSupplement = NodeSupplement()) : Node.Extra","description":"ktast.ast.Node.Extra.Comment","location":"ast/ktast.ast/-node/-extra/-comment/index.html","searchKeys":["Comment","data class Comment(val text: String, val supplement: NodeSupplement = NodeSupplement()) : Node.Extra","ktast.ast.Node.Extra.Comment"]},{"name":"data class Companion(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Companion","location":"ast/ktast.ast/-node/-keyword/-companion/index.html","searchKeys":["Companion","data class Companion(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Companion"]},{"name":"data class ConditionalWhenBranch(val conditions: List<Node.Expression.WhenExpression.WhenCondition>, val arrow: Node.Keyword.Arrow, val body: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.WhenExpression.WhenBranch","description":"ktast.ast.Node.Expression.WhenExpression.ConditionalWhenBranch","location":"ast/ktast.ast/-node/-expression/-when-expression/-conditional-when-branch/index.html","searchKeys":["ConditionalWhenBranch","data class ConditionalWhenBranch(val conditions: List<Node.Expression.WhenExpression.WhenCondition>, val arrow: Node.Keyword.Arrow, val body: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.WhenExpression.WhenBranch","ktast.ast.Node.Expression.WhenExpression.ConditionalWhenBranch"]},{"name":"data class Const(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Const","location":"ast/ktast.ast/-node/-keyword/-const/index.html","searchKeys":["Const","data class Const(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Const"]},{"name":"data class Constructor(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword","description":"ktast.ast.Node.Keyword.Constructor","location":"ast/ktast.ast/-node/-keyword/-constructor/index.html","searchKeys":["Constructor","data class Constructor(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword","ktast.ast.Node.Keyword.Constructor"]},{"name":"data class ConstructorClassParent(val type: Node.Type.SimpleType, val lPar: Node.Keyword.LPar, val arguments: List<Node.ValueArgument>, val rPar: Node.Keyword.RPar, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration.ClassOrObject.ClassParent","description":"ktast.ast.Node.Declaration.ClassOrObject.ConstructorClassParent","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-constructor-class-parent/index.html","searchKeys":["ConstructorClassParent","data class ConstructorClassParent(val type: Node.Type.SimpleType, val lPar: Node.Keyword.LPar, val arguments: List<Node.ValueArgument>, val rPar: Node.Keyword.RPar, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration.ClassOrObject.ClassParent","ktast.ast.Node.Declaration.ClassOrObject.ConstructorClassParent"]},{"name":"data class ContextReceiver(val lPar: Node.Keyword.LPar, val receiverTypes: List<Node.Type>, val rPar: Node.Keyword.RPar, val supplement: NodeSupplement = NodeSupplement()) : Node","description":"ktast.ast.Node.ContextReceiver","location":"ast/ktast.ast/-node/-context-receiver/index.html","searchKeys":["ContextReceiver","data class ContextReceiver(val lPar: Node.Keyword.LPar, val receiverTypes: List<Node.Type>, val rPar: Node.Keyword.RPar, val supplement: NodeSupplement = NodeSupplement()) : Node","ktast.ast.Node.ContextReceiver"]},{"name":"data class ContinueExpression(val label: Node.Expression.NameExpression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression, Node.Expression.WithLabel","description":"ktast.ast.Node.Expression.ContinueExpression","location":"ast/ktast.ast/-node/-expression/-continue-expression/index.html","searchKeys":["ContinueExpression","data class ContinueExpression(val label: Node.Expression.NameExpression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression, Node.Expression.WithLabel","ktast.ast.Node.Expression.ContinueExpression"]},{"name":"data class Contract(val lBracket: Node.Keyword.LBracket, val contractEffects: List<Node.Expression>, val rBracket: Node.Keyword.RBracket, val supplement: NodeSupplement = NodeSupplement()) : Node.PostModifier","description":"ktast.ast.Node.PostModifier.Contract","location":"ast/ktast.ast/-node/-post-modifier/-contract/index.html","searchKeys":["Contract","data class Contract(val lBracket: Node.Keyword.LBracket, val contractEffects: List<Node.Expression>, val rBracket: Node.Keyword.RBracket, val supplement: NodeSupplement = NodeSupplement()) : Node.PostModifier","ktast.ast.Node.PostModifier.Contract"]},{"name":"data class CrossInline(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.CrossInline","location":"ast/ktast.ast/-node/-keyword/-cross-inline/index.html","searchKeys":["CrossInline","data class CrossInline(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.CrossInline"]},{"name":"data class Data(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Data","location":"ast/ktast.ast/-node/-keyword/-data/index.html","searchKeys":["Data","data class Data(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Data"]},{"name":"data class Delegate(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.AnnotationSet.AnnotationTarget","description":"ktast.ast.Node.Keyword.Delegate","location":"ast/ktast.ast/-node/-keyword/-delegate/index.html","searchKeys":["Delegate","data class Delegate(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.AnnotationSet.AnnotationTarget","ktast.ast.Node.Keyword.Delegate"]},{"name":"data class DelegationClassParent(val type: Node.Type, val expression: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration.ClassOrObject.ClassParent","description":"ktast.ast.Node.Declaration.ClassOrObject.DelegationClassParent","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-delegation-class-parent/index.html","searchKeys":["DelegationClassParent","data class DelegationClassParent(val type: Node.Type, val expression: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration.ClassOrObject.ClassParent","ktast.ast.Node.Declaration.ClassOrObject.DelegationClassParent"]},{"name":"data class DoWhileStatement(val body: Node.Expression, val lPar: Node.Keyword.LPar, val condition: Node.Expression, val rPar: Node.Keyword.RPar, val supplement: NodeSupplement = NodeSupplement()) : Node.Statement.WhileStatementBase","description":"ktast.ast.Node.Statement.DoWhileStatement","location":"ast/ktast.ast/-node/-statement/-do-while-statement/index.html","searchKeys":["DoWhileStatement","data class DoWhileStatement(val body: Node.Expression, val lPar: Node.Keyword.LPar, val condition: Node.Expression, val rPar: Node.Keyword.RPar, val supplement: NodeSupplement = NodeSupplement()) : Node.Statement.WhileStatementBase","ktast.ast.Node.Statement.DoWhileStatement"]},{"name":"data class Dot(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Keyword.Dot","location":"ast/ktast.ast/-node/-keyword/-dot/index.html","searchKeys":["Dot","data class Dot(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Keyword.Dot"]},{"name":"data class DotDot(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Keyword.DotDot","location":"ast/ktast.ast/-node/-keyword/-dot-dot/index.html","searchKeys":["DotDot","data class DotDot(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Keyword.DotDot"]},{"name":"data class DotDotLess(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Keyword.DotDotLess","location":"ast/ktast.ast/-node/-keyword/-dot-dot-less/index.html","searchKeys":["DotDotLess","data class DotDotLess(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Keyword.DotDotLess"]},{"name":"data class DynamicType(val modifiers: List<Node.Modifier>, val supplement: NodeSupplement = NodeSupplement()) : Node.Type","description":"ktast.ast.Node.Type.DynamicType","location":"ast/ktast.ast/-node/-type/-dynamic-type/index.html","searchKeys":["DynamicType","data class DynamicType(val modifiers: List<Node.Modifier>, val supplement: NodeSupplement = NodeSupplement()) : Node.Type","ktast.ast.Node.Type.DynamicType"]},{"name":"data class ElseWhenBranch(val arrow: Node.Keyword.Arrow, val body: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.WhenExpression.WhenBranch","description":"ktast.ast.Node.Expression.WhenExpression.ElseWhenBranch","location":"ast/ktast.ast/-node/-expression/-when-expression/-else-when-branch/index.html","searchKeys":["ElseWhenBranch","data class ElseWhenBranch(val arrow: Node.Keyword.Arrow, val body: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.WhenExpression.WhenBranch","ktast.ast.Node.Expression.WhenExpression.ElseWhenBranch"]},{"name":"data class Enum(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Enum","location":"ast/ktast.ast/-node/-keyword/-enum/index.html","searchKeys":["Enum","data class Enum(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Enum"]},{"name":"data class EnumEntry(val modifiers: List<Node.Modifier>, val name: Node.Expression.NameExpression, val lPar: Node.Keyword.LPar?, val arguments: List<Node.ValueArgument>, val rPar: Node.Keyword.RPar?, val classBody: Node.Declaration.ClassOrObject.ClassBody?, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithModifiers, Node.WithValueArguments","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.EnumEntry","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-enum-entry/index.html","searchKeys":["EnumEntry","data class EnumEntry(val modifiers: List<Node.Modifier>, val name: Node.Expression.NameExpression, val lPar: Node.Keyword.LPar?, val arguments: List<Node.ValueArgument>, val rPar: Node.Keyword.RPar?, val classBody: Node.Declaration.ClassOrObject.ClassBody?, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithModifiers, Node.WithValueArguments","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.EnumEntry"]},{"name":"data class EqualEqual(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Keyword.EqualEqual","location":"ast/ktast.ast/-node/-keyword/-equal-equal/index.html","searchKeys":["EqualEqual","data class EqualEqual(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Keyword.EqualEqual"]},{"name":"data class EscapeStringEntry(val text: String, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.StringLiteralExpression.StringEntry, Node.SimpleTextNode","description":"ktast.ast.Node.Expression.StringLiteralExpression.EscapeStringEntry","location":"ast/ktast.ast/-node/-expression/-string-literal-expression/-escape-string-entry/index.html","searchKeys":["EscapeStringEntry","data class EscapeStringEntry(val text: String, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.StringLiteralExpression.StringEntry, Node.SimpleTextNode","ktast.ast.Node.Expression.StringLiteralExpression.EscapeStringEntry"]},{"name":"data class Expect(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Expect","location":"ast/ktast.ast/-node/-keyword/-expect/index.html","searchKeys":["Expect","data class Expect(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Expect"]},{"name":"data class ExpressionWhenCondition(val expression: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.WhenExpression.WhenCondition","description":"ktast.ast.Node.Expression.WhenExpression.ExpressionWhenCondition","location":"ast/ktast.ast/-node/-expression/-when-expression/-expression-when-condition/index.html","searchKeys":["ExpressionWhenCondition","data class ExpressionWhenCondition(val expression: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.WhenExpression.WhenCondition","ktast.ast.Node.Expression.WhenExpression.ExpressionWhenCondition"]},{"name":"data class External(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.External","location":"ast/ktast.ast/-node/-keyword/-external/index.html","searchKeys":["External","data class External(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.External"]},{"name":"data class Field(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.AnnotationSet.AnnotationTarget","description":"ktast.ast.Node.Keyword.Field","location":"ast/ktast.ast/-node/-keyword/-field/index.html","searchKeys":["Field","data class Field(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.AnnotationSet.AnnotationTarget","ktast.ast.Node.Keyword.Field"]},{"name":"data class File(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.AnnotationSet.AnnotationTarget","description":"ktast.ast.Node.Keyword.File","location":"ast/ktast.ast/-node/-keyword/-file/index.html","searchKeys":["File","data class File(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.AnnotationSet.AnnotationTarget","ktast.ast.Node.Keyword.File"]},{"name":"data class Final(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Final","location":"ast/ktast.ast/-node/-keyword/-final/index.html","searchKeys":["Final","data class Final(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Final"]},{"name":"data class ForStatement(val lPar: Node.Keyword.LPar, val loopParameter: Node.LambdaParameter, val inKeyword: Node.Keyword.In, val loopRange: Node.Expression, val rPar: Node.Keyword.RPar, val body: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node.Statement","description":"ktast.ast.Node.Statement.ForStatement","location":"ast/ktast.ast/-node/-statement/-for-statement/index.html","searchKeys":["ForStatement","data class ForStatement(val lPar: Node.Keyword.LPar, val loopParameter: Node.LambdaParameter, val inKeyword: Node.Keyword.In, val loopRange: Node.Expression, val rPar: Node.Keyword.RPar, val body: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node.Statement","ktast.ast.Node.Statement.ForStatement"]},{"name":"data class Fun(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Fun","location":"ast/ktast.ast/-node/-keyword/-fun/index.html","searchKeys":["Fun","data class Fun(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Fun"]},{"name":"data class FunctionDeclaration(val modifiers: List<Node.Modifier>, val lAngle: Node.Keyword.Less?, val typeParameters: List<Node.TypeParameter>, val rAngle: Node.Keyword.Greater?, val receiverType: Node.Type?, val name: Node.Expression.NameExpression?, val lPar: Node.Keyword.LPar, val parameters: List<Node.FunctionParameter>, val rPar: Node.Keyword.RPar, val returnType: Node.Type?, val postModifiers: List<Node.PostModifier>, val body: Node.Expression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration, Node.WithModifiers, Node.WithTypeParameters, Node.WithFunctionParameters, Node.WithPostModifiers","description":"ktast.ast.Node.Declaration.FunctionDeclaration","location":"ast/ktast.ast/-node/-declaration/-function-declaration/index.html","searchKeys":["FunctionDeclaration","data class FunctionDeclaration(val modifiers: List<Node.Modifier>, val lAngle: Node.Keyword.Less?, val typeParameters: List<Node.TypeParameter>, val rAngle: Node.Keyword.Greater?, val receiverType: Node.Type?, val name: Node.Expression.NameExpression?, val lPar: Node.Keyword.LPar, val parameters: List<Node.FunctionParameter>, val rPar: Node.Keyword.RPar, val returnType: Node.Type?, val postModifiers: List<Node.PostModifier>, val body: Node.Expression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration, Node.WithModifiers, Node.WithTypeParameters, Node.WithFunctionParameters, Node.WithPostModifiers","ktast.ast.Node.Declaration.FunctionDeclaration"]},{"name":"data class FunctionParameter(val modifiers: List<Node.Modifier>, val valOrVarKeyword: Node.Keyword.ValOrVarKeyword?, val name: Node.Expression.NameExpression, val type: Node.Type?, val defaultValue: Node.Expression?, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithModifiers","description":"ktast.ast.Node.FunctionParameter","location":"ast/ktast.ast/-node/-function-parameter/index.html","searchKeys":["FunctionParameter","data class FunctionParameter(val modifiers: List<Node.Modifier>, val valOrVarKeyword: Node.Keyword.ValOrVarKeyword?, val name: Node.Expression.NameExpression, val type: Node.Type?, val defaultValue: Node.Expression?, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithModifiers","ktast.ast.Node.FunctionParameter"]},{"name":"data class FunctionType(val modifiers: List<Node.Modifier>, val contextReceiver: Node.ContextReceiver?, val receiverType: Node.Type?, val lPar: Node.Keyword.LPar, val parameters: List<Node.Type.FunctionType.FunctionTypeParameter>, val rPar: Node.Keyword.RPar, val returnType: Node.Type, val supplement: NodeSupplement = NodeSupplement()) : Node.Type","description":"ktast.ast.Node.Type.FunctionType","location":"ast/ktast.ast/-node/-type/-function-type/index.html","searchKeys":["FunctionType","data class FunctionType(val modifiers: List<Node.Modifier>, val contextReceiver: Node.ContextReceiver?, val receiverType: Node.Type?, val lPar: Node.Keyword.LPar, val parameters: List<Node.Type.FunctionType.FunctionTypeParameter>, val rPar: Node.Keyword.RPar, val returnType: Node.Type, val supplement: NodeSupplement = NodeSupplement()) : Node.Type","ktast.ast.Node.Type.FunctionType"]},{"name":"data class FunctionTypeParameter(val name: Node.Expression.NameExpression?, val type: Node.Type, val supplement: NodeSupplement = NodeSupplement()) : Node","description":"ktast.ast.Node.Type.FunctionType.FunctionTypeParameter","location":"ast/ktast.ast/-node/-type/-function-type/-function-type-parameter/index.html","searchKeys":["FunctionTypeParameter","data class FunctionTypeParameter(val name: Node.Expression.NameExpression?, val type: Node.Type, val supplement: NodeSupplement = NodeSupplement()) : Node","ktast.ast.Node.Type.FunctionType.FunctionTypeParameter"]},{"name":"data class Get(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.AnnotationSet.AnnotationTarget","description":"ktast.ast.Node.Keyword.Get","location":"ast/ktast.ast/-node/-keyword/-get/index.html","searchKeys":["Get","data class Get(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.AnnotationSet.AnnotationTarget","ktast.ast.Node.Keyword.Get"]},{"name":"data class Getter(val modifiers: List<Node.Modifier>, val lPar: Node.Keyword.LPar?, val rPar: Node.Keyword.RPar?, val type: Node.Type?, val postModifiers: List<Node.PostModifier>, val body: Node.Expression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration.PropertyDeclaration.Accessor","description":"ktast.ast.Node.Declaration.PropertyDeclaration.Getter","location":"ast/ktast.ast/-node/-declaration/-property-declaration/-getter/index.html","searchKeys":["Getter","data class Getter(val modifiers: List<Node.Modifier>, val lPar: Node.Keyword.LPar?, val rPar: Node.Keyword.RPar?, val type: Node.Type?, val postModifiers: List<Node.PostModifier>, val body: Node.Expression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration.PropertyDeclaration.Accessor","ktast.ast.Node.Declaration.PropertyDeclaration.Getter"]},{"name":"data class Greater(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Keyword.Greater","location":"ast/ktast.ast/-node/-keyword/-greater/index.html","searchKeys":["Greater","data class Greater(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Keyword.Greater"]},{"name":"data class GreaterEqual(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Keyword.GreaterEqual","location":"ast/ktast.ast/-node/-keyword/-greater-equal/index.html","searchKeys":["GreaterEqual","data class GreaterEqual(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Keyword.GreaterEqual"]},{"name":"data class IfExpression(val lPar: Node.Keyword.LPar, val condition: Node.Expression, val rPar: Node.Keyword.RPar, val body: Node.Expression, val elseBody: Node.Expression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","description":"ktast.ast.Node.Expression.IfExpression","location":"ast/ktast.ast/-node/-expression/-if-expression/index.html","searchKeys":["IfExpression","data class IfExpression(val lPar: Node.Keyword.LPar, val condition: Node.Expression, val rPar: Node.Keyword.RPar, val body: Node.Expression, val elseBody: Node.Expression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","ktast.ast.Node.Expression.IfExpression"]},{"name":"data class ImportDirective(val names: List<Node.Expression.NameExpression>, val aliasName: Node.Expression.NameExpression?, val supplement: NodeSupplement = NodeSupplement()) : Node","description":"ktast.ast.Node.ImportDirective","location":"ast/ktast.ast/-node/-import-directive/index.html","searchKeys":["ImportDirective","data class ImportDirective(val names: List<Node.Expression.NameExpression>, val aliasName: Node.Expression.NameExpression?, val supplement: NodeSupplement = NodeSupplement()) : Node","ktast.ast.Node.ImportDirective"]},{"name":"data class In(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator, Node.Modifier.KeywordModifier, Node.Expression.WhenExpression.WhenConditionRangeOperator","description":"ktast.ast.Node.Keyword.In","location":"ast/ktast.ast/-node/-keyword/-in/index.html","searchKeys":["In","data class In(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator, Node.Modifier.KeywordModifier, Node.Expression.WhenExpression.WhenConditionRangeOperator","ktast.ast.Node.Keyword.In"]},{"name":"data class IndexedAccessExpression(val expression: Node.Expression, val indices: List<Node.Expression>, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","description":"ktast.ast.Node.Expression.IndexedAccessExpression","location":"ast/ktast.ast/-node/-expression/-indexed-access-expression/index.html","searchKeys":["IndexedAccessExpression","data class IndexedAccessExpression(val expression: Node.Expression, val indices: List<Node.Expression>, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","ktast.ast.Node.Expression.IndexedAccessExpression"]},{"name":"data class Infix(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Infix","location":"ast/ktast.ast/-node/-keyword/-infix/index.html","searchKeys":["Infix","data class Infix(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Infix"]},{"name":"data class Initializer(val block: Node.Expression.BlockExpression, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.Initializer","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-initializer/index.html","searchKeys":["Initializer","data class Initializer(val block: Node.Expression.BlockExpression, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.Initializer"]},{"name":"data class Inline(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Inline","location":"ast/ktast.ast/-node/-keyword/-inline/index.html","searchKeys":["Inline","data class Inline(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Inline"]},{"name":"data class Inner(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Inner","location":"ast/ktast.ast/-node/-keyword/-inner/index.html","searchKeys":["Inner","data class Inner(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Inner"]},{"name":"data class IntegerLiteralExpression(val text: String, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.ConstantLiteralExpression","description":"ktast.ast.Node.Expression.IntegerLiteralExpression","location":"ast/ktast.ast/-node/-expression/-integer-literal-expression/index.html","searchKeys":["IntegerLiteralExpression","data class IntegerLiteralExpression(val text: String, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.ConstantLiteralExpression","ktast.ast.Node.Expression.IntegerLiteralExpression"]},{"name":"data class Interface(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Declaration.ClassDeclaration.ClassOrInterfaceKeyword","description":"ktast.ast.Node.Keyword.Interface","location":"ast/ktast.ast/-node/-keyword/-interface/index.html","searchKeys":["Interface","data class Interface(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Declaration.ClassDeclaration.ClassOrInterfaceKeyword","ktast.ast.Node.Keyword.Interface"]},{"name":"data class Internal(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Internal","location":"ast/ktast.ast/-node/-keyword/-internal/index.html","searchKeys":["Internal","data class Internal(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Internal"]},{"name":"data class Is(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryTypeExpression.BinaryTypeOperator, Node.Expression.WhenExpression.WhenConditionTypeOperator","description":"ktast.ast.Node.Keyword.Is","location":"ast/ktast.ast/-node/-keyword/-is/index.html","searchKeys":["Is","data class Is(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryTypeExpression.BinaryTypeOperator, Node.Expression.WhenExpression.WhenConditionTypeOperator","ktast.ast.Node.Keyword.Is"]},{"name":"data class KotlinFile(val annotationSets: List<Node.Modifier.AnnotationSet>, val packageDirective: Node.PackageDirective?, val importDirectives: List<Node.ImportDirective>, val declarations: List<Node.Declaration>, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithDeclarations","description":"ktast.ast.Node.KotlinFile","location":"ast/ktast.ast/-node/-kotlin-file/index.html","searchKeys":["KotlinFile","data class KotlinFile(val annotationSets: List<Node.Modifier.AnnotationSet>, val packageDirective: Node.PackageDirective?, val importDirectives: List<Node.ImportDirective>, val declarations: List<Node.Declaration>, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithDeclarations","ktast.ast.Node.KotlinFile"]},{"name":"data class LBracket(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword","description":"ktast.ast.Node.Keyword.LBracket","location":"ast/ktast.ast/-node/-keyword/-l-bracket/index.html","searchKeys":["LBracket","data class LBracket(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword","ktast.ast.Node.Keyword.LBracket"]},{"name":"data class LPar(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword","description":"ktast.ast.Node.Keyword.LPar","location":"ast/ktast.ast/-node/-keyword/-l-par/index.html","searchKeys":["LPar","data class LPar(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword","ktast.ast.Node.Keyword.LPar"]},{"name":"data class LabeledExpression(val label: Node.Expression.NameExpression, val statement: Node.Statement, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","description":"ktast.ast.Node.Expression.LabeledExpression","location":"ast/ktast.ast/-node/-expression/-labeled-expression/index.html","searchKeys":["LabeledExpression","data class LabeledExpression(val label: Node.Expression.NameExpression, val statement: Node.Statement, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","ktast.ast.Node.Expression.LabeledExpression"]},{"name":"data class LambdaExpression(val parameters: List<Node.LambdaParameter>, val arrow: Node.Keyword.Arrow?, val statements: List<Node.Statement>, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression, Node.WithStatements","description":"ktast.ast.Node.Expression.LambdaExpression","location":"ast/ktast.ast/-node/-expression/-lambda-expression/index.html","searchKeys":["LambdaExpression","data class LambdaExpression(val parameters: List<Node.LambdaParameter>, val arrow: Node.Keyword.Arrow?, val statements: List<Node.Statement>, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression, Node.WithStatements","ktast.ast.Node.Expression.LambdaExpression"]},{"name":"data class LambdaParameter(val lPar: Node.Keyword.LPar?, val variables: List<Node.Variable>, val rPar: Node.Keyword.RPar?, val destructuringType: Node.Type?, val supplement: NodeSupplement = NodeSupplement()) : Node","description":"ktast.ast.Node.LambdaParameter","location":"ast/ktast.ast/-node/-lambda-parameter/index.html","searchKeys":["LambdaParameter","data class LambdaParameter(val lPar: Node.Keyword.LPar?, val variables: List<Node.Variable>, val rPar: Node.Keyword.RPar?, val destructuringType: Node.Type?, val supplement: NodeSupplement = NodeSupplement()) : Node","ktast.ast.Node.LambdaParameter"]},{"name":"data class LateInit(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.LateInit","location":"ast/ktast.ast/-node/-keyword/-late-init/index.html","searchKeys":["LateInit","data class LateInit(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.LateInit"]},{"name":"data class Less(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Keyword.Less","location":"ast/ktast.ast/-node/-keyword/-less/index.html","searchKeys":["Less","data class Less(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Keyword.Less"]},{"name":"data class LessEqual(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Keyword.LessEqual","location":"ast/ktast.ast/-node/-keyword/-less-equal/index.html","searchKeys":["LessEqual","data class LessEqual(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Keyword.LessEqual"]},{"name":"data class LiteralStringEntry(val text: String, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.StringLiteralExpression.StringEntry, Node.SimpleTextNode","description":"ktast.ast.Node.Expression.StringLiteralExpression.LiteralStringEntry","location":"ast/ktast.ast/-node/-expression/-string-literal-expression/-literal-string-entry/index.html","searchKeys":["LiteralStringEntry","data class LiteralStringEntry(val text: String, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.StringLiteralExpression.StringEntry, Node.SimpleTextNode","ktast.ast.Node.Expression.StringLiteralExpression.LiteralStringEntry"]},{"name":"data class Minus(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator, Node.Expression.UnaryExpression.UnaryOperator","description":"ktast.ast.Node.Keyword.Minus","location":"ast/ktast.ast/-node/-keyword/-minus/index.html","searchKeys":["Minus","data class Minus(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator, Node.Expression.UnaryExpression.UnaryOperator","ktast.ast.Node.Keyword.Minus"]},{"name":"data class MinusEqual(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Keyword.MinusEqual","location":"ast/ktast.ast/-node/-keyword/-minus-equal/index.html","searchKeys":["MinusEqual","data class MinusEqual(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Keyword.MinusEqual"]},{"name":"data class MinusMinus(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.UnaryExpression.UnaryOperator","description":"ktast.ast.Node.Keyword.MinusMinus","location":"ast/ktast.ast/-node/-keyword/-minus-minus/index.html","searchKeys":["MinusMinus","data class MinusMinus(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.UnaryExpression.UnaryOperator","ktast.ast.Node.Keyword.MinusMinus"]},{"name":"data class NameExpression(val text: String, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression, Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Expression.NameExpression","location":"ast/ktast.ast/-node/-expression/-name-expression/index.html","searchKeys":["NameExpression","data class NameExpression(val text: String, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression, Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Expression.NameExpression"]},{"name":"data class NodePath<T : Node>(val node: T, val parent: NodePath<*>?)","description":"ktast.ast.NodePath","location":"ast/ktast.ast/-node-path/index.html","searchKeys":["NodePath","data class NodePath<T : Node>(val node: T, val parent: NodePath<*>?)","ktast.ast.NodePath"]},{"name":"data class NodeSupplement(var extrasBefore: List<Node.Extra> = listOf(), var extrasWithin: List<Node.Extra> = listOf(), var extrasAfter: List<Node.Extra> = listOf(), var tag: Any? = null)","description":"ktast.ast.NodeSupplement","location":"ast/ktast.ast/-node-supplement/index.html","searchKeys":["NodeSupplement","data class NodeSupplement(var extrasBefore: List<Node.Extra> = listOf(), var extrasWithin: List<Node.Extra> = listOf(), var extrasAfter: List<Node.Extra> = listOf(), var tag: Any? = null)","ktast.ast.NodeSupplement"]},{"name":"data class Noinline(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Noinline","location":"ast/ktast.ast/-node/-keyword/-noinline/index.html","searchKeys":["Noinline","data class Noinline(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Noinline"]},{"name":"data class Not(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.UnaryExpression.UnaryOperator","description":"ktast.ast.Node.Keyword.Not","location":"ast/ktast.ast/-node/-keyword/-not/index.html","searchKeys":["Not","data class Not(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.UnaryExpression.UnaryOperator","ktast.ast.Node.Keyword.Not"]},{"name":"data class NotEqual(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Keyword.NotEqual","location":"ast/ktast.ast/-node/-keyword/-not-equal/index.html","searchKeys":["NotEqual","data class NotEqual(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Keyword.NotEqual"]},{"name":"data class NotIn(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator, Node.Expression.WhenExpression.WhenConditionRangeOperator","description":"ktast.ast.Node.Keyword.NotIn","location":"ast/ktast.ast/-node/-keyword/-not-in/index.html","searchKeys":["NotIn","data class NotIn(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator, Node.Expression.WhenExpression.WhenConditionRangeOperator","ktast.ast.Node.Keyword.NotIn"]},{"name":"data class NotIs(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryTypeExpression.BinaryTypeOperator, Node.Expression.WhenExpression.WhenConditionTypeOperator","description":"ktast.ast.Node.Keyword.NotIs","location":"ast/ktast.ast/-node/-keyword/-not-is/index.html","searchKeys":["NotIs","data class NotIs(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryTypeExpression.BinaryTypeOperator, Node.Expression.WhenExpression.WhenConditionTypeOperator","ktast.ast.Node.Keyword.NotIs"]},{"name":"data class NotNot(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.UnaryExpression.UnaryOperator","description":"ktast.ast.Node.Keyword.NotNot","location":"ast/ktast.ast/-node/-keyword/-not-not/index.html","searchKeys":["NotNot","data class NotNot(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.UnaryExpression.UnaryOperator","ktast.ast.Node.Keyword.NotNot"]},{"name":"data class NullLiteralExpression(val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.ConstantLiteralExpression","description":"ktast.ast.Node.Expression.NullLiteralExpression","location":"ast/ktast.ast/-node/-expression/-null-literal-expression/index.html","searchKeys":["NullLiteralExpression","data class NullLiteralExpression(val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.ConstantLiteralExpression","ktast.ast.Node.Expression.NullLiteralExpression"]},{"name":"data class NullableType(val modifiers: List<Node.Modifier>, val innerType: Node.Type, val questionMark: Node.Keyword.Question, val supplement: NodeSupplement = NodeSupplement()) : Node.Type","description":"ktast.ast.Node.Type.NullableType","location":"ast/ktast.ast/-node/-type/-nullable-type/index.html","searchKeys":["NullableType","data class NullableType(val modifiers: List<Node.Modifier>, val innerType: Node.Type, val questionMark: Node.Keyword.Question, val supplement: NodeSupplement = NodeSupplement()) : Node.Type","ktast.ast.Node.Type.NullableType"]},{"name":"data class Object(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Declaration.ClassOrObject.ClassDeclarationKeyword","description":"ktast.ast.Node.Keyword.Object","location":"ast/ktast.ast/-node/-keyword/-object/index.html","searchKeys":["Object","data class Object(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Declaration.ClassOrObject.ClassDeclarationKeyword","ktast.ast.Node.Keyword.Object"]},{"name":"data class ObjectDeclaration(val modifiers: List<Node.Modifier>, val declarationKeyword: Node.Keyword.Object, val name: Node.Expression.NameExpression?, val parents: List<Node.Declaration.ClassOrObject.ClassParent>, val body: Node.Declaration.ClassOrObject.ClassBody?, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration.ClassOrObject","description":"ktast.ast.Node.Declaration.ObjectDeclaration","location":"ast/ktast.ast/-node/-declaration/-object-declaration/index.html","searchKeys":["ObjectDeclaration","data class ObjectDeclaration(val modifiers: List<Node.Modifier>, val declarationKeyword: Node.Keyword.Object, val name: Node.Expression.NameExpression?, val parents: List<Node.Declaration.ClassOrObject.ClassParent>, val body: Node.Declaration.ClassOrObject.ClassBody?, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration.ClassOrObject","ktast.ast.Node.Declaration.ObjectDeclaration"]},{"name":"data class ObjectLiteralExpression(val declaration: Node.Declaration.ObjectDeclaration, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","description":"ktast.ast.Node.Expression.ObjectLiteralExpression","location":"ast/ktast.ast/-node/-expression/-object-literal-expression/index.html","searchKeys":["ObjectLiteralExpression","data class ObjectLiteralExpression(val declaration: Node.Declaration.ObjectDeclaration, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","ktast.ast.Node.Expression.ObjectLiteralExpression"]},{"name":"data class Open(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Open","location":"ast/ktast.ast/-node/-keyword/-open/index.html","searchKeys":["Open","data class Open(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Open"]},{"name":"data class Operator(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Operator","location":"ast/ktast.ast/-node/-keyword/-operator/index.html","searchKeys":["Operator","data class Operator(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Operator"]},{"name":"data class OrOr(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Keyword.OrOr","location":"ast/ktast.ast/-node/-keyword/-or-or/index.html","searchKeys":["OrOr","data class OrOr(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Keyword.OrOr"]},{"name":"data class Out(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Out","location":"ast/ktast.ast/-node/-keyword/-out/index.html","searchKeys":["Out","data class Out(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Out"]},{"name":"data class Override(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Override","location":"ast/ktast.ast/-node/-keyword/-override/index.html","searchKeys":["Override","data class Override(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Override"]},{"name":"data class PackageDirective(val names: List<Node.Expression.NameExpression>, val supplement: NodeSupplement = NodeSupplement()) : Node","description":"ktast.ast.Node.PackageDirective","location":"ast/ktast.ast/-node/-package-directive/index.html","searchKeys":["PackageDirective","data class PackageDirective(val names: List<Node.Expression.NameExpression>, val supplement: NodeSupplement = NodeSupplement()) : Node","ktast.ast.Node.PackageDirective"]},{"name":"data class Param(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.AnnotationSet.AnnotationTarget","description":"ktast.ast.Node.Keyword.Param","location":"ast/ktast.ast/-node/-keyword/-param/index.html","searchKeys":["Param","data class Param(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.AnnotationSet.AnnotationTarget","ktast.ast.Node.Keyword.Param"]},{"name":"data class ParenthesizedExpression(val innerExpression: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","description":"ktast.ast.Node.Expression.ParenthesizedExpression","location":"ast/ktast.ast/-node/-expression/-parenthesized-expression/index.html","searchKeys":["ParenthesizedExpression","data class ParenthesizedExpression(val innerExpression: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","ktast.ast.Node.Expression.ParenthesizedExpression"]},{"name":"data class ParenthesizedType(val modifiers: List<Node.Modifier>, val lPar: Node.Keyword.LPar, val innerType: Node.Type, val rPar: Node.Keyword.RPar, val supplement: NodeSupplement = NodeSupplement()) : Node.Type","description":"ktast.ast.Node.Type.ParenthesizedType","location":"ast/ktast.ast/-node/-type/-parenthesized-type/index.html","searchKeys":["ParenthesizedType","data class ParenthesizedType(val modifiers: List<Node.Modifier>, val lPar: Node.Keyword.LPar, val innerType: Node.Type, val rPar: Node.Keyword.RPar, val supplement: NodeSupplement = NodeSupplement()) : Node.Type","ktast.ast.Node.Type.ParenthesizedType"]},{"name":"data class Percent(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Keyword.Percent","location":"ast/ktast.ast/-node/-keyword/-percent/index.html","searchKeys":["Percent","data class Percent(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Keyword.Percent"]},{"name":"data class PercentEqual(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Keyword.PercentEqual","location":"ast/ktast.ast/-node/-keyword/-percent-equal/index.html","searchKeys":["PercentEqual","data class PercentEqual(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Keyword.PercentEqual"]},{"name":"data class Plus(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator, Node.Expression.UnaryExpression.UnaryOperator","description":"ktast.ast.Node.Keyword.Plus","location":"ast/ktast.ast/-node/-keyword/-plus/index.html","searchKeys":["Plus","data class Plus(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator, Node.Expression.UnaryExpression.UnaryOperator","ktast.ast.Node.Keyword.Plus"]},{"name":"data class PlusEqual(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Keyword.PlusEqual","location":"ast/ktast.ast/-node/-keyword/-plus-equal/index.html","searchKeys":["PlusEqual","data class PlusEqual(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Keyword.PlusEqual"]},{"name":"data class PlusPlus(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.UnaryExpression.UnaryOperator","description":"ktast.ast.Node.Keyword.PlusPlus","location":"ast/ktast.ast/-node/-keyword/-plus-plus/index.html","searchKeys":["PlusPlus","data class PlusPlus(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.UnaryExpression.UnaryOperator","ktast.ast.Node.Keyword.PlusPlus"]},{"name":"data class PostfixUnaryExpression(val expression: Node.Expression, val operator: Node.Expression.UnaryExpression.UnaryOperator, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.UnaryExpression","description":"ktast.ast.Node.Expression.PostfixUnaryExpression","location":"ast/ktast.ast/-node/-expression/-postfix-unary-expression/index.html","searchKeys":["PostfixUnaryExpression","data class PostfixUnaryExpression(val expression: Node.Expression, val operator: Node.Expression.UnaryExpression.UnaryOperator, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.UnaryExpression","ktast.ast.Node.Expression.PostfixUnaryExpression"]},{"name":"data class PrefixUnaryExpression(val operator: Node.Expression.UnaryExpression.UnaryOperator, val expression: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.UnaryExpression","description":"ktast.ast.Node.Expression.PrefixUnaryExpression","location":"ast/ktast.ast/-node/-expression/-prefix-unary-expression/index.html","searchKeys":["PrefixUnaryExpression","data class PrefixUnaryExpression(val operator: Node.Expression.UnaryExpression.UnaryOperator, val expression: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.UnaryExpression","ktast.ast.Node.Expression.PrefixUnaryExpression"]},{"name":"data class PrimaryConstructor(val modifiers: List<Node.Modifier>, val constructorKeyword: Node.Keyword.Constructor?, val lPar: Node.Keyword.LPar, val parameters: List<Node.FunctionParameter>, val rPar: Node.Keyword.RPar, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithModifiers, Node.WithFunctionParameters","description":"ktast.ast.Node.Declaration.ClassDeclaration.PrimaryConstructor","location":"ast/ktast.ast/-node/-declaration/-class-declaration/-primary-constructor/index.html","searchKeys":["PrimaryConstructor","data class PrimaryConstructor(val modifiers: List<Node.Modifier>, val constructorKeyword: Node.Keyword.Constructor?, val lPar: Node.Keyword.LPar, val parameters: List<Node.FunctionParameter>, val rPar: Node.Keyword.RPar, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithModifiers, Node.WithFunctionParameters","ktast.ast.Node.Declaration.ClassDeclaration.PrimaryConstructor"]},{"name":"data class Private(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Private","location":"ast/ktast.ast/-node/-keyword/-private/index.html","searchKeys":["Private","data class Private(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Private"]},{"name":"data class Property(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.AnnotationSet.AnnotationTarget","description":"ktast.ast.Node.Keyword.Property","location":"ast/ktast.ast/-node/-keyword/-property/index.html","searchKeys":["Property","data class Property(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.AnnotationSet.AnnotationTarget","ktast.ast.Node.Keyword.Property"]},{"name":"data class PropertyDeclaration(val modifiers: List<Node.Modifier>, val valOrVarKeyword: Node.Keyword.ValOrVarKeyword, val lAngle: Node.Keyword.Less?, val typeParameters: List<Node.TypeParameter>, val rAngle: Node.Keyword.Greater?, val receiverType: Node.Type?, val lPar: Node.Keyword.LPar?, val variables: List<Node.Variable>, val rPar: Node.Keyword.RPar?, val typeConstraintSet: Node.PostModifier.TypeConstraintSet?, val initializerExpression: Node.Expression?, val delegateExpression: Node.Expression?, val accessors: List<Node.Declaration.PropertyDeclaration.Accessor>, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration, Node.WithModifiers, Node.WithTypeParameters","description":"ktast.ast.Node.Declaration.PropertyDeclaration","location":"ast/ktast.ast/-node/-declaration/-property-declaration/index.html","searchKeys":["PropertyDeclaration","data class PropertyDeclaration(val modifiers: List<Node.Modifier>, val valOrVarKeyword: Node.Keyword.ValOrVarKeyword, val lAngle: Node.Keyword.Less?, val typeParameters: List<Node.TypeParameter>, val rAngle: Node.Keyword.Greater?, val receiverType: Node.Type?, val lPar: Node.Keyword.LPar?, val variables: List<Node.Variable>, val rPar: Node.Keyword.RPar?, val typeConstraintSet: Node.PostModifier.TypeConstraintSet?, val initializerExpression: Node.Expression?, val delegateExpression: Node.Expression?, val accessors: List<Node.Declaration.PropertyDeclaration.Accessor>, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration, Node.WithModifiers, Node.WithTypeParameters","ktast.ast.Node.Declaration.PropertyDeclaration"]},{"name":"data class Protected(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Protected","location":"ast/ktast.ast/-node/-keyword/-protected/index.html","searchKeys":["Protected","data class Protected(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Protected"]},{"name":"data class Public(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Public","location":"ast/ktast.ast/-node/-keyword/-public/index.html","searchKeys":["Public","data class Public(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Public"]},{"name":"data class Question(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Keyword.Question","location":"ast/ktast.ast/-node/-keyword/-question/index.html","searchKeys":["Question","data class Question(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Keyword.Question"]},{"name":"data class QuestionColon(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Keyword.QuestionColon","location":"ast/ktast.ast/-node/-keyword/-question-colon/index.html","searchKeys":["QuestionColon","data class QuestionColon(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Keyword.QuestionColon"]},{"name":"data class QuestionDot(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Keyword.QuestionDot","location":"ast/ktast.ast/-node/-keyword/-question-dot/index.html","searchKeys":["QuestionDot","data class QuestionDot(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Keyword.QuestionDot"]},{"name":"data class RBracket(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword","description":"ktast.ast.Node.Keyword.RBracket","location":"ast/ktast.ast/-node/-keyword/-r-bracket/index.html","searchKeys":["RBracket","data class RBracket(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword","ktast.ast.Node.Keyword.RBracket"]},{"name":"data class RPar(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword","description":"ktast.ast.Node.Keyword.RPar","location":"ast/ktast.ast/-node/-keyword/-r-par/index.html","searchKeys":["RPar","data class RPar(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword","ktast.ast.Node.Keyword.RPar"]},{"name":"data class RangeWhenCondition(val operator: Node.Expression.WhenExpression.WhenConditionRangeOperator, val expression: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.WhenExpression.WhenCondition","description":"ktast.ast.Node.Expression.WhenExpression.RangeWhenCondition","location":"ast/ktast.ast/-node/-expression/-when-expression/-range-when-condition/index.html","searchKeys":["RangeWhenCondition","data class RangeWhenCondition(val operator: Node.Expression.WhenExpression.WhenConditionRangeOperator, val expression: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.WhenExpression.WhenCondition","ktast.ast.Node.Expression.WhenExpression.RangeWhenCondition"]},{"name":"data class RealLiteralExpression(val text: String, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.ConstantLiteralExpression","description":"ktast.ast.Node.Expression.RealLiteralExpression","location":"ast/ktast.ast/-node/-expression/-real-literal-expression/index.html","searchKeys":["RealLiteralExpression","data class RealLiteralExpression(val text: String, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.ConstantLiteralExpression","ktast.ast.Node.Expression.RealLiteralExpression"]},{"name":"data class Receiver(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.AnnotationSet.AnnotationTarget","description":"ktast.ast.Node.Keyword.Receiver","location":"ast/ktast.ast/-node/-keyword/-receiver/index.html","searchKeys":["Receiver","data class Receiver(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.AnnotationSet.AnnotationTarget","ktast.ast.Node.Keyword.Receiver"]},{"name":"data class Reified(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Reified","location":"ast/ktast.ast/-node/-keyword/-reified/index.html","searchKeys":["Reified","data class Reified(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Reified"]},{"name":"data class ReturnExpression(val label: Node.Expression.NameExpression?, val expression: Node.Expression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression, Node.Expression.WithLabel","description":"ktast.ast.Node.Expression.ReturnExpression","location":"ast/ktast.ast/-node/-expression/-return-expression/index.html","searchKeys":["ReturnExpression","data class ReturnExpression(val label: Node.Expression.NameExpression?, val expression: Node.Expression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression, Node.Expression.WithLabel","ktast.ast.Node.Expression.ReturnExpression"]},{"name":"data class ScriptBody(val declarations: List<Node.Declaration>, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration, Node.WithDeclarations","description":"ktast.ast.Node.Declaration.ScriptBody","location":"ast/ktast.ast/-node/-declaration/-script-body/index.html","searchKeys":["ScriptBody","data class ScriptBody(val declarations: List<Node.Declaration>, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration, Node.WithDeclarations","ktast.ast.Node.Declaration.ScriptBody"]},{"name":"data class ScriptInitializer(val body: Node.Statement, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration","description":"ktast.ast.Node.Declaration.ScriptInitializer","location":"ast/ktast.ast/-node/-declaration/-script-initializer/index.html","searchKeys":["ScriptInitializer","data class ScriptInitializer(val body: Node.Statement, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration","ktast.ast.Node.Declaration.ScriptInitializer"]},{"name":"data class Sealed(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Sealed","location":"ast/ktast.ast/-node/-keyword/-sealed/index.html","searchKeys":["Sealed","data class Sealed(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Sealed"]},{"name":"data class SecondaryConstructor(val modifiers: List<Node.Modifier>, val constructorKeyword: Node.Keyword.Constructor, val lPar: Node.Keyword.LPar, val parameters: List<Node.FunctionParameter>, val rPar: Node.Keyword.RPar, val delegationCall: Node.Expression.CallExpression?, val block: Node.Expression.BlockExpression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration, Node.WithModifiers, Node.WithFunctionParameters","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.SecondaryConstructor","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-secondary-constructor/index.html","searchKeys":["SecondaryConstructor","data class SecondaryConstructor(val modifiers: List<Node.Modifier>, val constructorKeyword: Node.Keyword.Constructor, val lPar: Node.Keyword.LPar, val parameters: List<Node.FunctionParameter>, val rPar: Node.Keyword.RPar, val delegationCall: Node.Expression.CallExpression?, val block: Node.Expression.BlockExpression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration, Node.WithModifiers, Node.WithFunctionParameters","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.SecondaryConstructor"]},{"name":"data class Semicolon(val supplement: NodeSupplement = NodeSupplement()) : Node.Extra","description":"ktast.ast.Node.Extra.Semicolon","location":"ast/ktast.ast/-node/-extra/-semicolon/index.html","searchKeys":["Semicolon","data class Semicolon(val supplement: NodeSupplement = NodeSupplement()) : Node.Extra","ktast.ast.Node.Extra.Semicolon"]},{"name":"data class Set(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.AnnotationSet.AnnotationTarget","description":"ktast.ast.Node.Keyword.Set","location":"ast/ktast.ast/-node/-keyword/-set/index.html","searchKeys":["Set","data class Set(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.AnnotationSet.AnnotationTarget","ktast.ast.Node.Keyword.Set"]},{"name":"data class SetParam(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.AnnotationSet.AnnotationTarget","description":"ktast.ast.Node.Keyword.SetParam","location":"ast/ktast.ast/-node/-keyword/-set-param/index.html","searchKeys":["SetParam","data class SetParam(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.AnnotationSet.AnnotationTarget","ktast.ast.Node.Keyword.SetParam"]},{"name":"data class Setter(val modifiers: List<Node.Modifier>, val lPar: Node.Keyword.LPar?, val parameter: Node.FunctionParameter?, val rPar: Node.Keyword.RPar?, val postModifiers: List<Node.PostModifier>, val body: Node.Expression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration.PropertyDeclaration.Accessor","description":"ktast.ast.Node.Declaration.PropertyDeclaration.Setter","location":"ast/ktast.ast/-node/-declaration/-property-declaration/-setter/index.html","searchKeys":["Setter","data class Setter(val modifiers: List<Node.Modifier>, val lPar: Node.Keyword.LPar?, val parameter: Node.FunctionParameter?, val rPar: Node.Keyword.RPar?, val postModifiers: List<Node.PostModifier>, val body: Node.Expression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration.PropertyDeclaration.Accessor","ktast.ast.Node.Declaration.PropertyDeclaration.Setter"]},{"name":"data class SimpleType(val modifiers: List<Node.Modifier>, val qualifiers: List<Node.Type.SimpleType.SimpleTypeQualifier>, val name: Node.Expression.NameExpression, val lAngle: Node.Keyword.Less?, val typeArguments: List<Node.TypeArgument>, val rAngle: Node.Keyword.Greater?, val supplement: NodeSupplement = NodeSupplement()) : Node.Type, Node.Type.NameWithTypeArguments","description":"ktast.ast.Node.Type.SimpleType","location":"ast/ktast.ast/-node/-type/-simple-type/index.html","searchKeys":["SimpleType","data class SimpleType(val modifiers: List<Node.Modifier>, val qualifiers: List<Node.Type.SimpleType.SimpleTypeQualifier>, val name: Node.Expression.NameExpression, val lAngle: Node.Keyword.Less?, val typeArguments: List<Node.TypeArgument>, val rAngle: Node.Keyword.Greater?, val supplement: NodeSupplement = NodeSupplement()) : Node.Type, Node.Type.NameWithTypeArguments","ktast.ast.Node.Type.SimpleType"]},{"name":"data class SimpleTypeQualifier(val name: Node.Expression.NameExpression, val lAngle: Node.Keyword.Less?, val typeArguments: List<Node.TypeArgument>, val rAngle: Node.Keyword.Greater?, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.Type.NameWithTypeArguments","description":"ktast.ast.Node.Type.SimpleType.SimpleTypeQualifier","location":"ast/ktast.ast/-node/-type/-simple-type/-simple-type-qualifier/index.html","searchKeys":["SimpleTypeQualifier","data class SimpleTypeQualifier(val name: Node.Expression.NameExpression, val lAngle: Node.Keyword.Less?, val typeArguments: List<Node.TypeArgument>, val rAngle: Node.Keyword.Greater?, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.Type.NameWithTypeArguments","ktast.ast.Node.Type.SimpleType.SimpleTypeQualifier"]},{"name":"data class Slash(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Keyword.Slash","location":"ast/ktast.ast/-node/-keyword/-slash/index.html","searchKeys":["Slash","data class Slash(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Keyword.Slash"]},{"name":"data class SlashEqual(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Keyword.SlashEqual","location":"ast/ktast.ast/-node/-keyword/-slash-equal/index.html","searchKeys":["SlashEqual","data class SlashEqual(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Keyword.SlashEqual"]},{"name":"data class StringLiteralExpression(val entries: List<Node.Expression.StringLiteralExpression.StringEntry>, val raw: Boolean, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","description":"ktast.ast.Node.Expression.StringLiteralExpression","location":"ast/ktast.ast/-node/-expression/-string-literal-expression/index.html","searchKeys":["StringLiteralExpression","data class StringLiteralExpression(val entries: List<Node.Expression.StringLiteralExpression.StringEntry>, val raw: Boolean, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","ktast.ast.Node.Expression.StringLiteralExpression"]},{"name":"data class SuperExpression(val typeArgument: Node.TypeArgument?, val label: Node.Expression.NameExpression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression, Node.Expression.WithLabel","description":"ktast.ast.Node.Expression.SuperExpression","location":"ast/ktast.ast/-node/-expression/-super-expression/index.html","searchKeys":["SuperExpression","data class SuperExpression(val typeArgument: Node.TypeArgument?, val label: Node.Expression.NameExpression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression, Node.Expression.WithLabel","ktast.ast.Node.Expression.SuperExpression"]},{"name":"data class Suspend(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Suspend","location":"ast/ktast.ast/-node/-keyword/-suspend/index.html","searchKeys":["Suspend","data class Suspend(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Suspend"]},{"name":"data class TailRec(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.TailRec","location":"ast/ktast.ast/-node/-keyword/-tail-rec/index.html","searchKeys":["TailRec","data class TailRec(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.TailRec"]},{"name":"data class TemplateStringEntry(val expression: Node.Expression, val short: Boolean, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.StringLiteralExpression.StringEntry","description":"ktast.ast.Node.Expression.StringLiteralExpression.TemplateStringEntry","location":"ast/ktast.ast/-node/-expression/-string-literal-expression/-template-string-entry/index.html","searchKeys":["TemplateStringEntry","data class TemplateStringEntry(val expression: Node.Expression, val short: Boolean, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.StringLiteralExpression.StringEntry","ktast.ast.Node.Expression.StringLiteralExpression.TemplateStringEntry"]},{"name":"data class ThisExpression(val label: Node.Expression.NameExpression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression, Node.Expression.WithLabel","description":"ktast.ast.Node.Expression.ThisExpression","location":"ast/ktast.ast/-node/-expression/-this-expression/index.html","searchKeys":["ThisExpression","data class ThisExpression(val label: Node.Expression.NameExpression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression, Node.Expression.WithLabel","ktast.ast.Node.Expression.ThisExpression"]},{"name":"data class ThrowExpression(val expression: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","description":"ktast.ast.Node.Expression.ThrowExpression","location":"ast/ktast.ast/-node/-expression/-throw-expression/index.html","searchKeys":["ThrowExpression","data class ThrowExpression(val expression: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","ktast.ast.Node.Expression.ThrowExpression"]},{"name":"data class TrailingComma(val supplement: NodeSupplement = NodeSupplement()) : Node.Extra","description":"ktast.ast.Node.Extra.TrailingComma","location":"ast/ktast.ast/-node/-extra/-trailing-comma/index.html","searchKeys":["TrailingComma","data class TrailingComma(val supplement: NodeSupplement = NodeSupplement()) : Node.Extra","ktast.ast.Node.Extra.TrailingComma"]},{"name":"data class TryExpression(val block: Node.Expression.BlockExpression, val catchClauses: List<Node.Expression.TryExpression.CatchClause>, val finallyBlock: Node.Expression.BlockExpression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","description":"ktast.ast.Node.Expression.TryExpression","location":"ast/ktast.ast/-node/-expression/-try-expression/index.html","searchKeys":["TryExpression","data class TryExpression(val block: Node.Expression.BlockExpression, val catchClauses: List<Node.Expression.TryExpression.CatchClause>, val finallyBlock: Node.Expression.BlockExpression?, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","ktast.ast.Node.Expression.TryExpression"]},{"name":"data class TypeAliasDeclaration(val modifiers: List<Node.Modifier>, val name: Node.Expression.NameExpression, val lAngle: Node.Keyword.Less?, val typeParameters: List<Node.TypeParameter>, val rAngle: Node.Keyword.Greater?, val type: Node.Type, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration, Node.WithModifiers, Node.WithTypeParameters","description":"ktast.ast.Node.Declaration.TypeAliasDeclaration","location":"ast/ktast.ast/-node/-declaration/-type-alias-declaration/index.html","searchKeys":["TypeAliasDeclaration","data class TypeAliasDeclaration(val modifiers: List<Node.Modifier>, val name: Node.Expression.NameExpression, val lAngle: Node.Keyword.Less?, val typeParameters: List<Node.TypeParameter>, val rAngle: Node.Keyword.Greater?, val type: Node.Type, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration, Node.WithModifiers, Node.WithTypeParameters","ktast.ast.Node.Declaration.TypeAliasDeclaration"]},{"name":"data class TypeArgument(val modifiers: List<Node.Modifier>, val type: Node.Type, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithModifiers","description":"ktast.ast.Node.TypeArgument","location":"ast/ktast.ast/-node/-type-argument/index.html","searchKeys":["TypeArgument","data class TypeArgument(val modifiers: List<Node.Modifier>, val type: Node.Type, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithModifiers","ktast.ast.Node.TypeArgument"]},{"name":"data class TypeClassParent(val type: Node.Type, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration.ClassOrObject.ClassParent","description":"ktast.ast.Node.Declaration.ClassOrObject.TypeClassParent","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-type-class-parent/index.html","searchKeys":["TypeClassParent","data class TypeClassParent(val type: Node.Type, val supplement: NodeSupplement = NodeSupplement()) : Node.Declaration.ClassOrObject.ClassParent","ktast.ast.Node.Declaration.ClassOrObject.TypeClassParent"]},{"name":"data class TypeConstraint(val annotationSets: List<Node.Modifier.AnnotationSet>, val name: Node.Expression.NameExpression, val type: Node.Type, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithAnnotationSets","description":"ktast.ast.Node.PostModifier.TypeConstraintSet.TypeConstraint","location":"ast/ktast.ast/-node/-post-modifier/-type-constraint-set/-type-constraint/index.html","searchKeys":["TypeConstraint","data class TypeConstraint(val annotationSets: List<Node.Modifier.AnnotationSet>, val name: Node.Expression.NameExpression, val type: Node.Type, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithAnnotationSets","ktast.ast.Node.PostModifier.TypeConstraintSet.TypeConstraint"]},{"name":"data class TypeConstraintSet(val constraints: List<Node.PostModifier.TypeConstraintSet.TypeConstraint>, val supplement: NodeSupplement = NodeSupplement()) : Node.PostModifier","description":"ktast.ast.Node.PostModifier.TypeConstraintSet","location":"ast/ktast.ast/-node/-post-modifier/-type-constraint-set/index.html","searchKeys":["TypeConstraintSet","data class TypeConstraintSet(val constraints: List<Node.PostModifier.TypeConstraintSet.TypeConstraint>, val supplement: NodeSupplement = NodeSupplement()) : Node.PostModifier","ktast.ast.Node.PostModifier.TypeConstraintSet"]},{"name":"data class TypeParameter(val modifiers: List<Node.Modifier>, val name: Node.Expression.NameExpression, val type: Node.Type?, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithModifiers","description":"ktast.ast.Node.TypeParameter","location":"ast/ktast.ast/-node/-type-parameter/index.html","searchKeys":["TypeParameter","data class TypeParameter(val modifiers: List<Node.Modifier>, val name: Node.Expression.NameExpression, val type: Node.Type?, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithModifiers","ktast.ast.Node.TypeParameter"]},{"name":"data class TypeWhenCondition(val operator: Node.Expression.WhenExpression.WhenConditionTypeOperator, val type: Node.Type, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.WhenExpression.WhenCondition","description":"ktast.ast.Node.Expression.WhenExpression.TypeWhenCondition","location":"ast/ktast.ast/-node/-expression/-when-expression/-type-when-condition/index.html","searchKeys":["TypeWhenCondition","data class TypeWhenCondition(val operator: Node.Expression.WhenExpression.WhenConditionTypeOperator, val type: Node.Type, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression.WhenExpression.WhenCondition","ktast.ast.Node.Expression.WhenExpression.TypeWhenCondition"]},{"name":"data class Val(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Keyword.ValOrVarKeyword","description":"ktast.ast.Node.Keyword.Val","location":"ast/ktast.ast/-node/-keyword/-val/index.html","searchKeys":["Val","data class Val(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Keyword.ValOrVarKeyword","ktast.ast.Node.Keyword.Val"]},{"name":"data class Value(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Value","location":"ast/ktast.ast/-node/-keyword/-value/index.html","searchKeys":["Value","data class Value(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Value"]},{"name":"data class ValueArgument(val name: Node.Expression.NameExpression?, val spreadOperator: Node.Keyword.Asterisk?, val expression: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node","description":"ktast.ast.Node.ValueArgument","location":"ast/ktast.ast/-node/-value-argument/index.html","searchKeys":["ValueArgument","data class ValueArgument(val name: Node.Expression.NameExpression?, val spreadOperator: Node.Keyword.Asterisk?, val expression: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node","ktast.ast.Node.ValueArgument"]},{"name":"data class Var(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Keyword.ValOrVarKeyword","description":"ktast.ast.Node.Keyword.Var","location":"ast/ktast.ast/-node/-keyword/-var/index.html","searchKeys":["Var","data class Var(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Keyword.ValOrVarKeyword","ktast.ast.Node.Keyword.Var"]},{"name":"data class Vararg(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","description":"ktast.ast.Node.Keyword.Vararg","location":"ast/ktast.ast/-node/-keyword/-vararg/index.html","searchKeys":["Vararg","data class Vararg(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword, Node.Modifier.KeywordModifier","ktast.ast.Node.Keyword.Vararg"]},{"name":"data class Variable(val annotationSets: List<Node.Modifier.AnnotationSet>, val name: Node.Expression.NameExpression, val type: Node.Type?, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithAnnotationSets","description":"ktast.ast.Node.Variable","location":"ast/ktast.ast/-node/-variable/index.html","searchKeys":["Variable","data class Variable(val annotationSets: List<Node.Modifier.AnnotationSet>, val name: Node.Expression.NameExpression, val type: Node.Type?, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithAnnotationSets","ktast.ast.Node.Variable"]},{"name":"data class When(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword","description":"ktast.ast.Node.Keyword.When","location":"ast/ktast.ast/-node/-keyword/-when/index.html","searchKeys":["When","data class When(val supplement: NodeSupplement = NodeSupplement()) : Node.Keyword","ktast.ast.Node.Keyword.When"]},{"name":"data class WhenExpression(val whenKeyword: Node.Keyword.When, val subject: Node.Expression.WhenExpression.WhenSubject?, val branches: List<Node.Expression.WhenExpression.WhenBranch>, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","description":"ktast.ast.Node.Expression.WhenExpression","location":"ast/ktast.ast/-node/-expression/-when-expression/index.html","searchKeys":["WhenExpression","data class WhenExpression(val whenKeyword: Node.Keyword.When, val subject: Node.Expression.WhenExpression.WhenSubject?, val branches: List<Node.Expression.WhenExpression.WhenBranch>, val supplement: NodeSupplement = NodeSupplement()) : Node.Expression","ktast.ast.Node.Expression.WhenExpression"]},{"name":"data class WhenSubject(val lPar: Node.Keyword.LPar, val annotationSets: List<Node.Modifier.AnnotationSet>, val variable: Node.Variable?, val expression: Node.Expression, val rPar: Node.Keyword.RPar, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithAnnotationSets","description":"ktast.ast.Node.Expression.WhenExpression.WhenSubject","location":"ast/ktast.ast/-node/-expression/-when-expression/-when-subject/index.html","searchKeys":["WhenSubject","data class WhenSubject(val lPar: Node.Keyword.LPar, val annotationSets: List<Node.Modifier.AnnotationSet>, val variable: Node.Variable?, val expression: Node.Expression, val rPar: Node.Keyword.RPar, val supplement: NodeSupplement = NodeSupplement()) : Node, Node.WithAnnotationSets","ktast.ast.Node.Expression.WhenExpression.WhenSubject"]},{"name":"data class WhileStatement(val lPar: Node.Keyword.LPar, val condition: Node.Expression, val rPar: Node.Keyword.RPar, val body: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node.Statement.WhileStatementBase","description":"ktast.ast.Node.Statement.WhileStatement","location":"ast/ktast.ast/-node/-statement/-while-statement/index.html","searchKeys":["WhileStatement","data class WhileStatement(val lPar: Node.Keyword.LPar, val condition: Node.Expression, val rPar: Node.Keyword.RPar, val body: Node.Expression, val supplement: NodeSupplement = NodeSupplement()) : Node.Statement.WhileStatementBase","ktast.ast.Node.Statement.WhileStatement"]},{"name":"data class Whitespace(val text: String, val supplement: NodeSupplement = NodeSupplement()) : Node.Extra","description":"ktast.ast.Node.Extra.Whitespace","location":"ast/ktast.ast/-node/-extra/-whitespace/index.html","searchKeys":["Whitespace","data class Whitespace(val text: String, val supplement: NodeSupplement = NodeSupplement()) : Node.Extra","ktast.ast.Node.Extra.Whitespace"]},{"name":"fun <C : Node> childPathOf(child: C): NodePath<C>","description":"ktast.ast.NodePath.childPathOf","location":"ast/ktast.ast/-node-path/child-path-of.html","searchKeys":["childPathOf","fun <C : Node> childPathOf(child: C): NodePath<C>","ktast.ast.NodePath.childPathOf"]},{"name":"fun <T : Node> rootPathOf(node: T): NodePath<T>","description":"ktast.ast.NodePath.Companion.rootPathOf","location":"ast/ktast.ast/-node-path/-companion/root-path-of.html","searchKeys":["rootPathOf","fun <T : Node> rootPathOf(node: T): NodePath<T>","ktast.ast.NodePath.Companion.rootPathOf"]},{"name":"fun <T : Node> traverse(rootNode: T): T","description":"ktast.ast.MutableVisitor.traverse","location":"ast/ktast.ast/-mutable-visitor/traverse.html","searchKeys":["traverse","fun <T : Node> traverse(rootNode: T): T","ktast.ast.MutableVisitor.traverse"]},{"name":"fun <T : Node> traverse(rootNode: T, callback: (path: NodePath<*>) -> Node): T","description":"ktast.ast.MutableVisitor.Companion.traverse","location":"ast/ktast.ast/-mutable-visitor/-companion/traverse.html","searchKeys":["traverse","fun <T : Node> traverse(rootNode: T, callback: (path: NodePath<*>) -> Node): T","ktast.ast.MutableVisitor.Companion.traverse"]},{"name":"fun <T> write(rootNode: Node, appendable: T, withExtras: Boolean = true): T","description":"ktast.ast.Writer.Companion.write","location":"ast/ktast.ast/-writer/-companion/write.html","searchKeys":["write","fun <T> write(rootNode: Node, appendable: T, withExtras: Boolean = true): T","ktast.ast.Writer.Companion.write"]},{"name":"fun ancestors(): <Error class: unknown class><Node>","description":"ktast.ast.NodePath.ancestors","location":"ast/ktast.ast/-node-path/ancestors.html","searchKeys":["ancestors","fun ancestors(): <Error class: unknown class><Node>","ktast.ast.NodePath.ancestors"]},{"name":"fun annotatedExpression(annotationSets: List<Node.Modifier.AnnotationSet> = listOf(), statement: Node.Statement, supplement: NodeSupplement = NodeSupplement()): Node.Expression.AnnotatedExpression","description":"ktast.builder.annotatedExpression","location":"ast/ktast.builder/annotated-expression.html","searchKeys":["annotatedExpression","fun annotatedExpression(annotationSets: List<Node.Modifier.AnnotationSet> = listOf(), statement: Node.Statement, supplement: NodeSupplement = NodeSupplement()): Node.Expression.AnnotatedExpression","ktast.builder.annotatedExpression"]},{"name":"fun annotation(type: Node.Type.SimpleType, lPar: Node.Keyword.LPar? = null, arguments: List<Node.ValueArgument> = listOf(), rPar: Node.Keyword.RPar? = null, supplement: NodeSupplement = NodeSupplement()): Node.Modifier.AnnotationSet.Annotation","description":"ktast.builder.annotation","location":"ast/ktast.builder/annotation.html","searchKeys":["annotation","fun annotation(type: Node.Type.SimpleType, lPar: Node.Keyword.LPar? = null, arguments: List<Node.ValueArgument> = listOf(), rPar: Node.Keyword.RPar? = null, supplement: NodeSupplement = NodeSupplement()): Node.Modifier.AnnotationSet.Annotation","ktast.builder.annotation"]},{"name":"fun annotationSet(target: Node.Modifier.AnnotationSet.AnnotationTarget? = null, lBracket: Node.Keyword.LBracket? = null, annotations: List<Node.Modifier.AnnotationSet.Annotation> = listOf(), rBracket: Node.Keyword.RBracket? = null, supplement: NodeSupplement = NodeSupplement()): Node.Modifier.AnnotationSet","description":"ktast.builder.annotationSet","location":"ast/ktast.builder/annotation-set.html","searchKeys":["annotationSet","fun annotationSet(target: Node.Modifier.AnnotationSet.AnnotationTarget? = null, lBracket: Node.Keyword.LBracket? = null, annotations: List<Node.Modifier.AnnotationSet.Annotation> = listOf(), rBracket: Node.Keyword.RBracket? = null, supplement: NodeSupplement = NodeSupplement()): Node.Modifier.AnnotationSet","ktast.builder.annotationSet"]},{"name":"fun anonymousFunctionExpression(function: Node.Declaration.FunctionDeclaration, supplement: NodeSupplement = NodeSupplement()): Node.Expression.AnonymousFunctionExpression","description":"ktast.builder.anonymousFunctionExpression","location":"ast/ktast.builder/anonymous-function-expression.html","searchKeys":["anonymousFunctionExpression","fun anonymousFunctionExpression(function: Node.Declaration.FunctionDeclaration, supplement: NodeSupplement = NodeSupplement()): Node.Expression.AnonymousFunctionExpression","ktast.builder.anonymousFunctionExpression"]},{"name":"fun binaryExpression(lhs: Node.Expression, operator: Node.Expression.BinaryExpression.BinaryOperator, rhs: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.Expression.BinaryExpression","description":"ktast.builder.binaryExpression","location":"ast/ktast.builder/binary-expression.html","searchKeys":["binaryExpression","fun binaryExpression(lhs: Node.Expression, operator: Node.Expression.BinaryExpression.BinaryOperator, rhs: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.Expression.BinaryExpression","ktast.builder.binaryExpression"]},{"name":"fun binaryTypeExpression(lhs: Node.Expression, operator: Node.Expression.BinaryTypeExpression.BinaryTypeOperator, rhs: Node.Type, supplement: NodeSupplement = NodeSupplement()): Node.Expression.BinaryTypeExpression","description":"ktast.builder.binaryTypeExpression","location":"ast/ktast.builder/binary-type-expression.html","searchKeys":["binaryTypeExpression","fun binaryTypeExpression(lhs: Node.Expression, operator: Node.Expression.BinaryTypeExpression.BinaryTypeOperator, rhs: Node.Type, supplement: NodeSupplement = NodeSupplement()): Node.Expression.BinaryTypeExpression","ktast.builder.binaryTypeExpression"]},{"name":"fun blockExpression(statements: List<Node.Statement> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.Expression.BlockExpression","description":"ktast.builder.blockExpression","location":"ast/ktast.builder/block-expression.html","searchKeys":["blockExpression","fun blockExpression(statements: List<Node.Statement> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.Expression.BlockExpression","ktast.builder.blockExpression"]},{"name":"fun blockExpression(vararg statements: Node.Statement): <Error class: unknown class>","description":"ktast.builder.blockExpression","location":"ast/ktast.builder/block-expression.html","searchKeys":["blockExpression","fun blockExpression(vararg statements: Node.Statement): <Error class: unknown class>","ktast.builder.blockExpression"]},{"name":"fun booleanLiteralExpression(text: String, supplement: NodeSupplement = NodeSupplement()): Node.Expression.BooleanLiteralExpression","description":"ktast.builder.booleanLiteralExpression","location":"ast/ktast.builder/boolean-literal-expression.html","searchKeys":["booleanLiteralExpression","fun booleanLiteralExpression(text: String, supplement: NodeSupplement = NodeSupplement()): Node.Expression.BooleanLiteralExpression","ktast.builder.booleanLiteralExpression"]},{"name":"fun breakExpression(label: Node.Expression.NameExpression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Expression.BreakExpression","description":"ktast.builder.breakExpression","location":"ast/ktast.builder/break-expression.html","searchKeys":["breakExpression","fun breakExpression(label: Node.Expression.NameExpression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Expression.BreakExpression","ktast.builder.breakExpression"]},{"name":"fun callExpression(calleeExpression: Node.Expression, lAngle: Node.Keyword.Less? = null, typeArguments: List<Node.TypeArgument> = listOf(), rAngle: Node.Keyword.Greater? = null, lPar: Node.Keyword.LPar? = null, arguments: List<Node.ValueArgument> = listOf(), rPar: Node.Keyword.RPar? = null, lambdaArgument: Node.Expression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Expression.CallExpression","description":"ktast.builder.callExpression","location":"ast/ktast.builder/call-expression.html","searchKeys":["callExpression","fun callExpression(calleeExpression: Node.Expression, lAngle: Node.Keyword.Less? = null, typeArguments: List<Node.TypeArgument> = listOf(), rAngle: Node.Keyword.Greater? = null, lPar: Node.Keyword.LPar? = null, arguments: List<Node.ValueArgument> = listOf(), rPar: Node.Keyword.RPar? = null, lambdaArgument: Node.Expression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Expression.CallExpression","ktast.builder.callExpression"]},{"name":"fun callableReferenceExpression(lhs: Node.Expression? = null, questionMarks: List<Node.Keyword.Question> = listOf(), rhs: Node.Expression.NameExpression, supplement: NodeSupplement = NodeSupplement()): Node.Expression.CallableReferenceExpression","description":"ktast.builder.callableReferenceExpression","location":"ast/ktast.builder/callable-reference-expression.html","searchKeys":["callableReferenceExpression","fun callableReferenceExpression(lhs: Node.Expression? = null, questionMarks: List<Node.Keyword.Question> = listOf(), rhs: Node.Expression.NameExpression, supplement: NodeSupplement = NodeSupplement()): Node.Expression.CallableReferenceExpression","ktast.builder.callableReferenceExpression"]},{"name":"fun catchClause(lPar: Node.Keyword.LPar = Node.Keyword.LPar(), parameters: List<Node.FunctionParameter> = listOf(), rPar: Node.Keyword.RPar = Node.Keyword.RPar(), block: Node.Expression.BlockExpression, supplement: NodeSupplement = NodeSupplement()): Node.Expression.TryExpression.CatchClause","description":"ktast.builder.catchClause","location":"ast/ktast.builder/catch-clause.html","searchKeys":["catchClause","fun catchClause(lPar: Node.Keyword.LPar = Node.Keyword.LPar(), parameters: List<Node.FunctionParameter> = listOf(), rPar: Node.Keyword.RPar = Node.Keyword.RPar(), block: Node.Expression.BlockExpression, supplement: NodeSupplement = NodeSupplement()): Node.Expression.TryExpression.CatchClause","ktast.builder.catchClause"]},{"name":"fun characterLiteralExpression(text: String, supplement: NodeSupplement = NodeSupplement()): Node.Expression.CharacterLiteralExpression","description":"ktast.builder.characterLiteralExpression","location":"ast/ktast.builder/character-literal-expression.html","searchKeys":["characterLiteralExpression","fun characterLiteralExpression(text: String, supplement: NodeSupplement = NodeSupplement()): Node.Expression.CharacterLiteralExpression","ktast.builder.characterLiteralExpression"]},{"name":"fun classBody(enumEntries: List<Node.Declaration.ClassOrObject.ClassBody.EnumEntry> = listOf(), declarations: List<Node.Declaration> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ClassOrObject.ClassBody","description":"ktast.builder.classBody","location":"ast/ktast.builder/class-body.html","searchKeys":["classBody","fun classBody(enumEntries: List<Node.Declaration.ClassOrObject.ClassBody.EnumEntry> = listOf(), declarations: List<Node.Declaration> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ClassOrObject.ClassBody","ktast.builder.classBody"]},{"name":"fun classDeclaration(modifiers: List<Node.Modifier> = listOf(), declarationKeyword: Node.Declaration.ClassDeclaration.ClassOrInterfaceKeyword, name: Node.Expression.NameExpression, lAngle: Node.Keyword.Less? = null, typeParameters: List<Node.TypeParameter> = listOf(), rAngle: Node.Keyword.Greater? = null, primaryConstructor: Node.Declaration.ClassDeclaration.PrimaryConstructor? = null, parents: List<Node.Declaration.ClassOrObject.ClassParent> = listOf(), typeConstraintSet: Node.PostModifier.TypeConstraintSet? = null, body: Node.Declaration.ClassOrObject.ClassBody? = null, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ClassDeclaration","description":"ktast.builder.classDeclaration","location":"ast/ktast.builder/class-declaration.html","searchKeys":["classDeclaration","fun classDeclaration(modifiers: List<Node.Modifier> = listOf(), declarationKeyword: Node.Declaration.ClassDeclaration.ClassOrInterfaceKeyword, name: Node.Expression.NameExpression, lAngle: Node.Keyword.Less? = null, typeParameters: List<Node.TypeParameter> = listOf(), rAngle: Node.Keyword.Greater? = null, primaryConstructor: Node.Declaration.ClassDeclaration.PrimaryConstructor? = null, parents: List<Node.Declaration.ClassOrObject.ClassParent> = listOf(), typeConstraintSet: Node.PostModifier.TypeConstraintSet? = null, body: Node.Declaration.ClassOrObject.ClassBody? = null, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ClassDeclaration","ktast.builder.classDeclaration"]},{"name":"fun classLiteralExpression(lhs: Node.Expression, questionMarks: List<Node.Keyword.Question> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.Expression.ClassLiteralExpression","description":"ktast.builder.classLiteralExpression","location":"ast/ktast.builder/class-literal-expression.html","searchKeys":["classLiteralExpression","fun classLiteralExpression(lhs: Node.Expression, questionMarks: List<Node.Keyword.Question> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.Expression.ClassLiteralExpression","ktast.builder.classLiteralExpression"]},{"name":"fun collectionLiteralExpression(expressions: List<Node.Expression> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.Expression.CollectionLiteralExpression","description":"ktast.builder.collectionLiteralExpression","location":"ast/ktast.builder/collection-literal-expression.html","searchKeys":["collectionLiteralExpression","fun collectionLiteralExpression(expressions: List<Node.Expression> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.Expression.CollectionLiteralExpression","ktast.builder.collectionLiteralExpression"]},{"name":"fun comment(text: String, supplement: NodeSupplement = NodeSupplement()): Node.Extra.Comment","description":"ktast.builder.comment","location":"ast/ktast.builder/comment.html","searchKeys":["comment","fun comment(text: String, supplement: NodeSupplement = NodeSupplement()): Node.Extra.Comment","ktast.builder.comment"]},{"name":"fun conditionalWhenBranch(conditions: List<Node.Expression.WhenExpression.WhenCondition> = listOf(), arrow: Node.Keyword.Arrow = Node.Keyword.Arrow(), body: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.Expression.WhenExpression.ConditionalWhenBranch","description":"ktast.builder.conditionalWhenBranch","location":"ast/ktast.builder/conditional-when-branch.html","searchKeys":["conditionalWhenBranch","fun conditionalWhenBranch(conditions: List<Node.Expression.WhenExpression.WhenCondition> = listOf(), arrow: Node.Keyword.Arrow = Node.Keyword.Arrow(), body: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.Expression.WhenExpression.ConditionalWhenBranch","ktast.builder.conditionalWhenBranch"]},{"name":"fun constructorClassParent(type: Node.Type.SimpleType, lPar: Node.Keyword.LPar = Node.Keyword.LPar(), arguments: List<Node.ValueArgument> = listOf(), rPar: Node.Keyword.RPar = Node.Keyword.RPar(), supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ClassOrObject.ConstructorClassParent","description":"ktast.builder.constructorClassParent","location":"ast/ktast.builder/constructor-class-parent.html","searchKeys":["constructorClassParent","fun constructorClassParent(type: Node.Type.SimpleType, lPar: Node.Keyword.LPar = Node.Keyword.LPar(), arguments: List<Node.ValueArgument> = listOf(), rPar: Node.Keyword.RPar = Node.Keyword.RPar(), supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ClassOrObject.ConstructorClassParent","ktast.builder.constructorClassParent"]},{"name":"fun contextReceiver(lPar: Node.Keyword.LPar = Node.Keyword.LPar(), receiverTypes: List<Node.Type> = listOf(), rPar: Node.Keyword.RPar = Node.Keyword.RPar(), supplement: NodeSupplement = NodeSupplement()): Node.ContextReceiver","description":"ktast.builder.contextReceiver","location":"ast/ktast.builder/context-receiver.html","searchKeys":["contextReceiver","fun contextReceiver(lPar: Node.Keyword.LPar = Node.Keyword.LPar(), receiverTypes: List<Node.Type> = listOf(), rPar: Node.Keyword.RPar = Node.Keyword.RPar(), supplement: NodeSupplement = NodeSupplement()): Node.ContextReceiver","ktast.builder.contextReceiver"]},{"name":"fun continueExpression(label: Node.Expression.NameExpression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Expression.ContinueExpression","description":"ktast.builder.continueExpression","location":"ast/ktast.builder/continue-expression.html","searchKeys":["continueExpression","fun continueExpression(label: Node.Expression.NameExpression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Expression.ContinueExpression","ktast.builder.continueExpression"]},{"name":"fun contract(lBracket: Node.Keyword.LBracket = Node.Keyword.LBracket(), contractEffects: List<Node.Expression> = listOf(), rBracket: Node.Keyword.RBracket = Node.Keyword.RBracket(), supplement: NodeSupplement = NodeSupplement()): Node.PostModifier.Contract","description":"ktast.builder.contract","location":"ast/ktast.builder/contract.html","searchKeys":["contract","fun contract(lBracket: Node.Keyword.LBracket = Node.Keyword.LBracket(), contractEffects: List<Node.Expression> = listOf(), rBracket: Node.Keyword.RBracket = Node.Keyword.RBracket(), supplement: NodeSupplement = NodeSupplement()): Node.PostModifier.Contract","ktast.builder.contract"]},{"name":"fun delegationClassParent(type: Node.Type, expression: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ClassOrObject.DelegationClassParent","description":"ktast.builder.delegationClassParent","location":"ast/ktast.builder/delegation-class-parent.html","searchKeys":["delegationClassParent","fun delegationClassParent(type: Node.Type, expression: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ClassOrObject.DelegationClassParent","ktast.builder.delegationClassParent"]},{"name":"fun doWhileStatement(body: Node.Expression, lPar: Node.Keyword.LPar = Node.Keyword.LPar(), condition: Node.Expression, rPar: Node.Keyword.RPar = Node.Keyword.RPar(), supplement: NodeSupplement = NodeSupplement()): Node.Statement.DoWhileStatement","description":"ktast.builder.doWhileStatement","location":"ast/ktast.builder/do-while-statement.html","searchKeys":["doWhileStatement","fun doWhileStatement(body: Node.Expression, lPar: Node.Keyword.LPar = Node.Keyword.LPar(), condition: Node.Expression, rPar: Node.Keyword.RPar = Node.Keyword.RPar(), supplement: NodeSupplement = NodeSupplement()): Node.Statement.DoWhileStatement","ktast.builder.doWhileStatement"]},{"name":"fun dump(node: Node)","description":"ktast.ast.Dumper.dump","location":"ast/ktast.ast/-dumper/dump.html","searchKeys":["dump","fun dump(node: Node)","ktast.ast.Dumper.dump"]},{"name":"fun dump(node: Node, withExtras: Boolean = true, withProperties: Boolean = true): String","description":"ktast.ast.Dumper.Companion.dump","location":"ast/ktast.ast/-dumper/-companion/dump.html","searchKeys":["dump","fun dump(node: Node, withExtras: Boolean = true, withProperties: Boolean = true): String","ktast.ast.Dumper.Companion.dump"]},{"name":"fun dynamicType(modifiers: List<Node.Modifier> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.Type.DynamicType","description":"ktast.builder.dynamicType","location":"ast/ktast.builder/dynamic-type.html","searchKeys":["dynamicType","fun dynamicType(modifiers: List<Node.Modifier> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.Type.DynamicType","ktast.builder.dynamicType"]},{"name":"fun elseWhenBranch(arrow: Node.Keyword.Arrow = Node.Keyword.Arrow(), body: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.Expression.WhenExpression.ElseWhenBranch","description":"ktast.builder.elseWhenBranch","location":"ast/ktast.builder/else-when-branch.html","searchKeys":["elseWhenBranch","fun elseWhenBranch(arrow: Node.Keyword.Arrow = Node.Keyword.Arrow(), body: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.Expression.WhenExpression.ElseWhenBranch","ktast.builder.elseWhenBranch"]},{"name":"fun enumEntry(modifiers: List<Node.Modifier> = listOf(), name: Node.Expression.NameExpression, lPar: Node.Keyword.LPar? = null, arguments: List<Node.ValueArgument> = listOf(), rPar: Node.Keyword.RPar? = null, classBody: Node.Declaration.ClassOrObject.ClassBody? = null, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ClassOrObject.ClassBody.EnumEntry","description":"ktast.builder.enumEntry","location":"ast/ktast.builder/enum-entry.html","searchKeys":["enumEntry","fun enumEntry(modifiers: List<Node.Modifier> = listOf(), name: Node.Expression.NameExpression, lPar: Node.Keyword.LPar? = null, arguments: List<Node.ValueArgument> = listOf(), rPar: Node.Keyword.RPar? = null, classBody: Node.Declaration.ClassOrObject.ClassBody? = null, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ClassOrObject.ClassBody.EnumEntry","ktast.builder.enumEntry"]},{"name":"fun escapeStringEntry(text: String, supplement: NodeSupplement = NodeSupplement()): Node.Expression.StringLiteralExpression.EscapeStringEntry","description":"ktast.builder.escapeStringEntry","location":"ast/ktast.builder/escape-string-entry.html","searchKeys":["escapeStringEntry","fun escapeStringEntry(text: String, supplement: NodeSupplement = NodeSupplement()): Node.Expression.StringLiteralExpression.EscapeStringEntry","ktast.builder.escapeStringEntry"]},{"name":"fun expressionWhenCondition(expression: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.Expression.WhenExpression.ExpressionWhenCondition","description":"ktast.builder.expressionWhenCondition","location":"ast/ktast.builder/expression-when-condition.html","searchKeys":["expressionWhenCondition","fun expressionWhenCondition(expression: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.Expression.WhenExpression.ExpressionWhenCondition","ktast.builder.expressionWhenCondition"]},{"name":"fun forStatement(lPar: Node.Keyword.LPar = Node.Keyword.LPar(), loopParameter: Node.LambdaParameter, inKeyword: Node.Keyword.In = Node.Keyword.In(), loopRange: Node.Expression, rPar: Node.Keyword.RPar = Node.Keyword.RPar(), body: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.Statement.ForStatement","description":"ktast.builder.forStatement","location":"ast/ktast.builder/for-statement.html","searchKeys":["forStatement","fun forStatement(lPar: Node.Keyword.LPar = Node.Keyword.LPar(), loopParameter: Node.LambdaParameter, inKeyword: Node.Keyword.In = Node.Keyword.In(), loopRange: Node.Expression, rPar: Node.Keyword.RPar = Node.Keyword.RPar(), body: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.Statement.ForStatement","ktast.builder.forStatement"]},{"name":"fun functionDeclaration(modifiers: List<Node.Modifier> = listOf(), lAngle: Node.Keyword.Less? = null, typeParameters: List<Node.TypeParameter> = listOf(), rAngle: Node.Keyword.Greater? = null, receiverType: Node.Type? = null, name: Node.Expression.NameExpression? = null, lPar: Node.Keyword.LPar = Node.Keyword.LPar(), parameters: List<Node.FunctionParameter> = listOf(), rPar: Node.Keyword.RPar = Node.Keyword.RPar(), returnType: Node.Type? = null, postModifiers: List<Node.PostModifier> = listOf(), body: Node.Expression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.FunctionDeclaration","description":"ktast.builder.functionDeclaration","location":"ast/ktast.builder/function-declaration.html","searchKeys":["functionDeclaration","fun functionDeclaration(modifiers: List<Node.Modifier> = listOf(), lAngle: Node.Keyword.Less? = null, typeParameters: List<Node.TypeParameter> = listOf(), rAngle: Node.Keyword.Greater? = null, receiverType: Node.Type? = null, name: Node.Expression.NameExpression? = null, lPar: Node.Keyword.LPar = Node.Keyword.LPar(), parameters: List<Node.FunctionParameter> = listOf(), rPar: Node.Keyword.RPar = Node.Keyword.RPar(), returnType: Node.Type? = null, postModifiers: List<Node.PostModifier> = listOf(), body: Node.Expression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.FunctionDeclaration","ktast.builder.functionDeclaration"]},{"name":"fun functionParameter(modifiers: List<Node.Modifier> = listOf(), valOrVarKeyword: Node.Keyword.ValOrVarKeyword? = null, name: Node.Expression.NameExpression, type: Node.Type? = null, defaultValue: Node.Expression? = null, supplement: NodeSupplement = NodeSupplement()): Node.FunctionParameter","description":"ktast.builder.functionParameter","location":"ast/ktast.builder/function-parameter.html","searchKeys":["functionParameter","fun functionParameter(modifiers: List<Node.Modifier> = listOf(), valOrVarKeyword: Node.Keyword.ValOrVarKeyword? = null, name: Node.Expression.NameExpression, type: Node.Type? = null, defaultValue: Node.Expression? = null, supplement: NodeSupplement = NodeSupplement()): Node.FunctionParameter","ktast.builder.functionParameter"]},{"name":"fun functionType(modifiers: List<Node.Modifier> = listOf(), contextReceiver: Node.ContextReceiver? = null, receiverType: Node.Type? = null, lPar: Node.Keyword.LPar = Node.Keyword.LPar(), parameters: List<Node.Type.FunctionType.FunctionTypeParameter> = listOf(), rPar: Node.Keyword.RPar = Node.Keyword.RPar(), returnType: Node.Type, supplement: NodeSupplement = NodeSupplement()): Node.Type.FunctionType","description":"ktast.builder.functionType","location":"ast/ktast.builder/function-type.html","searchKeys":["functionType","fun functionType(modifiers: List<Node.Modifier> = listOf(), contextReceiver: Node.ContextReceiver? = null, receiverType: Node.Type? = null, lPar: Node.Keyword.LPar = Node.Keyword.LPar(), parameters: List<Node.Type.FunctionType.FunctionTypeParameter> = listOf(), rPar: Node.Keyword.RPar = Node.Keyword.RPar(), returnType: Node.Type, supplement: NodeSupplement = NodeSupplement()): Node.Type.FunctionType","ktast.builder.functionType"]},{"name":"fun functionTypeParameter(name: Node.Expression.NameExpression? = null, type: Node.Type, supplement: NodeSupplement = NodeSupplement()): Node.Type.FunctionType.FunctionTypeParameter","description":"ktast.builder.functionTypeParameter","location":"ast/ktast.builder/function-type-parameter.html","searchKeys":["functionTypeParameter","fun functionTypeParameter(name: Node.Expression.NameExpression? = null, type: Node.Type, supplement: NodeSupplement = NodeSupplement()): Node.Type.FunctionType.FunctionTypeParameter","ktast.builder.functionTypeParameter"]},{"name":"fun getter(modifiers: List<Node.Modifier> = listOf(), lPar: Node.Keyword.LPar? = null, rPar: Node.Keyword.RPar? = null, type: Node.Type? = null, postModifiers: List<Node.PostModifier> = listOf(), body: Node.Expression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.PropertyDeclaration.Getter","description":"ktast.builder.getter","location":"ast/ktast.builder/getter.html","searchKeys":["getter","fun getter(modifiers: List<Node.Modifier> = listOf(), lPar: Node.Keyword.LPar? = null, rPar: Node.Keyword.RPar? = null, type: Node.Type? = null, postModifiers: List<Node.PostModifier> = listOf(), body: Node.Expression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.PropertyDeclaration.Getter","ktast.builder.getter"]},{"name":"fun ifExpression(lPar: Node.Keyword.LPar = Node.Keyword.LPar(), condition: Node.Expression, rPar: Node.Keyword.RPar = Node.Keyword.RPar(), body: Node.Expression, elseBody: Node.Expression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Expression.IfExpression","description":"ktast.builder.ifExpression","location":"ast/ktast.builder/if-expression.html","searchKeys":["ifExpression","fun ifExpression(lPar: Node.Keyword.LPar = Node.Keyword.LPar(), condition: Node.Expression, rPar: Node.Keyword.RPar = Node.Keyword.RPar(), body: Node.Expression, elseBody: Node.Expression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Expression.IfExpression","ktast.builder.ifExpression"]},{"name":"fun importDirective(names: List<Node.Expression.NameExpression> = listOf(), aliasName: Node.Expression.NameExpression? = null, supplement: NodeSupplement = NodeSupplement()): Node.ImportDirective","description":"ktast.builder.importDirective","location":"ast/ktast.builder/import-directive.html","searchKeys":["importDirective","fun importDirective(names: List<Node.Expression.NameExpression> = listOf(), aliasName: Node.Expression.NameExpression? = null, supplement: NodeSupplement = NodeSupplement()): Node.ImportDirective","ktast.builder.importDirective"]},{"name":"fun indexedAccessExpression(expression: Node.Expression, indices: List<Node.Expression> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.Expression.IndexedAccessExpression","description":"ktast.builder.indexedAccessExpression","location":"ast/ktast.builder/indexed-access-expression.html","searchKeys":["indexedAccessExpression","fun indexedAccessExpression(expression: Node.Expression, indices: List<Node.Expression> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.Expression.IndexedAccessExpression","ktast.builder.indexedAccessExpression"]},{"name":"fun initializer(block: Node.Expression.BlockExpression, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ClassOrObject.ClassBody.Initializer","description":"ktast.builder.initializer","location":"ast/ktast.builder/initializer.html","searchKeys":["initializer","fun initializer(block: Node.Expression.BlockExpression, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ClassOrObject.ClassBody.Initializer","ktast.builder.initializer"]},{"name":"fun integerLiteralExpression(text: String, supplement: NodeSupplement = NodeSupplement()): Node.Expression.IntegerLiteralExpression","description":"ktast.builder.integerLiteralExpression","location":"ast/ktast.builder/integer-literal-expression.html","searchKeys":["integerLiteralExpression","fun integerLiteralExpression(text: String, supplement: NodeSupplement = NodeSupplement()): Node.Expression.IntegerLiteralExpression","ktast.builder.integerLiteralExpression"]},{"name":"fun kotlinFile(annotationSets: List<Node.Modifier.AnnotationSet> = listOf(), packageDirective: Node.PackageDirective? = null, importDirectives: List<Node.ImportDirective> = listOf(), declarations: List<Node.Declaration> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.KotlinFile","description":"ktast.builder.kotlinFile","location":"ast/ktast.builder/kotlin-file.html","searchKeys":["kotlinFile","fun kotlinFile(annotationSets: List<Node.Modifier.AnnotationSet> = listOf(), packageDirective: Node.PackageDirective? = null, importDirectives: List<Node.ImportDirective> = listOf(), declarations: List<Node.Declaration> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.KotlinFile","ktast.builder.kotlinFile"]},{"name":"fun labeledExpression(label: Node.Expression.NameExpression, statement: Node.Statement, supplement: NodeSupplement = NodeSupplement()): Node.Expression.LabeledExpression","description":"ktast.builder.labeledExpression","location":"ast/ktast.builder/labeled-expression.html","searchKeys":["labeledExpression","fun labeledExpression(label: Node.Expression.NameExpression, statement: Node.Statement, supplement: NodeSupplement = NodeSupplement()): Node.Expression.LabeledExpression","ktast.builder.labeledExpression"]},{"name":"fun lambdaExpression(): Node.Expression.LambdaExpression?","description":"ktast.ast.Node.Expression.CallExpression.lambdaExpression","location":"ast/ktast.ast/-node/-expression/-call-expression/lambda-expression.html","searchKeys":["lambdaExpression","fun lambdaExpression(): Node.Expression.LambdaExpression?","ktast.ast.Node.Expression.CallExpression.lambdaExpression"]},{"name":"fun lambdaExpression(parameters: List<Node.LambdaParameter> = listOf(), arrow: Node.Keyword.Arrow? = null, statements: List<Node.Statement> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.Expression.LambdaExpression","description":"ktast.builder.lambdaExpression","location":"ast/ktast.builder/lambda-expression.html","searchKeys":["lambdaExpression","fun lambdaExpression(parameters: List<Node.LambdaParameter> = listOf(), arrow: Node.Keyword.Arrow? = null, statements: List<Node.Statement> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.Expression.LambdaExpression","ktast.builder.lambdaExpression"]},{"name":"fun lambdaParameter(lPar: Node.Keyword.LPar? = null, variables: List<Node.Variable>, rPar: Node.Keyword.RPar? = null, destructuringType: Node.Type? = null, supplement: NodeSupplement = NodeSupplement()): Node.LambdaParameter","description":"ktast.builder.lambdaParameter","location":"ast/ktast.builder/lambda-parameter.html","searchKeys":["lambdaParameter","fun lambdaParameter(lPar: Node.Keyword.LPar? = null, variables: List<Node.Variable>, rPar: Node.Keyword.RPar? = null, destructuringType: Node.Type? = null, supplement: NodeSupplement = NodeSupplement()): Node.LambdaParameter","ktast.builder.lambdaParameter"]},{"name":"fun lambdaParameter(variable: Node.Variable, supplement: NodeSupplement = NodeSupplement()): Node.LambdaParameter","description":"ktast.builder.lambdaParameter","location":"ast/ktast.builder/lambda-parameter.html","searchKeys":["lambdaParameter","fun lambdaParameter(variable: Node.Variable, supplement: NodeSupplement = NodeSupplement()): Node.LambdaParameter","ktast.builder.lambdaParameter"]},{"name":"fun literalStringEntry(text: String, supplement: NodeSupplement = NodeSupplement()): Node.Expression.StringLiteralExpression.LiteralStringEntry","description":"ktast.builder.literalStringEntry","location":"ast/ktast.builder/literal-string-entry.html","searchKeys":["literalStringEntry","fun literalStringEntry(text: String, supplement: NodeSupplement = NodeSupplement()): Node.Expression.StringLiteralExpression.LiteralStringEntry","ktast.builder.literalStringEntry"]},{"name":"fun nameExpression(text: String, supplement: NodeSupplement = NodeSupplement()): Node.Expression.NameExpression","description":"ktast.builder.nameExpression","location":"ast/ktast.builder/name-expression.html","searchKeys":["nameExpression","fun nameExpression(text: String, supplement: NodeSupplement = NodeSupplement()): Node.Expression.NameExpression","ktast.builder.nameExpression"]},{"name":"fun nullLiteralExpression(supplement: NodeSupplement = NodeSupplement()): Node.Expression.NullLiteralExpression","description":"ktast.builder.nullLiteralExpression","location":"ast/ktast.builder/null-literal-expression.html","searchKeys":["nullLiteralExpression","fun nullLiteralExpression(supplement: NodeSupplement = NodeSupplement()): Node.Expression.NullLiteralExpression","ktast.builder.nullLiteralExpression"]},{"name":"fun nullableType(modifiers: List<Node.Modifier> = listOf(), innerType: Node.Type, questionMark: Node.Keyword.Question = Node.Keyword.Question(), supplement: NodeSupplement = NodeSupplement()): Node.Type.NullableType","description":"ktast.builder.nullableType","location":"ast/ktast.builder/nullable-type.html","searchKeys":["nullableType","fun nullableType(modifiers: List<Node.Modifier> = listOf(), innerType: Node.Type, questionMark: Node.Keyword.Question = Node.Keyword.Question(), supplement: NodeSupplement = NodeSupplement()): Node.Type.NullableType","ktast.builder.nullableType"]},{"name":"fun objectDeclaration(modifiers: List<Node.Modifier> = listOf(), declarationKeyword: Node.Keyword.Object = Node.Keyword.Object(), name: Node.Expression.NameExpression? = null, parents: List<Node.Declaration.ClassOrObject.ClassParent> = listOf(), body: Node.Declaration.ClassOrObject.ClassBody? = null, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ObjectDeclaration","description":"ktast.builder.objectDeclaration","location":"ast/ktast.builder/object-declaration.html","searchKeys":["objectDeclaration","fun objectDeclaration(modifiers: List<Node.Modifier> = listOf(), declarationKeyword: Node.Keyword.Object = Node.Keyword.Object(), name: Node.Expression.NameExpression? = null, parents: List<Node.Declaration.ClassOrObject.ClassParent> = listOf(), body: Node.Declaration.ClassOrObject.ClassBody? = null, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ObjectDeclaration","ktast.builder.objectDeclaration"]},{"name":"fun objectLiteralExpression(declaration: Node.Declaration.ObjectDeclaration, supplement: NodeSupplement = NodeSupplement()): Node.Expression.ObjectLiteralExpression","description":"ktast.builder.objectLiteralExpression","location":"ast/ktast.builder/object-literal-expression.html","searchKeys":["objectLiteralExpression","fun objectLiteralExpression(declaration: Node.Declaration.ObjectDeclaration, supplement: NodeSupplement = NodeSupplement()): Node.Expression.ObjectLiteralExpression","ktast.builder.objectLiteralExpression"]},{"name":"fun packageDirective(names: List<Node.Expression.NameExpression> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.PackageDirective","description":"ktast.builder.packageDirective","location":"ast/ktast.builder/package-directive.html","searchKeys":["packageDirective","fun packageDirective(names: List<Node.Expression.NameExpression> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.PackageDirective","ktast.builder.packageDirective"]},{"name":"fun parenthesizedExpression(innerExpression: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.Expression.ParenthesizedExpression","description":"ktast.builder.parenthesizedExpression","location":"ast/ktast.builder/parenthesized-expression.html","searchKeys":["parenthesizedExpression","fun parenthesizedExpression(innerExpression: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.Expression.ParenthesizedExpression","ktast.builder.parenthesizedExpression"]},{"name":"fun parenthesizedType(modifiers: List<Node.Modifier> = listOf(), lPar: Node.Keyword.LPar = Node.Keyword.LPar(), innerType: Node.Type, rPar: Node.Keyword.RPar = Node.Keyword.RPar(), supplement: NodeSupplement = NodeSupplement()): Node.Type.ParenthesizedType","description":"ktast.builder.parenthesizedType","location":"ast/ktast.builder/parenthesized-type.html","searchKeys":["parenthesizedType","fun parenthesizedType(modifiers: List<Node.Modifier> = listOf(), lPar: Node.Keyword.LPar = Node.Keyword.LPar(), innerType: Node.Type, rPar: Node.Keyword.RPar = Node.Keyword.RPar(), supplement: NodeSupplement = NodeSupplement()): Node.Type.ParenthesizedType","ktast.builder.parenthesizedType"]},{"name":"fun postfixUnaryExpression(expression: Node.Expression, operator: Node.Expression.UnaryExpression.UnaryOperator, supplement: NodeSupplement = NodeSupplement()): Node.Expression.PostfixUnaryExpression","description":"ktast.builder.postfixUnaryExpression","location":"ast/ktast.builder/postfix-unary-expression.html","searchKeys":["postfixUnaryExpression","fun postfixUnaryExpression(expression: Node.Expression, operator: Node.Expression.UnaryExpression.UnaryOperator, supplement: NodeSupplement = NodeSupplement()): Node.Expression.PostfixUnaryExpression","ktast.builder.postfixUnaryExpression"]},{"name":"fun prefixUnaryExpression(operator: Node.Expression.UnaryExpression.UnaryOperator, expression: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.Expression.PrefixUnaryExpression","description":"ktast.builder.prefixUnaryExpression","location":"ast/ktast.builder/prefix-unary-expression.html","searchKeys":["prefixUnaryExpression","fun prefixUnaryExpression(operator: Node.Expression.UnaryExpression.UnaryOperator, expression: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.Expression.PrefixUnaryExpression","ktast.builder.prefixUnaryExpression"]},{"name":"fun primaryConstructor(modifiers: List<Node.Modifier> = listOf(), constructorKeyword: Node.Keyword.Constructor? = null, lPar: Node.Keyword.LPar = Node.Keyword.LPar(), parameters: List<Node.FunctionParameter> = listOf(), rPar: Node.Keyword.RPar = Node.Keyword.RPar(), supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ClassDeclaration.PrimaryConstructor","description":"ktast.builder.primaryConstructor","location":"ast/ktast.builder/primary-constructor.html","searchKeys":["primaryConstructor","fun primaryConstructor(modifiers: List<Node.Modifier> = listOf(), constructorKeyword: Node.Keyword.Constructor? = null, lPar: Node.Keyword.LPar = Node.Keyword.LPar(), parameters: List<Node.FunctionParameter> = listOf(), rPar: Node.Keyword.RPar = Node.Keyword.RPar(), supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ClassDeclaration.PrimaryConstructor","ktast.builder.primaryConstructor"]},{"name":"fun propertyDeclaration(modifiers: List<Node.Modifier> = listOf(), valOrVarKeyword: Node.Keyword.ValOrVarKeyword, lAngle: Node.Keyword.Less? = null, typeParameters: List<Node.TypeParameter> = listOf(), rAngle: Node.Keyword.Greater? = null, receiverType: Node.Type? = null, lPar: Node.Keyword.LPar? = null, variables: List<Node.Variable>, rPar: Node.Keyword.RPar? = null, typeConstraintSet: Node.PostModifier.TypeConstraintSet? = null, initializerExpression: Node.Expression? = null, delegateExpression: Node.Expression? = null, accessors: List<Node.Declaration.PropertyDeclaration.Accessor> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.Declaration.PropertyDeclaration","description":"ktast.builder.propertyDeclaration","location":"ast/ktast.builder/property-declaration.html","searchKeys":["propertyDeclaration","fun propertyDeclaration(modifiers: List<Node.Modifier> = listOf(), valOrVarKeyword: Node.Keyword.ValOrVarKeyword, lAngle: Node.Keyword.Less? = null, typeParameters: List<Node.TypeParameter> = listOf(), rAngle: Node.Keyword.Greater? = null, receiverType: Node.Type? = null, lPar: Node.Keyword.LPar? = null, variables: List<Node.Variable>, rPar: Node.Keyword.RPar? = null, typeConstraintSet: Node.PostModifier.TypeConstraintSet? = null, initializerExpression: Node.Expression? = null, delegateExpression: Node.Expression? = null, accessors: List<Node.Declaration.PropertyDeclaration.Accessor> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.Declaration.PropertyDeclaration","ktast.builder.propertyDeclaration"]},{"name":"fun propertyDeclaration(modifiers: List<Node.Modifier> = listOf(), valOrVarKeyword: Node.Keyword.ValOrVarKeyword, lAngle: Node.Keyword.Less? = null, typeParameters: List<Node.TypeParameter> = listOf(), rAngle: Node.Keyword.Greater? = null, receiverType: Node.Type? = null, variable: Node.Variable, typeConstraintSet: Node.PostModifier.TypeConstraintSet? = null, initializerExpression: Node.Expression? = null, delegateExpression: Node.Expression? = null, accessors: List<Node.Declaration.PropertyDeclaration.Accessor> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.Declaration.PropertyDeclaration","description":"ktast.builder.propertyDeclaration","location":"ast/ktast.builder/property-declaration.html","searchKeys":["propertyDeclaration","fun propertyDeclaration(modifiers: List<Node.Modifier> = listOf(), valOrVarKeyword: Node.Keyword.ValOrVarKeyword, lAngle: Node.Keyword.Less? = null, typeParameters: List<Node.TypeParameter> = listOf(), rAngle: Node.Keyword.Greater? = null, receiverType: Node.Type? = null, variable: Node.Variable, typeConstraintSet: Node.PostModifier.TypeConstraintSet? = null, initializerExpression: Node.Expression? = null, delegateExpression: Node.Expression? = null, accessors: List<Node.Declaration.PropertyDeclaration.Accessor> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.Declaration.PropertyDeclaration","ktast.builder.propertyDeclaration"]},{"name":"fun rangeWhenCondition(operator: Node.Expression.WhenExpression.WhenConditionRangeOperator, expression: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.Expression.WhenExpression.RangeWhenCondition","description":"ktast.builder.rangeWhenCondition","location":"ast/ktast.builder/range-when-condition.html","searchKeys":["rangeWhenCondition","fun rangeWhenCondition(operator: Node.Expression.WhenExpression.WhenConditionRangeOperator, expression: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.Expression.WhenExpression.RangeWhenCondition","ktast.builder.rangeWhenCondition"]},{"name":"fun realLiteralExpression(text: String, supplement: NodeSupplement = NodeSupplement()): Node.Expression.RealLiteralExpression","description":"ktast.builder.realLiteralExpression","location":"ast/ktast.builder/real-literal-expression.html","searchKeys":["realLiteralExpression","fun realLiteralExpression(text: String, supplement: NodeSupplement = NodeSupplement()): Node.Expression.RealLiteralExpression","ktast.builder.realLiteralExpression"]},{"name":"fun returnExpression(label: Node.Expression.NameExpression? = null, expression: Node.Expression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Expression.ReturnExpression","description":"ktast.builder.returnExpression","location":"ast/ktast.builder/return-expression.html","searchKeys":["returnExpression","fun returnExpression(label: Node.Expression.NameExpression? = null, expression: Node.Expression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Expression.ReturnExpression","ktast.builder.returnExpression"]},{"name":"fun scriptBody(declarations: List<Node.Declaration> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ScriptBody","description":"ktast.builder.scriptBody","location":"ast/ktast.builder/script-body.html","searchKeys":["scriptBody","fun scriptBody(declarations: List<Node.Declaration> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ScriptBody","ktast.builder.scriptBody"]},{"name":"fun scriptInitializer(body: Node.Statement, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ScriptInitializer","description":"ktast.builder.scriptInitializer","location":"ast/ktast.builder/script-initializer.html","searchKeys":["scriptInitializer","fun scriptInitializer(body: Node.Statement, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ScriptInitializer","ktast.builder.scriptInitializer"]},{"name":"fun secondaryConstructor(modifiers: List<Node.Modifier> = listOf(), constructorKeyword: Node.Keyword.Constructor = Node.Keyword.Constructor(), lPar: Node.Keyword.LPar = Node.Keyword.LPar(), parameters: List<Node.FunctionParameter> = listOf(), rPar: Node.Keyword.RPar = Node.Keyword.RPar(), delegationCall: Node.Expression.CallExpression? = null, block: Node.Expression.BlockExpression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ClassOrObject.ClassBody.SecondaryConstructor","description":"ktast.builder.secondaryConstructor","location":"ast/ktast.builder/secondary-constructor.html","searchKeys":["secondaryConstructor","fun secondaryConstructor(modifiers: List<Node.Modifier> = listOf(), constructorKeyword: Node.Keyword.Constructor = Node.Keyword.Constructor(), lPar: Node.Keyword.LPar = Node.Keyword.LPar(), parameters: List<Node.FunctionParameter> = listOf(), rPar: Node.Keyword.RPar = Node.Keyword.RPar(), delegationCall: Node.Expression.CallExpression? = null, block: Node.Expression.BlockExpression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ClassOrObject.ClassBody.SecondaryConstructor","ktast.builder.secondaryConstructor"]},{"name":"fun semicolon(supplement: NodeSupplement = NodeSupplement()): Node.Extra.Semicolon","description":"ktast.builder.semicolon","location":"ast/ktast.builder/semicolon.html","searchKeys":["semicolon","fun semicolon(supplement: NodeSupplement = NodeSupplement()): Node.Extra.Semicolon","ktast.builder.semicolon"]},{"name":"fun setter(modifiers: List<Node.Modifier> = listOf(), lPar: Node.Keyword.LPar? = null, parameter: Node.FunctionParameter? = null, rPar: Node.Keyword.RPar? = null, postModifiers: List<Node.PostModifier> = listOf(), body: Node.Expression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.PropertyDeclaration.Setter","description":"ktast.builder.setter","location":"ast/ktast.builder/setter.html","searchKeys":["setter","fun setter(modifiers: List<Node.Modifier> = listOf(), lPar: Node.Keyword.LPar? = null, parameter: Node.FunctionParameter? = null, rPar: Node.Keyword.RPar? = null, postModifiers: List<Node.PostModifier> = listOf(), body: Node.Expression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.PropertyDeclaration.Setter","ktast.builder.setter"]},{"name":"fun simpleType(modifiers: List<Node.Modifier> = listOf(), qualifiers: List<Node.Type.SimpleType.SimpleTypeQualifier> = listOf(), name: Node.Expression.NameExpression, lAngle: Node.Keyword.Less? = null, typeArguments: List<Node.TypeArgument> = listOf(), rAngle: Node.Keyword.Greater? = null, supplement: NodeSupplement = NodeSupplement()): Node.Type.SimpleType","description":"ktast.builder.simpleType","location":"ast/ktast.builder/simple-type.html","searchKeys":["simpleType","fun simpleType(modifiers: List<Node.Modifier> = listOf(), qualifiers: List<Node.Type.SimpleType.SimpleTypeQualifier> = listOf(), name: Node.Expression.NameExpression, lAngle: Node.Keyword.Less? = null, typeArguments: List<Node.TypeArgument> = listOf(), rAngle: Node.Keyword.Greater? = null, supplement: NodeSupplement = NodeSupplement()): Node.Type.SimpleType","ktast.builder.simpleType"]},{"name":"fun simpleTypeQualifier(name: Node.Expression.NameExpression, lAngle: Node.Keyword.Less? = null, typeArguments: List<Node.TypeArgument> = listOf(), rAngle: Node.Keyword.Greater? = null, supplement: NodeSupplement = NodeSupplement()): Node.Type.SimpleType.SimpleTypeQualifier","description":"ktast.builder.simpleTypeQualifier","location":"ast/ktast.builder/simple-type-qualifier.html","searchKeys":["simpleTypeQualifier","fun simpleTypeQualifier(name: Node.Expression.NameExpression, lAngle: Node.Keyword.Less? = null, typeArguments: List<Node.TypeArgument> = listOf(), rAngle: Node.Keyword.Greater? = null, supplement: NodeSupplement = NodeSupplement()): Node.Type.SimpleType.SimpleTypeQualifier","ktast.builder.simpleTypeQualifier"]},{"name":"fun stringLiteralExpression(entries: List<Node.Expression.StringLiteralExpression.StringEntry> = listOf(), raw: Boolean = false, supplement: NodeSupplement = NodeSupplement()): Node.Expression.StringLiteralExpression","description":"ktast.builder.stringLiteralExpression","location":"ast/ktast.builder/string-literal-expression.html","searchKeys":["stringLiteralExpression","fun stringLiteralExpression(entries: List<Node.Expression.StringLiteralExpression.StringEntry> = listOf(), raw: Boolean = false, supplement: NodeSupplement = NodeSupplement()): Node.Expression.StringLiteralExpression","ktast.builder.stringLiteralExpression"]},{"name":"fun superExpression(typeArgument: Node.TypeArgument? = null, label: Node.Expression.NameExpression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Expression.SuperExpression","description":"ktast.builder.superExpression","location":"ast/ktast.builder/super-expression.html","searchKeys":["superExpression","fun superExpression(typeArgument: Node.TypeArgument? = null, label: Node.Expression.NameExpression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Expression.SuperExpression","ktast.builder.superExpression"]},{"name":"fun templateStringEntry(expression: Node.Expression, short: Boolean = false, supplement: NodeSupplement = NodeSupplement()): Node.Expression.StringLiteralExpression.TemplateStringEntry","description":"ktast.builder.templateStringEntry","location":"ast/ktast.builder/template-string-entry.html","searchKeys":["templateStringEntry","fun templateStringEntry(expression: Node.Expression, short: Boolean = false, supplement: NodeSupplement = NodeSupplement()): Node.Expression.StringLiteralExpression.TemplateStringEntry","ktast.builder.templateStringEntry"]},{"name":"fun thisExpression(label: Node.Expression.NameExpression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Expression.ThisExpression","description":"ktast.builder.thisExpression","location":"ast/ktast.builder/this-expression.html","searchKeys":["thisExpression","fun thisExpression(label: Node.Expression.NameExpression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Expression.ThisExpression","ktast.builder.thisExpression"]},{"name":"fun throwExpression(expression: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.Expression.ThrowExpression","description":"ktast.builder.throwExpression","location":"ast/ktast.builder/throw-expression.html","searchKeys":["throwExpression","fun throwExpression(expression: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.Expression.ThrowExpression","ktast.builder.throwExpression"]},{"name":"fun trailingComma(supplement: NodeSupplement = NodeSupplement()): Node.Extra.TrailingComma","description":"ktast.builder.trailingComma","location":"ast/ktast.builder/trailing-comma.html","searchKeys":["trailingComma","fun trailingComma(supplement: NodeSupplement = NodeSupplement()): Node.Extra.TrailingComma","ktast.builder.trailingComma"]},{"name":"fun traverse(rootNode: Node)","description":"ktast.ast.Visitor.traverse","location":"ast/ktast.ast/-visitor/traverse.html","searchKeys":["traverse","fun traverse(rootNode: Node)","ktast.ast.Visitor.traverse"]},{"name":"fun traverse(rootNode: Node, callback: (path: NodePath<*>) -> Unit)","description":"ktast.ast.Visitor.Companion.traverse","location":"ast/ktast.ast/-visitor/-companion/traverse.html","searchKeys":["traverse","fun traverse(rootNode: Node, callback: (path: NodePath<*>) -> Unit)","ktast.ast.Visitor.Companion.traverse"]},{"name":"fun tryExpression(block: Node.Expression.BlockExpression, catchClauses: List<Node.Expression.TryExpression.CatchClause> = listOf(), finallyBlock: Node.Expression.BlockExpression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Expression.TryExpression","description":"ktast.builder.tryExpression","location":"ast/ktast.builder/try-expression.html","searchKeys":["tryExpression","fun tryExpression(block: Node.Expression.BlockExpression, catchClauses: List<Node.Expression.TryExpression.CatchClause> = listOf(), finallyBlock: Node.Expression.BlockExpression? = null, supplement: NodeSupplement = NodeSupplement()): Node.Expression.TryExpression","ktast.builder.tryExpression"]},{"name":"fun typeAliasDeclaration(modifiers: List<Node.Modifier> = listOf(), name: Node.Expression.NameExpression, lAngle: Node.Keyword.Less? = null, typeParameters: List<Node.TypeParameter> = listOf(), rAngle: Node.Keyword.Greater? = null, type: Node.Type, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.TypeAliasDeclaration","description":"ktast.builder.typeAliasDeclaration","location":"ast/ktast.builder/type-alias-declaration.html","searchKeys":["typeAliasDeclaration","fun typeAliasDeclaration(modifiers: List<Node.Modifier> = listOf(), name: Node.Expression.NameExpression, lAngle: Node.Keyword.Less? = null, typeParameters: List<Node.TypeParameter> = listOf(), rAngle: Node.Keyword.Greater? = null, type: Node.Type, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.TypeAliasDeclaration","ktast.builder.typeAliasDeclaration"]},{"name":"fun typeArgument(modifiers: List<Node.Modifier> = listOf(), type: Node.Type, supplement: NodeSupplement = NodeSupplement()): Node.TypeArgument","description":"ktast.builder.typeArgument","location":"ast/ktast.builder/type-argument.html","searchKeys":["typeArgument","fun typeArgument(modifiers: List<Node.Modifier> = listOf(), type: Node.Type, supplement: NodeSupplement = NodeSupplement()): Node.TypeArgument","ktast.builder.typeArgument"]},{"name":"fun typeClassParent(type: Node.Type, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ClassOrObject.TypeClassParent","description":"ktast.builder.typeClassParent","location":"ast/ktast.builder/type-class-parent.html","searchKeys":["typeClassParent","fun typeClassParent(type: Node.Type, supplement: NodeSupplement = NodeSupplement()): Node.Declaration.ClassOrObject.TypeClassParent","ktast.builder.typeClassParent"]},{"name":"fun typeConstraint(annotationSets: List<Node.Modifier.AnnotationSet> = listOf(), name: Node.Expression.NameExpression, type: Node.Type, supplement: NodeSupplement = NodeSupplement()): Node.PostModifier.TypeConstraintSet.TypeConstraint","description":"ktast.builder.typeConstraint","location":"ast/ktast.builder/type-constraint.html","searchKeys":["typeConstraint","fun typeConstraint(annotationSets: List<Node.Modifier.AnnotationSet> = listOf(), name: Node.Expression.NameExpression, type: Node.Type, supplement: NodeSupplement = NodeSupplement()): Node.PostModifier.TypeConstraintSet.TypeConstraint","ktast.builder.typeConstraint"]},{"name":"fun typeConstraintSet(constraints: List<Node.PostModifier.TypeConstraintSet.TypeConstraint> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.PostModifier.TypeConstraintSet","description":"ktast.builder.typeConstraintSet","location":"ast/ktast.builder/type-constraint-set.html","searchKeys":["typeConstraintSet","fun typeConstraintSet(constraints: List<Node.PostModifier.TypeConstraintSet.TypeConstraint> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.PostModifier.TypeConstraintSet","ktast.builder.typeConstraintSet"]},{"name":"fun typeParameter(modifiers: List<Node.Modifier> = listOf(), name: Node.Expression.NameExpression, type: Node.Type? = null, supplement: NodeSupplement = NodeSupplement()): Node.TypeParameter","description":"ktast.builder.typeParameter","location":"ast/ktast.builder/type-parameter.html","searchKeys":["typeParameter","fun typeParameter(modifiers: List<Node.Modifier> = listOf(), name: Node.Expression.NameExpression, type: Node.Type? = null, supplement: NodeSupplement = NodeSupplement()): Node.TypeParameter","ktast.builder.typeParameter"]},{"name":"fun typeWhenCondition(operator: Node.Expression.WhenExpression.WhenConditionTypeOperator, type: Node.Type, supplement: NodeSupplement = NodeSupplement()): Node.Expression.WhenExpression.TypeWhenCondition","description":"ktast.builder.typeWhenCondition","location":"ast/ktast.builder/type-when-condition.html","searchKeys":["typeWhenCondition","fun typeWhenCondition(operator: Node.Expression.WhenExpression.WhenConditionTypeOperator, type: Node.Type, supplement: NodeSupplement = NodeSupplement()): Node.Expression.WhenExpression.TypeWhenCondition","ktast.builder.typeWhenCondition"]},{"name":"fun valueArgument(name: Node.Expression.NameExpression? = null, spreadOperator: Node.Keyword.Asterisk? = null, expression: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.ValueArgument","description":"ktast.builder.valueArgument","location":"ast/ktast.builder/value-argument.html","searchKeys":["valueArgument","fun valueArgument(name: Node.Expression.NameExpression? = null, spreadOperator: Node.Keyword.Asterisk? = null, expression: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.ValueArgument","ktast.builder.valueArgument"]},{"name":"fun variable(annotationSets: List<Node.Modifier.AnnotationSet> = listOf(), name: Node.Expression.NameExpression, type: Node.Type? = null, supplement: NodeSupplement = NodeSupplement()): Node.Variable","description":"ktast.builder.variable","location":"ast/ktast.builder/variable.html","searchKeys":["variable","fun variable(annotationSets: List<Node.Modifier.AnnotationSet> = listOf(), name: Node.Expression.NameExpression, type: Node.Type? = null, supplement: NodeSupplement = NodeSupplement()): Node.Variable","ktast.builder.variable"]},{"name":"fun whenExpression(whenKeyword: Node.Keyword.When = Node.Keyword.When(), subject: Node.Expression.WhenExpression.WhenSubject? = null, branches: List<Node.Expression.WhenExpression.WhenBranch> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.Expression.WhenExpression","description":"ktast.builder.whenExpression","location":"ast/ktast.builder/when-expression.html","searchKeys":["whenExpression","fun whenExpression(whenKeyword: Node.Keyword.When = Node.Keyword.When(), subject: Node.Expression.WhenExpression.WhenSubject? = null, branches: List<Node.Expression.WhenExpression.WhenBranch> = listOf(), supplement: NodeSupplement = NodeSupplement()): Node.Expression.WhenExpression","ktast.builder.whenExpression"]},{"name":"fun whenSubject(lPar: Node.Keyword.LPar = Node.Keyword.LPar(), annotationSets: List<Node.Modifier.AnnotationSet> = listOf(), variable: Node.Variable? = null, expression: Node.Expression, rPar: Node.Keyword.RPar = Node.Keyword.RPar(), supplement: NodeSupplement = NodeSupplement()): Node.Expression.WhenExpression.WhenSubject","description":"ktast.builder.whenSubject","location":"ast/ktast.builder/when-subject.html","searchKeys":["whenSubject","fun whenSubject(lPar: Node.Keyword.LPar = Node.Keyword.LPar(), annotationSets: List<Node.Modifier.AnnotationSet> = listOf(), variable: Node.Variable? = null, expression: Node.Expression, rPar: Node.Keyword.RPar = Node.Keyword.RPar(), supplement: NodeSupplement = NodeSupplement()): Node.Expression.WhenExpression.WhenSubject","ktast.builder.whenSubject"]},{"name":"fun whileStatement(lPar: Node.Keyword.LPar = Node.Keyword.LPar(), condition: Node.Expression, rPar: Node.Keyword.RPar = Node.Keyword.RPar(), body: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.Statement.WhileStatement","description":"ktast.builder.whileStatement","location":"ast/ktast.builder/while-statement.html","searchKeys":["whileStatement","fun whileStatement(lPar: Node.Keyword.LPar = Node.Keyword.LPar(), condition: Node.Expression, rPar: Node.Keyword.RPar = Node.Keyword.RPar(), body: Node.Expression, supplement: NodeSupplement = NodeSupplement()): Node.Statement.WhileStatement","ktast.builder.whileStatement"]},{"name":"fun whitespace(text: String, supplement: NodeSupplement = NodeSupplement()): Node.Extra.Whitespace","description":"ktast.builder.whitespace","location":"ast/ktast.builder/whitespace.html","searchKeys":["whitespace","fun whitespace(text: String, supplement: NodeSupplement = NodeSupplement()): Node.Extra.Whitespace","ktast.builder.whitespace"]},{"name":"fun write(rootNode: Node)","description":"ktast.ast.Writer.write","location":"ast/ktast.ast/-writer/write.html","searchKeys":["write","fun write(rootNode: Node)","ktast.ast.Writer.write"]},{"name":"fun write(rootNode: Node, withExtras: Boolean = true): String","description":"ktast.ast.Writer.Companion.write","location":"ast/ktast.ast/-writer/-companion/write.html","searchKeys":["write","fun write(rootNode: Node, withExtras: Boolean = true): String","ktast.ast.Writer.Companion.write"]},{"name":"interface WithAnnotationSets","description":"ktast.ast.Node.WithAnnotationSets","location":"ast/ktast.ast/-node/-with-annotation-sets/index.html","searchKeys":["WithAnnotationSets","interface WithAnnotationSets","ktast.ast.Node.WithAnnotationSets"]},{"name":"interface WithDeclarations","description":"ktast.ast.Node.WithDeclarations","location":"ast/ktast.ast/-node/-with-declarations/index.html","searchKeys":["WithDeclarations","interface WithDeclarations","ktast.ast.Node.WithDeclarations"]},{"name":"interface WithFunctionParameters","description":"ktast.ast.Node.WithFunctionParameters","location":"ast/ktast.ast/-node/-with-function-parameters/index.html","searchKeys":["WithFunctionParameters","interface WithFunctionParameters","ktast.ast.Node.WithFunctionParameters"]},{"name":"interface WithLabel","description":"ktast.ast.Node.Expression.WithLabel","location":"ast/ktast.ast/-node/-expression/-with-label/index.html","searchKeys":["WithLabel","interface WithLabel","ktast.ast.Node.Expression.WithLabel"]},{"name":"interface WithModifiers : Node.WithAnnotationSets","description":"ktast.ast.Node.WithModifiers","location":"ast/ktast.ast/-node/-with-modifiers/index.html","searchKeys":["WithModifiers","interface WithModifiers : Node.WithAnnotationSets","ktast.ast.Node.WithModifiers"]},{"name":"interface WithPostModifiers","description":"ktast.ast.Node.WithPostModifiers","location":"ast/ktast.ast/-node/-with-post-modifiers/index.html","searchKeys":["WithPostModifiers","interface WithPostModifiers","ktast.ast.Node.WithPostModifiers"]},{"name":"interface WithStatements","description":"ktast.ast.Node.WithStatements","location":"ast/ktast.ast/-node/-with-statements/index.html","searchKeys":["WithStatements","interface WithStatements","ktast.ast.Node.WithStatements"]},{"name":"interface WithTypeArguments","description":"ktast.ast.Node.WithTypeArguments","location":"ast/ktast.ast/-node/-with-type-arguments/index.html","searchKeys":["WithTypeArguments","interface WithTypeArguments","ktast.ast.Node.WithTypeArguments"]},{"name":"interface WithTypeParameters","description":"ktast.ast.Node.WithTypeParameters","location":"ast/ktast.ast/-node/-with-type-parameters/index.html","searchKeys":["WithTypeParameters","interface WithTypeParameters","ktast.ast.Node.WithTypeParameters"]},{"name":"interface WithValueArguments","description":"ktast.ast.Node.WithValueArguments","location":"ast/ktast.ast/-node/-with-value-arguments/index.html","searchKeys":["WithValueArguments","interface WithValueArguments","ktast.ast.Node.WithValueArguments"]},{"name":"object Companion","description":"ktast.ast.Dumper.Companion","location":"ast/ktast.ast/-dumper/-companion/index.html","searchKeys":["Companion","object Companion","ktast.ast.Dumper.Companion"]},{"name":"object Companion","description":"ktast.ast.MutableVisitor.Companion","location":"ast/ktast.ast/-mutable-visitor/-companion/index.html","searchKeys":["Companion","object Companion","ktast.ast.MutableVisitor.Companion"]},{"name":"object Companion","description":"ktast.ast.NodePath.Companion","location":"ast/ktast.ast/-node-path/-companion/index.html","searchKeys":["Companion","object Companion","ktast.ast.NodePath.Companion"]},{"name":"object Companion","description":"ktast.ast.Visitor.Companion","location":"ast/ktast.ast/-visitor/-companion/index.html","searchKeys":["Companion","object Companion","ktast.ast.Visitor.Companion"]},{"name":"object Companion","description":"ktast.ast.Writer.Companion","location":"ast/ktast.ast/-writer/-companion/index.html","searchKeys":["Companion","object Companion","ktast.ast.Writer.Companion"]},{"name":"open class MutableVisitor","description":"ktast.ast.MutableVisitor","location":"ast/ktast.ast/-mutable-visitor/index.html","searchKeys":["MutableVisitor","open class MutableVisitor","ktast.ast.MutableVisitor"]},{"name":"open class Visitor","description":"ktast.ast.Visitor","location":"ast/ktast.ast/-visitor/index.html","searchKeys":["Visitor","open class Visitor","ktast.ast.Visitor"]},{"name":"open class Writer(appendable: <Error class: unknown class> = StringBuilder(), withExtras: Boolean = true) : Visitor","description":"ktast.ast.Writer","location":"ast/ktast.ast/-writer/index.html","searchKeys":["Writer","open class Writer(appendable: <Error class: unknown class> = StringBuilder(), withExtras: Boolean = true) : Visitor","ktast.ast.Writer"]},{"name":"open fun lhsAsType(): Node.Type?","description":"ktast.ast.Node.Expression.DoubleColonExpression.lhsAsType","location":"ast/ktast.ast/-node/-expression/-double-colon-expression/lhs-as-type.html","searchKeys":["lhsAsType","open fun lhsAsType(): Node.Type?","ktast.ast.Node.Expression.DoubleColonExpression.lhsAsType"]},{"name":"open override val annotationSets: List<Node.Modifier.AnnotationSet>","description":"ktast.ast.Node.Expression.AnnotatedExpression.annotationSets","location":"ast/ktast.ast/-node/-expression/-annotated-expression/annotation-sets.html","searchKeys":["annotationSets","open override val annotationSets: List<Node.Modifier.AnnotationSet>","ktast.ast.Node.Expression.AnnotatedExpression.annotationSets"]},{"name":"open override val annotationSets: List<Node.Modifier.AnnotationSet>","description":"ktast.ast.Node.Expression.WhenExpression.WhenSubject.annotationSets","location":"ast/ktast.ast/-node/-expression/-when-expression/-when-subject/annotation-sets.html","searchKeys":["annotationSets","open override val annotationSets: List<Node.Modifier.AnnotationSet>","ktast.ast.Node.Expression.WhenExpression.WhenSubject.annotationSets"]},{"name":"open override val annotationSets: List<Node.Modifier.AnnotationSet>","description":"ktast.ast.Node.PostModifier.TypeConstraintSet.TypeConstraint.annotationSets","location":"ast/ktast.ast/-node/-post-modifier/-type-constraint-set/-type-constraint/annotation-sets.html","searchKeys":["annotationSets","open override val annotationSets: List<Node.Modifier.AnnotationSet>","ktast.ast.Node.PostModifier.TypeConstraintSet.TypeConstraint.annotationSets"]},{"name":"open override val annotationSets: List<Node.Modifier.AnnotationSet>","description":"ktast.ast.Node.Variable.annotationSets","location":"ast/ktast.ast/-node/-variable/annotation-sets.html","searchKeys":["annotationSets","open override val annotationSets: List<Node.Modifier.AnnotationSet>","ktast.ast.Node.Variable.annotationSets"]},{"name":"open override val annotationSets: List<Node.Modifier.AnnotationSet>","description":"ktast.ast.Node.WithModifiers.annotationSets","location":"ast/ktast.ast/-node/-with-modifiers/annotation-sets.html","searchKeys":["annotationSets","open override val annotationSets: List<Node.Modifier.AnnotationSet>","ktast.ast.Node.WithModifiers.annotationSets"]},{"name":"open override val arguments: List<Node.ValueArgument>","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.EnumEntry.arguments","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-enum-entry/arguments.html","searchKeys":["arguments","open override val arguments: List<Node.ValueArgument>","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.EnumEntry.arguments"]},{"name":"open override val arguments: List<Node.ValueArgument>","description":"ktast.ast.Node.Declaration.ClassOrObject.ConstructorClassParent.arguments","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-constructor-class-parent/arguments.html","searchKeys":["arguments","open override val arguments: List<Node.ValueArgument>","ktast.ast.Node.Declaration.ClassOrObject.ConstructorClassParent.arguments"]},{"name":"open override val arguments: List<Node.ValueArgument>","description":"ktast.ast.Node.Declaration.ClassOrObject.DelegationClassParent.arguments","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-delegation-class-parent/arguments.html","searchKeys":["arguments","open override val arguments: List<Node.ValueArgument>","ktast.ast.Node.Declaration.ClassOrObject.DelegationClassParent.arguments"]},{"name":"open override val arguments: List<Node.ValueArgument>","description":"ktast.ast.Node.Declaration.ClassOrObject.TypeClassParent.arguments","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-type-class-parent/arguments.html","searchKeys":["arguments","open override val arguments: List<Node.ValueArgument>","ktast.ast.Node.Declaration.ClassOrObject.TypeClassParent.arguments"]},{"name":"open override val arguments: List<Node.ValueArgument>","description":"ktast.ast.Node.Expression.CallExpression.arguments","location":"ast/ktast.ast/-node/-expression/-call-expression/arguments.html","searchKeys":["arguments","open override val arguments: List<Node.ValueArgument>","ktast.ast.Node.Expression.CallExpression.arguments"]},{"name":"open override val arguments: List<Node.ValueArgument>","description":"ktast.ast.Node.Modifier.AnnotationSet.Annotation.arguments","location":"ast/ktast.ast/-node/-modifier/-annotation-set/-annotation/arguments.html","searchKeys":["arguments","open override val arguments: List<Node.ValueArgument>","ktast.ast.Node.Modifier.AnnotationSet.Annotation.arguments"]},{"name":"open override val arrow: Node.Keyword.Arrow","description":"ktast.ast.Node.Expression.WhenExpression.ConditionalWhenBranch.arrow","location":"ast/ktast.ast/-node/-expression/-when-expression/-conditional-when-branch/arrow.html","searchKeys":["arrow","open override val arrow: Node.Keyword.Arrow","ktast.ast.Node.Expression.WhenExpression.ConditionalWhenBranch.arrow"]},{"name":"open override val arrow: Node.Keyword.Arrow","description":"ktast.ast.Node.Expression.WhenExpression.ElseWhenBranch.arrow","location":"ast/ktast.ast/-node/-expression/-when-expression/-else-when-branch/arrow.html","searchKeys":["arrow","open override val arrow: Node.Keyword.Arrow","ktast.ast.Node.Expression.WhenExpression.ElseWhenBranch.arrow"]},{"name":"open override val body: Node.Declaration.ClassOrObject.ClassBody?","description":"ktast.ast.Node.Declaration.ClassDeclaration.body","location":"ast/ktast.ast/-node/-declaration/-class-declaration/body.html","searchKeys":["body","open override val body: Node.Declaration.ClassOrObject.ClassBody?","ktast.ast.Node.Declaration.ClassDeclaration.body"]},{"name":"open override val body: Node.Declaration.ClassOrObject.ClassBody?","description":"ktast.ast.Node.Declaration.ObjectDeclaration.body","location":"ast/ktast.ast/-node/-declaration/-object-declaration/body.html","searchKeys":["body","open override val body: Node.Declaration.ClassOrObject.ClassBody?","ktast.ast.Node.Declaration.ObjectDeclaration.body"]},{"name":"open override val body: Node.Expression","description":"ktast.ast.Node.Expression.WhenExpression.ConditionalWhenBranch.body","location":"ast/ktast.ast/-node/-expression/-when-expression/-conditional-when-branch/body.html","searchKeys":["body","open override val body: Node.Expression","ktast.ast.Node.Expression.WhenExpression.ConditionalWhenBranch.body"]},{"name":"open override val body: Node.Expression","description":"ktast.ast.Node.Expression.WhenExpression.ElseWhenBranch.body","location":"ast/ktast.ast/-node/-expression/-when-expression/-else-when-branch/body.html","searchKeys":["body","open override val body: Node.Expression","ktast.ast.Node.Expression.WhenExpression.ElseWhenBranch.body"]},{"name":"open override val body: Node.Expression","description":"ktast.ast.Node.Statement.DoWhileStatement.body","location":"ast/ktast.ast/-node/-statement/-do-while-statement/body.html","searchKeys":["body","open override val body: Node.Expression","ktast.ast.Node.Statement.DoWhileStatement.body"]},{"name":"open override val body: Node.Expression","description":"ktast.ast.Node.Statement.WhileStatement.body","location":"ast/ktast.ast/-node/-statement/-while-statement/body.html","searchKeys":["body","open override val body: Node.Expression","ktast.ast.Node.Statement.WhileStatement.body"]},{"name":"open override val body: Node.Expression?","description":"ktast.ast.Node.Declaration.PropertyDeclaration.Getter.body","location":"ast/ktast.ast/-node/-declaration/-property-declaration/-getter/body.html","searchKeys":["body","open override val body: Node.Expression?","ktast.ast.Node.Declaration.PropertyDeclaration.Getter.body"]},{"name":"open override val body: Node.Expression?","description":"ktast.ast.Node.Declaration.PropertyDeclaration.Setter.body","location":"ast/ktast.ast/-node/-declaration/-property-declaration/-setter/body.html","searchKeys":["body","open override val body: Node.Expression?","ktast.ast.Node.Declaration.PropertyDeclaration.Setter.body"]},{"name":"open override val condition: Node.Expression","description":"ktast.ast.Node.Statement.DoWhileStatement.condition","location":"ast/ktast.ast/-node/-statement/-do-while-statement/condition.html","searchKeys":["condition","open override val condition: Node.Expression","ktast.ast.Node.Statement.DoWhileStatement.condition"]},{"name":"open override val condition: Node.Expression","description":"ktast.ast.Node.Statement.WhileStatement.condition","location":"ast/ktast.ast/-node/-statement/-while-statement/condition.html","searchKeys":["condition","open override val condition: Node.Expression","ktast.ast.Node.Statement.WhileStatement.condition"]},{"name":"open override val conditions: <Error class: unknown class>","description":"ktast.ast.Node.Expression.WhenExpression.ElseWhenBranch.conditions","location":"ast/ktast.ast/-node/-expression/-when-expression/-else-when-branch/conditions.html","searchKeys":["conditions","open override val conditions: <Error class: unknown class>","ktast.ast.Node.Expression.WhenExpression.ElseWhenBranch.conditions"]},{"name":"open override val conditions: List<Node.Expression.WhenExpression.WhenCondition>","description":"ktast.ast.Node.Expression.WhenExpression.ConditionalWhenBranch.conditions","location":"ast/ktast.ast/-node/-expression/-when-expression/-conditional-when-branch/conditions.html","searchKeys":["conditions","open override val conditions: List<Node.Expression.WhenExpression.WhenCondition>","ktast.ast.Node.Expression.WhenExpression.ConditionalWhenBranch.conditions"]},{"name":"open override val declarationKeyword: Node.Declaration.ClassDeclaration.ClassOrInterfaceKeyword","description":"ktast.ast.Node.Declaration.ClassDeclaration.declarationKeyword","location":"ast/ktast.ast/-node/-declaration/-class-declaration/declaration-keyword.html","searchKeys":["declarationKeyword","open override val declarationKeyword: Node.Declaration.ClassDeclaration.ClassOrInterfaceKeyword","ktast.ast.Node.Declaration.ClassDeclaration.declarationKeyword"]},{"name":"open override val declarationKeyword: Node.Keyword.Object","description":"ktast.ast.Node.Declaration.ObjectDeclaration.declarationKeyword","location":"ast/ktast.ast/-node/-declaration/-object-declaration/declaration-keyword.html","searchKeys":["declarationKeyword","open override val declarationKeyword: Node.Keyword.Object","ktast.ast.Node.Declaration.ObjectDeclaration.declarationKeyword"]},{"name":"open override val declarations: List<Node.Declaration>","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.declarations","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/declarations.html","searchKeys":["declarations","open override val declarations: List<Node.Declaration>","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.declarations"]},{"name":"open override val declarations: List<Node.Declaration>","description":"ktast.ast.Node.Declaration.ScriptBody.declarations","location":"ast/ktast.ast/-node/-declaration/-script-body/declarations.html","searchKeys":["declarations","open override val declarations: List<Node.Declaration>","ktast.ast.Node.Declaration.ScriptBody.declarations"]},{"name":"open override val declarations: List<Node.Declaration>","description":"ktast.ast.Node.KotlinFile.declarations","location":"ast/ktast.ast/-node/-kotlin-file/declarations.html","searchKeys":["declarations","open override val declarations: List<Node.Declaration>","ktast.ast.Node.KotlinFile.declarations"]},{"name":"open override val expression: Node.Expression","description":"ktast.ast.Node.Declaration.ClassOrObject.DelegationClassParent.expression","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-delegation-class-parent/expression.html","searchKeys":["expression","open override val expression: Node.Expression","ktast.ast.Node.Declaration.ClassOrObject.DelegationClassParent.expression"]},{"name":"open override val expression: Node.Expression","description":"ktast.ast.Node.Expression.PostfixUnaryExpression.expression","location":"ast/ktast.ast/-node/-expression/-postfix-unary-expression/expression.html","searchKeys":["expression","open override val expression: Node.Expression","ktast.ast.Node.Expression.PostfixUnaryExpression.expression"]},{"name":"open override val expression: Node.Expression","description":"ktast.ast.Node.Expression.PrefixUnaryExpression.expression","location":"ast/ktast.ast/-node/-expression/-prefix-unary-expression/expression.html","searchKeys":["expression","open override val expression: Node.Expression","ktast.ast.Node.Expression.PrefixUnaryExpression.expression"]},{"name":"open override val expression: Node.Expression","description":"ktast.ast.Node.Expression.WhenExpression.ExpressionWhenCondition.expression","location":"ast/ktast.ast/-node/-expression/-when-expression/-expression-when-condition/expression.html","searchKeys":["expression","open override val expression: Node.Expression","ktast.ast.Node.Expression.WhenExpression.ExpressionWhenCondition.expression"]},{"name":"open override val expression: Node.Expression","description":"ktast.ast.Node.Expression.WhenExpression.RangeWhenCondition.expression","location":"ast/ktast.ast/-node/-expression/-when-expression/-range-when-condition/expression.html","searchKeys":["expression","open override val expression: Node.Expression","ktast.ast.Node.Expression.WhenExpression.RangeWhenCondition.expression"]},{"name":"open override val expression: Node.Expression? = null","description":"ktast.ast.Node.Declaration.ClassOrObject.ConstructorClassParent.expression","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-constructor-class-parent/expression.html","searchKeys":["expression","open override val expression: Node.Expression? = null","ktast.ast.Node.Declaration.ClassOrObject.ConstructorClassParent.expression"]},{"name":"open override val expression: Node.Expression? = null","description":"ktast.ast.Node.Declaration.ClassOrObject.TypeClassParent.expression","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-type-class-parent/expression.html","searchKeys":["expression","open override val expression: Node.Expression? = null","ktast.ast.Node.Declaration.ClassOrObject.TypeClassParent.expression"]},{"name":"open override val expression: Nothing? = null","description":"ktast.ast.Node.Expression.WhenExpression.TypeWhenCondition.expression","location":"ast/ktast.ast/-node/-expression/-when-expression/-type-when-condition/expression.html","searchKeys":["expression","open override val expression: Nothing? = null","ktast.ast.Node.Expression.WhenExpression.TypeWhenCondition.expression"]},{"name":"open override val lAngle: Node.Keyword.Less?","description":"ktast.ast.Node.Declaration.ClassDeclaration.lAngle","location":"ast/ktast.ast/-node/-declaration/-class-declaration/l-angle.html","searchKeys":["lAngle","open override val lAngle: Node.Keyword.Less?","ktast.ast.Node.Declaration.ClassDeclaration.lAngle"]},{"name":"open override val lAngle: Node.Keyword.Less?","description":"ktast.ast.Node.Declaration.FunctionDeclaration.lAngle","location":"ast/ktast.ast/-node/-declaration/-function-declaration/l-angle.html","searchKeys":["lAngle","open override val lAngle: Node.Keyword.Less?","ktast.ast.Node.Declaration.FunctionDeclaration.lAngle"]},{"name":"open override val lAngle: Node.Keyword.Less?","description":"ktast.ast.Node.Declaration.PropertyDeclaration.lAngle","location":"ast/ktast.ast/-node/-declaration/-property-declaration/l-angle.html","searchKeys":["lAngle","open override val lAngle: Node.Keyword.Less?","ktast.ast.Node.Declaration.PropertyDeclaration.lAngle"]},{"name":"open override val lAngle: Node.Keyword.Less?","description":"ktast.ast.Node.Declaration.TypeAliasDeclaration.lAngle","location":"ast/ktast.ast/-node/-declaration/-type-alias-declaration/l-angle.html","searchKeys":["lAngle","open override val lAngle: Node.Keyword.Less?","ktast.ast.Node.Declaration.TypeAliasDeclaration.lAngle"]},{"name":"open override val lAngle: Node.Keyword.Less?","description":"ktast.ast.Node.Expression.CallExpression.lAngle","location":"ast/ktast.ast/-node/-expression/-call-expression/l-angle.html","searchKeys":["lAngle","open override val lAngle: Node.Keyword.Less?","ktast.ast.Node.Expression.CallExpression.lAngle"]},{"name":"open override val lAngle: Node.Keyword.Less?","description":"ktast.ast.Node.Type.SimpleType.SimpleTypeQualifier.lAngle","location":"ast/ktast.ast/-node/-type/-simple-type/-simple-type-qualifier/l-angle.html","searchKeys":["lAngle","open override val lAngle: Node.Keyword.Less?","ktast.ast.Node.Type.SimpleType.SimpleTypeQualifier.lAngle"]},{"name":"open override val lAngle: Node.Keyword.Less?","description":"ktast.ast.Node.Type.SimpleType.lAngle","location":"ast/ktast.ast/-node/-type/-simple-type/l-angle.html","searchKeys":["lAngle","open override val lAngle: Node.Keyword.Less?","ktast.ast.Node.Type.SimpleType.lAngle"]},{"name":"open override val lPar: Node.Keyword.LPar","description":"ktast.ast.Node.Declaration.ClassDeclaration.PrimaryConstructor.lPar","location":"ast/ktast.ast/-node/-declaration/-class-declaration/-primary-constructor/l-par.html","searchKeys":["lPar","open override val lPar: Node.Keyword.LPar","ktast.ast.Node.Declaration.ClassDeclaration.PrimaryConstructor.lPar"]},{"name":"open override val lPar: Node.Keyword.LPar","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.SecondaryConstructor.lPar","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-secondary-constructor/l-par.html","searchKeys":["lPar","open override val lPar: Node.Keyword.LPar","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.SecondaryConstructor.lPar"]},{"name":"open override val lPar: Node.Keyword.LPar","description":"ktast.ast.Node.Declaration.ClassOrObject.ConstructorClassParent.lPar","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-constructor-class-parent/l-par.html","searchKeys":["lPar","open override val lPar: Node.Keyword.LPar","ktast.ast.Node.Declaration.ClassOrObject.ConstructorClassParent.lPar"]},{"name":"open override val lPar: Node.Keyword.LPar","description":"ktast.ast.Node.Declaration.FunctionDeclaration.lPar","location":"ast/ktast.ast/-node/-declaration/-function-declaration/l-par.html","searchKeys":["lPar","open override val lPar: Node.Keyword.LPar","ktast.ast.Node.Declaration.FunctionDeclaration.lPar"]},{"name":"open override val lPar: Node.Keyword.LPar","description":"ktast.ast.Node.Expression.TryExpression.CatchClause.lPar","location":"ast/ktast.ast/-node/-expression/-try-expression/-catch-clause/l-par.html","searchKeys":["lPar","open override val lPar: Node.Keyword.LPar","ktast.ast.Node.Expression.TryExpression.CatchClause.lPar"]},{"name":"open override val lPar: Node.Keyword.LPar","description":"ktast.ast.Node.Statement.DoWhileStatement.lPar","location":"ast/ktast.ast/-node/-statement/-do-while-statement/l-par.html","searchKeys":["lPar","open override val lPar: Node.Keyword.LPar","ktast.ast.Node.Statement.DoWhileStatement.lPar"]},{"name":"open override val lPar: Node.Keyword.LPar","description":"ktast.ast.Node.Statement.WhileStatement.lPar","location":"ast/ktast.ast/-node/-statement/-while-statement/l-par.html","searchKeys":["lPar","open override val lPar: Node.Keyword.LPar","ktast.ast.Node.Statement.WhileStatement.lPar"]},{"name":"open override val lPar: Node.Keyword.LPar?","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.EnumEntry.lPar","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-enum-entry/l-par.html","searchKeys":["lPar","open override val lPar: Node.Keyword.LPar?","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.EnumEntry.lPar"]},{"name":"open override val lPar: Node.Keyword.LPar?","description":"ktast.ast.Node.Declaration.PropertyDeclaration.Getter.lPar","location":"ast/ktast.ast/-node/-declaration/-property-declaration/-getter/l-par.html","searchKeys":["lPar","open override val lPar: Node.Keyword.LPar?","ktast.ast.Node.Declaration.PropertyDeclaration.Getter.lPar"]},{"name":"open override val lPar: Node.Keyword.LPar?","description":"ktast.ast.Node.Declaration.PropertyDeclaration.Setter.lPar","location":"ast/ktast.ast/-node/-declaration/-property-declaration/-setter/l-par.html","searchKeys":["lPar","open override val lPar: Node.Keyword.LPar?","ktast.ast.Node.Declaration.PropertyDeclaration.Setter.lPar"]},{"name":"open override val lPar: Node.Keyword.LPar?","description":"ktast.ast.Node.Expression.CallExpression.lPar","location":"ast/ktast.ast/-node/-expression/-call-expression/l-par.html","searchKeys":["lPar","open override val lPar: Node.Keyword.LPar?","ktast.ast.Node.Expression.CallExpression.lPar"]},{"name":"open override val lPar: Node.Keyword.LPar?","description":"ktast.ast.Node.Modifier.AnnotationSet.Annotation.lPar","location":"ast/ktast.ast/-node/-modifier/-annotation-set/-annotation/l-par.html","searchKeys":["lPar","open override val lPar: Node.Keyword.LPar?","ktast.ast.Node.Modifier.AnnotationSet.Annotation.lPar"]},{"name":"open override val lPar: Node.Keyword.LPar? = null","description":"ktast.ast.Node.Declaration.ClassOrObject.DelegationClassParent.lPar","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-delegation-class-parent/l-par.html","searchKeys":["lPar","open override val lPar: Node.Keyword.LPar? = null","ktast.ast.Node.Declaration.ClassOrObject.DelegationClassParent.lPar"]},{"name":"open override val lPar: Node.Keyword.LPar? = null","description":"ktast.ast.Node.Declaration.ClassOrObject.TypeClassParent.lPar","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-type-class-parent/l-par.html","searchKeys":["lPar","open override val lPar: Node.Keyword.LPar? = null","ktast.ast.Node.Declaration.ClassOrObject.TypeClassParent.lPar"]},{"name":"open override val label: Node.Expression.NameExpression?","description":"ktast.ast.Node.Expression.BreakExpression.label","location":"ast/ktast.ast/-node/-expression/-break-expression/label.html","searchKeys":["label","open override val label: Node.Expression.NameExpression?","ktast.ast.Node.Expression.BreakExpression.label"]},{"name":"open override val label: Node.Expression.NameExpression?","description":"ktast.ast.Node.Expression.ContinueExpression.label","location":"ast/ktast.ast/-node/-expression/-continue-expression/label.html","searchKeys":["label","open override val label: Node.Expression.NameExpression?","ktast.ast.Node.Expression.ContinueExpression.label"]},{"name":"open override val label: Node.Expression.NameExpression?","description":"ktast.ast.Node.Expression.ReturnExpression.label","location":"ast/ktast.ast/-node/-expression/-return-expression/label.html","searchKeys":["label","open override val label: Node.Expression.NameExpression?","ktast.ast.Node.Expression.ReturnExpression.label"]},{"name":"open override val label: Node.Expression.NameExpression?","description":"ktast.ast.Node.Expression.SuperExpression.label","location":"ast/ktast.ast/-node/-expression/-super-expression/label.html","searchKeys":["label","open override val label: Node.Expression.NameExpression?","ktast.ast.Node.Expression.SuperExpression.label"]},{"name":"open override val label: Node.Expression.NameExpression?","description":"ktast.ast.Node.Expression.ThisExpression.label","location":"ast/ktast.ast/-node/-expression/-this-expression/label.html","searchKeys":["label","open override val label: Node.Expression.NameExpression?","ktast.ast.Node.Expression.ThisExpression.label"]},{"name":"open override val lhs: Node.Expression","description":"ktast.ast.Node.Expression.ClassLiteralExpression.lhs","location":"ast/ktast.ast/-node/-expression/-class-literal-expression/lhs.html","searchKeys":["lhs","open override val lhs: Node.Expression","ktast.ast.Node.Expression.ClassLiteralExpression.lhs"]},{"name":"open override val lhs: Node.Expression?","description":"ktast.ast.Node.Expression.CallableReferenceExpression.lhs","location":"ast/ktast.ast/-node/-expression/-callable-reference-expression/lhs.html","searchKeys":["lhs","open override val lhs: Node.Expression?","ktast.ast.Node.Expression.CallableReferenceExpression.lhs"]},{"name":"open override val modifiers: List<Node.Modifier>","description":"ktast.ast.Node.Declaration.ClassDeclaration.PrimaryConstructor.modifiers","location":"ast/ktast.ast/-node/-declaration/-class-declaration/-primary-constructor/modifiers.html","searchKeys":["modifiers","open override val modifiers: List<Node.Modifier>","ktast.ast.Node.Declaration.ClassDeclaration.PrimaryConstructor.modifiers"]},{"name":"open override val modifiers: List<Node.Modifier>","description":"ktast.ast.Node.Declaration.ClassDeclaration.modifiers","location":"ast/ktast.ast/-node/-declaration/-class-declaration/modifiers.html","searchKeys":["modifiers","open override val modifiers: List<Node.Modifier>","ktast.ast.Node.Declaration.ClassDeclaration.modifiers"]},{"name":"open override val modifiers: List<Node.Modifier>","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.EnumEntry.modifiers","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-enum-entry/modifiers.html","searchKeys":["modifiers","open override val modifiers: List<Node.Modifier>","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.EnumEntry.modifiers"]},{"name":"open override val modifiers: List<Node.Modifier>","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.SecondaryConstructor.modifiers","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-secondary-constructor/modifiers.html","searchKeys":["modifiers","open override val modifiers: List<Node.Modifier>","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.SecondaryConstructor.modifiers"]},{"name":"open override val modifiers: List<Node.Modifier>","description":"ktast.ast.Node.Declaration.FunctionDeclaration.modifiers","location":"ast/ktast.ast/-node/-declaration/-function-declaration/modifiers.html","searchKeys":["modifiers","open override val modifiers: List<Node.Modifier>","ktast.ast.Node.Declaration.FunctionDeclaration.modifiers"]},{"name":"open override val modifiers: List<Node.Modifier>","description":"ktast.ast.Node.Declaration.ObjectDeclaration.modifiers","location":"ast/ktast.ast/-node/-declaration/-object-declaration/modifiers.html","searchKeys":["modifiers","open override val modifiers: List<Node.Modifier>","ktast.ast.Node.Declaration.ObjectDeclaration.modifiers"]},{"name":"open override val modifiers: List<Node.Modifier>","description":"ktast.ast.Node.Declaration.PropertyDeclaration.Getter.modifiers","location":"ast/ktast.ast/-node/-declaration/-property-declaration/-getter/modifiers.html","searchKeys":["modifiers","open override val modifiers: List<Node.Modifier>","ktast.ast.Node.Declaration.PropertyDeclaration.Getter.modifiers"]},{"name":"open override val modifiers: List<Node.Modifier>","description":"ktast.ast.Node.Declaration.PropertyDeclaration.Setter.modifiers","location":"ast/ktast.ast/-node/-declaration/-property-declaration/-setter/modifiers.html","searchKeys":["modifiers","open override val modifiers: List<Node.Modifier>","ktast.ast.Node.Declaration.PropertyDeclaration.Setter.modifiers"]},{"name":"open override val modifiers: List<Node.Modifier>","description":"ktast.ast.Node.Declaration.PropertyDeclaration.modifiers","location":"ast/ktast.ast/-node/-declaration/-property-declaration/modifiers.html","searchKeys":["modifiers","open override val modifiers: List<Node.Modifier>","ktast.ast.Node.Declaration.PropertyDeclaration.modifiers"]},{"name":"open override val modifiers: List<Node.Modifier>","description":"ktast.ast.Node.Declaration.TypeAliasDeclaration.modifiers","location":"ast/ktast.ast/-node/-declaration/-type-alias-declaration/modifiers.html","searchKeys":["modifiers","open override val modifiers: List<Node.Modifier>","ktast.ast.Node.Declaration.TypeAliasDeclaration.modifiers"]},{"name":"open override val modifiers: List<Node.Modifier>","description":"ktast.ast.Node.FunctionParameter.modifiers","location":"ast/ktast.ast/-node/-function-parameter/modifiers.html","searchKeys":["modifiers","open override val modifiers: List<Node.Modifier>","ktast.ast.Node.FunctionParameter.modifiers"]},{"name":"open override val modifiers: List<Node.Modifier>","description":"ktast.ast.Node.Type.DynamicType.modifiers","location":"ast/ktast.ast/-node/-type/-dynamic-type/modifiers.html","searchKeys":["modifiers","open override val modifiers: List<Node.Modifier>","ktast.ast.Node.Type.DynamicType.modifiers"]},{"name":"open override val modifiers: List<Node.Modifier>","description":"ktast.ast.Node.Type.FunctionType.modifiers","location":"ast/ktast.ast/-node/-type/-function-type/modifiers.html","searchKeys":["modifiers","open override val modifiers: List<Node.Modifier>","ktast.ast.Node.Type.FunctionType.modifiers"]},{"name":"open override val modifiers: List<Node.Modifier>","description":"ktast.ast.Node.Type.NullableType.modifiers","location":"ast/ktast.ast/-node/-type/-nullable-type/modifiers.html","searchKeys":["modifiers","open override val modifiers: List<Node.Modifier>","ktast.ast.Node.Type.NullableType.modifiers"]},{"name":"open override val modifiers: List<Node.Modifier>","description":"ktast.ast.Node.Type.ParenthesizedType.modifiers","location":"ast/ktast.ast/-node/-type/-parenthesized-type/modifiers.html","searchKeys":["modifiers","open override val modifiers: List<Node.Modifier>","ktast.ast.Node.Type.ParenthesizedType.modifiers"]},{"name":"open override val modifiers: List<Node.Modifier>","description":"ktast.ast.Node.Type.SimpleType.modifiers","location":"ast/ktast.ast/-node/-type/-simple-type/modifiers.html","searchKeys":["modifiers","open override val modifiers: List<Node.Modifier>","ktast.ast.Node.Type.SimpleType.modifiers"]},{"name":"open override val modifiers: List<Node.Modifier>","description":"ktast.ast.Node.TypeArgument.modifiers","location":"ast/ktast.ast/-node/-type-argument/modifiers.html","searchKeys":["modifiers","open override val modifiers: List<Node.Modifier>","ktast.ast.Node.TypeArgument.modifiers"]},{"name":"open override val modifiers: List<Node.Modifier>","description":"ktast.ast.Node.TypeParameter.modifiers","location":"ast/ktast.ast/-node/-type-parameter/modifiers.html","searchKeys":["modifiers","open override val modifiers: List<Node.Modifier>","ktast.ast.Node.TypeParameter.modifiers"]},{"name":"open override val name: Node.Expression.NameExpression","description":"ktast.ast.Node.Declaration.ClassDeclaration.name","location":"ast/ktast.ast/-node/-declaration/-class-declaration/name.html","searchKeys":["name","open override val name: Node.Expression.NameExpression","ktast.ast.Node.Declaration.ClassDeclaration.name"]},{"name":"open override val name: Node.Expression.NameExpression","description":"ktast.ast.Node.Type.SimpleType.SimpleTypeQualifier.name","location":"ast/ktast.ast/-node/-type/-simple-type/-simple-type-qualifier/name.html","searchKeys":["name","open override val name: Node.Expression.NameExpression","ktast.ast.Node.Type.SimpleType.SimpleTypeQualifier.name"]},{"name":"open override val name: Node.Expression.NameExpression","description":"ktast.ast.Node.Type.SimpleType.name","location":"ast/ktast.ast/-node/-type/-simple-type/name.html","searchKeys":["name","open override val name: Node.Expression.NameExpression","ktast.ast.Node.Type.SimpleType.name"]},{"name":"open override val name: Node.Expression.NameExpression?","description":"ktast.ast.Node.Declaration.ObjectDeclaration.name","location":"ast/ktast.ast/-node/-declaration/-object-declaration/name.html","searchKeys":["name","open override val name: Node.Expression.NameExpression?","ktast.ast.Node.Declaration.ObjectDeclaration.name"]},{"name":"open override val operator: Node.Expression.UnaryExpression.UnaryOperator","description":"ktast.ast.Node.Expression.PostfixUnaryExpression.operator","location":"ast/ktast.ast/-node/-expression/-postfix-unary-expression/operator.html","searchKeys":["operator","open override val operator: Node.Expression.UnaryExpression.UnaryOperator","ktast.ast.Node.Expression.PostfixUnaryExpression.operator"]},{"name":"open override val operator: Node.Expression.UnaryExpression.UnaryOperator","description":"ktast.ast.Node.Expression.PrefixUnaryExpression.operator","location":"ast/ktast.ast/-node/-expression/-prefix-unary-expression/operator.html","searchKeys":["operator","open override val operator: Node.Expression.UnaryExpression.UnaryOperator","ktast.ast.Node.Expression.PrefixUnaryExpression.operator"]},{"name":"open override val operator: Node.Expression.WhenExpression.WhenConditionRangeOperator","description":"ktast.ast.Node.Expression.WhenExpression.RangeWhenCondition.operator","location":"ast/ktast.ast/-node/-expression/-when-expression/-range-when-condition/operator.html","searchKeys":["operator","open override val operator: Node.Expression.WhenExpression.WhenConditionRangeOperator","ktast.ast.Node.Expression.WhenExpression.RangeWhenCondition.operator"]},{"name":"open override val operator: Node.Expression.WhenExpression.WhenConditionTypeOperator","description":"ktast.ast.Node.Expression.WhenExpression.TypeWhenCondition.operator","location":"ast/ktast.ast/-node/-expression/-when-expression/-type-when-condition/operator.html","searchKeys":["operator","open override val operator: Node.Expression.WhenExpression.WhenConditionTypeOperator","ktast.ast.Node.Expression.WhenExpression.TypeWhenCondition.operator"]},{"name":"open override val operator: Nothing? = null","description":"ktast.ast.Node.Expression.WhenExpression.ExpressionWhenCondition.operator","location":"ast/ktast.ast/-node/-expression/-when-expression/-expression-when-condition/operator.html","searchKeys":["operator","open override val operator: Nothing? = null","ktast.ast.Node.Expression.WhenExpression.ExpressionWhenCondition.operator"]},{"name":"open override val parameters: List<Node.FunctionParameter>","description":"ktast.ast.Node.Declaration.ClassDeclaration.PrimaryConstructor.parameters","location":"ast/ktast.ast/-node/-declaration/-class-declaration/-primary-constructor/parameters.html","searchKeys":["parameters","open override val parameters: List<Node.FunctionParameter>","ktast.ast.Node.Declaration.ClassDeclaration.PrimaryConstructor.parameters"]},{"name":"open override val parameters: List<Node.FunctionParameter>","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.SecondaryConstructor.parameters","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-secondary-constructor/parameters.html","searchKeys":["parameters","open override val parameters: List<Node.FunctionParameter>","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.SecondaryConstructor.parameters"]},{"name":"open override val parameters: List<Node.FunctionParameter>","description":"ktast.ast.Node.Declaration.FunctionDeclaration.parameters","location":"ast/ktast.ast/-node/-declaration/-function-declaration/parameters.html","searchKeys":["parameters","open override val parameters: List<Node.FunctionParameter>","ktast.ast.Node.Declaration.FunctionDeclaration.parameters"]},{"name":"open override val parameters: List<Node.FunctionParameter>","description":"ktast.ast.Node.Expression.TryExpression.CatchClause.parameters","location":"ast/ktast.ast/-node/-expression/-try-expression/-catch-clause/parameters.html","searchKeys":["parameters","open override val parameters: List<Node.FunctionParameter>","ktast.ast.Node.Expression.TryExpression.CatchClause.parameters"]},{"name":"open override val parents: List<Node.Declaration.ClassOrObject.ClassParent>","description":"ktast.ast.Node.Declaration.ClassDeclaration.parents","location":"ast/ktast.ast/-node/-declaration/-class-declaration/parents.html","searchKeys":["parents","open override val parents: List<Node.Declaration.ClassOrObject.ClassParent>","ktast.ast.Node.Declaration.ClassDeclaration.parents"]},{"name":"open override val parents: List<Node.Declaration.ClassOrObject.ClassParent>","description":"ktast.ast.Node.Declaration.ObjectDeclaration.parents","location":"ast/ktast.ast/-node/-declaration/-object-declaration/parents.html","searchKeys":["parents","open override val parents: List<Node.Declaration.ClassOrObject.ClassParent>","ktast.ast.Node.Declaration.ObjectDeclaration.parents"]},{"name":"open override val postModifiers: List<Node.PostModifier>","description":"ktast.ast.Node.Declaration.FunctionDeclaration.postModifiers","location":"ast/ktast.ast/-node/-declaration/-function-declaration/post-modifiers.html","searchKeys":["postModifiers","open override val postModifiers: List<Node.PostModifier>","ktast.ast.Node.Declaration.FunctionDeclaration.postModifiers"]},{"name":"open override val postModifiers: List<Node.PostModifier>","description":"ktast.ast.Node.Declaration.PropertyDeclaration.Getter.postModifiers","location":"ast/ktast.ast/-node/-declaration/-property-declaration/-getter/post-modifiers.html","searchKeys":["postModifiers","open override val postModifiers: List<Node.PostModifier>","ktast.ast.Node.Declaration.PropertyDeclaration.Getter.postModifiers"]},{"name":"open override val postModifiers: List<Node.PostModifier>","description":"ktast.ast.Node.Declaration.PropertyDeclaration.Setter.postModifiers","location":"ast/ktast.ast/-node/-declaration/-property-declaration/-setter/post-modifiers.html","searchKeys":["postModifiers","open override val postModifiers: List<Node.PostModifier>","ktast.ast.Node.Declaration.PropertyDeclaration.Setter.postModifiers"]},{"name":"open override val questionMarks: List<Node.Keyword.Question>","description":"ktast.ast.Node.Expression.CallableReferenceExpression.questionMarks","location":"ast/ktast.ast/-node/-expression/-callable-reference-expression/question-marks.html","searchKeys":["questionMarks","open override val questionMarks: List<Node.Keyword.Question>","ktast.ast.Node.Expression.CallableReferenceExpression.questionMarks"]},{"name":"open override val questionMarks: List<Node.Keyword.Question>","description":"ktast.ast.Node.Expression.ClassLiteralExpression.questionMarks","location":"ast/ktast.ast/-node/-expression/-class-literal-expression/question-marks.html","searchKeys":["questionMarks","open override val questionMarks: List<Node.Keyword.Question>","ktast.ast.Node.Expression.ClassLiteralExpression.questionMarks"]},{"name":"open override val rAngle: Node.Keyword.Greater?","description":"ktast.ast.Node.Declaration.ClassDeclaration.rAngle","location":"ast/ktast.ast/-node/-declaration/-class-declaration/r-angle.html","searchKeys":["rAngle","open override val rAngle: Node.Keyword.Greater?","ktast.ast.Node.Declaration.ClassDeclaration.rAngle"]},{"name":"open override val rAngle: Node.Keyword.Greater?","description":"ktast.ast.Node.Declaration.FunctionDeclaration.rAngle","location":"ast/ktast.ast/-node/-declaration/-function-declaration/r-angle.html","searchKeys":["rAngle","open override val rAngle: Node.Keyword.Greater?","ktast.ast.Node.Declaration.FunctionDeclaration.rAngle"]},{"name":"open override val rAngle: Node.Keyword.Greater?","description":"ktast.ast.Node.Declaration.PropertyDeclaration.rAngle","location":"ast/ktast.ast/-node/-declaration/-property-declaration/r-angle.html","searchKeys":["rAngle","open override val rAngle: Node.Keyword.Greater?","ktast.ast.Node.Declaration.PropertyDeclaration.rAngle"]},{"name":"open override val rAngle: Node.Keyword.Greater?","description":"ktast.ast.Node.Declaration.TypeAliasDeclaration.rAngle","location":"ast/ktast.ast/-node/-declaration/-type-alias-declaration/r-angle.html","searchKeys":["rAngle","open override val rAngle: Node.Keyword.Greater?","ktast.ast.Node.Declaration.TypeAliasDeclaration.rAngle"]},{"name":"open override val rAngle: Node.Keyword.Greater?","description":"ktast.ast.Node.Expression.CallExpression.rAngle","location":"ast/ktast.ast/-node/-expression/-call-expression/r-angle.html","searchKeys":["rAngle","open override val rAngle: Node.Keyword.Greater?","ktast.ast.Node.Expression.CallExpression.rAngle"]},{"name":"open override val rAngle: Node.Keyword.Greater?","description":"ktast.ast.Node.Type.SimpleType.SimpleTypeQualifier.rAngle","location":"ast/ktast.ast/-node/-type/-simple-type/-simple-type-qualifier/r-angle.html","searchKeys":["rAngle","open override val rAngle: Node.Keyword.Greater?","ktast.ast.Node.Type.SimpleType.SimpleTypeQualifier.rAngle"]},{"name":"open override val rAngle: Node.Keyword.Greater?","description":"ktast.ast.Node.Type.SimpleType.rAngle","location":"ast/ktast.ast/-node/-type/-simple-type/r-angle.html","searchKeys":["rAngle","open override val rAngle: Node.Keyword.Greater?","ktast.ast.Node.Type.SimpleType.rAngle"]},{"name":"open override val rPar: Node.Keyword.RPar","description":"ktast.ast.Node.Declaration.ClassDeclaration.PrimaryConstructor.rPar","location":"ast/ktast.ast/-node/-declaration/-class-declaration/-primary-constructor/r-par.html","searchKeys":["rPar","open override val rPar: Node.Keyword.RPar","ktast.ast.Node.Declaration.ClassDeclaration.PrimaryConstructor.rPar"]},{"name":"open override val rPar: Node.Keyword.RPar","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.SecondaryConstructor.rPar","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-secondary-constructor/r-par.html","searchKeys":["rPar","open override val rPar: Node.Keyword.RPar","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.SecondaryConstructor.rPar"]},{"name":"open override val rPar: Node.Keyword.RPar","description":"ktast.ast.Node.Declaration.ClassOrObject.ConstructorClassParent.rPar","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-constructor-class-parent/r-par.html","searchKeys":["rPar","open override val rPar: Node.Keyword.RPar","ktast.ast.Node.Declaration.ClassOrObject.ConstructorClassParent.rPar"]},{"name":"open override val rPar: Node.Keyword.RPar","description":"ktast.ast.Node.Declaration.FunctionDeclaration.rPar","location":"ast/ktast.ast/-node/-declaration/-function-declaration/r-par.html","searchKeys":["rPar","open override val rPar: Node.Keyword.RPar","ktast.ast.Node.Declaration.FunctionDeclaration.rPar"]},{"name":"open override val rPar: Node.Keyword.RPar","description":"ktast.ast.Node.Expression.TryExpression.CatchClause.rPar","location":"ast/ktast.ast/-node/-expression/-try-expression/-catch-clause/r-par.html","searchKeys":["rPar","open override val rPar: Node.Keyword.RPar","ktast.ast.Node.Expression.TryExpression.CatchClause.rPar"]},{"name":"open override val rPar: Node.Keyword.RPar","description":"ktast.ast.Node.Statement.DoWhileStatement.rPar","location":"ast/ktast.ast/-node/-statement/-do-while-statement/r-par.html","searchKeys":["rPar","open override val rPar: Node.Keyword.RPar","ktast.ast.Node.Statement.DoWhileStatement.rPar"]},{"name":"open override val rPar: Node.Keyword.RPar","description":"ktast.ast.Node.Statement.WhileStatement.rPar","location":"ast/ktast.ast/-node/-statement/-while-statement/r-par.html","searchKeys":["rPar","open override val rPar: Node.Keyword.RPar","ktast.ast.Node.Statement.WhileStatement.rPar"]},{"name":"open override val rPar: Node.Keyword.RPar?","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.EnumEntry.rPar","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-enum-entry/r-par.html","searchKeys":["rPar","open override val rPar: Node.Keyword.RPar?","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.EnumEntry.rPar"]},{"name":"open override val rPar: Node.Keyword.RPar?","description":"ktast.ast.Node.Declaration.PropertyDeclaration.Getter.rPar","location":"ast/ktast.ast/-node/-declaration/-property-declaration/-getter/r-par.html","searchKeys":["rPar","open override val rPar: Node.Keyword.RPar?","ktast.ast.Node.Declaration.PropertyDeclaration.Getter.rPar"]},{"name":"open override val rPar: Node.Keyword.RPar?","description":"ktast.ast.Node.Declaration.PropertyDeclaration.Setter.rPar","location":"ast/ktast.ast/-node/-declaration/-property-declaration/-setter/r-par.html","searchKeys":["rPar","open override val rPar: Node.Keyword.RPar?","ktast.ast.Node.Declaration.PropertyDeclaration.Setter.rPar"]},{"name":"open override val rPar: Node.Keyword.RPar?","description":"ktast.ast.Node.Expression.CallExpression.rPar","location":"ast/ktast.ast/-node/-expression/-call-expression/r-par.html","searchKeys":["rPar","open override val rPar: Node.Keyword.RPar?","ktast.ast.Node.Expression.CallExpression.rPar"]},{"name":"open override val rPar: Node.Keyword.RPar?","description":"ktast.ast.Node.Modifier.AnnotationSet.Annotation.rPar","location":"ast/ktast.ast/-node/-modifier/-annotation-set/-annotation/r-par.html","searchKeys":["rPar","open override val rPar: Node.Keyword.RPar?","ktast.ast.Node.Modifier.AnnotationSet.Annotation.rPar"]},{"name":"open override val rPar: Node.Keyword.RPar? = null","description":"ktast.ast.Node.Declaration.ClassOrObject.DelegationClassParent.rPar","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-delegation-class-parent/r-par.html","searchKeys":["rPar","open override val rPar: Node.Keyword.RPar? = null","ktast.ast.Node.Declaration.ClassOrObject.DelegationClassParent.rPar"]},{"name":"open override val rPar: Node.Keyword.RPar? = null","description":"ktast.ast.Node.Declaration.ClassOrObject.TypeClassParent.rPar","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-type-class-parent/r-par.html","searchKeys":["rPar","open override val rPar: Node.Keyword.RPar? = null","ktast.ast.Node.Declaration.ClassOrObject.TypeClassParent.rPar"]},{"name":"open override val statements: List<Node.Statement>","description":"ktast.ast.Node.Expression.BlockExpression.statements","location":"ast/ktast.ast/-node/-expression/-block-expression/statements.html","searchKeys":["statements","open override val statements: List<Node.Statement>","ktast.ast.Node.Expression.BlockExpression.statements"]},{"name":"open override val statements: List<Node.Statement>","description":"ktast.ast.Node.Expression.LambdaExpression.statements","location":"ast/ktast.ast/-node/-expression/-lambda-expression/statements.html","searchKeys":["statements","open override val statements: List<Node.Statement>","ktast.ast.Node.Expression.LambdaExpression.statements"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.ContextReceiver.supplement","location":"ast/ktast.ast/-node/-context-receiver/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.ContextReceiver.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Declaration.ClassDeclaration.PrimaryConstructor.supplement","location":"ast/ktast.ast/-node/-declaration/-class-declaration/-primary-constructor/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Declaration.ClassDeclaration.PrimaryConstructor.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Declaration.ClassDeclaration.supplement","location":"ast/ktast.ast/-node/-declaration/-class-declaration/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Declaration.ClassDeclaration.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.EnumEntry.supplement","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-enum-entry/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.EnumEntry.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.Initializer.supplement","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-initializer/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.Initializer.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.SecondaryConstructor.supplement","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-secondary-constructor/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.SecondaryConstructor.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.supplement","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Declaration.ClassOrObject.ConstructorClassParent.supplement","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-constructor-class-parent/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Declaration.ClassOrObject.ConstructorClassParent.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Declaration.ClassOrObject.DelegationClassParent.supplement","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-delegation-class-parent/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Declaration.ClassOrObject.DelegationClassParent.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Declaration.ClassOrObject.TypeClassParent.supplement","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-type-class-parent/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Declaration.ClassOrObject.TypeClassParent.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Declaration.FunctionDeclaration.supplement","location":"ast/ktast.ast/-node/-declaration/-function-declaration/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Declaration.FunctionDeclaration.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Declaration.ObjectDeclaration.supplement","location":"ast/ktast.ast/-node/-declaration/-object-declaration/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Declaration.ObjectDeclaration.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Declaration.PropertyDeclaration.Getter.supplement","location":"ast/ktast.ast/-node/-declaration/-property-declaration/-getter/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Declaration.PropertyDeclaration.Getter.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Declaration.PropertyDeclaration.Setter.supplement","location":"ast/ktast.ast/-node/-declaration/-property-declaration/-setter/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Declaration.PropertyDeclaration.Setter.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Declaration.PropertyDeclaration.supplement","location":"ast/ktast.ast/-node/-declaration/-property-declaration/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Declaration.PropertyDeclaration.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Declaration.ScriptBody.supplement","location":"ast/ktast.ast/-node/-declaration/-script-body/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Declaration.ScriptBody.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Declaration.ScriptInitializer.supplement","location":"ast/ktast.ast/-node/-declaration/-script-initializer/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Declaration.ScriptInitializer.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Declaration.TypeAliasDeclaration.supplement","location":"ast/ktast.ast/-node/-declaration/-type-alias-declaration/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Declaration.TypeAliasDeclaration.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.AnnotatedExpression.supplement","location":"ast/ktast.ast/-node/-expression/-annotated-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.AnnotatedExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.AnonymousFunctionExpression.supplement","location":"ast/ktast.ast/-node/-expression/-anonymous-function-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.AnonymousFunctionExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.BinaryExpression.supplement","location":"ast/ktast.ast/-node/-expression/-binary-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.BinaryExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.BinaryTypeExpression.supplement","location":"ast/ktast.ast/-node/-expression/-binary-type-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.BinaryTypeExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.BlockExpression.supplement","location":"ast/ktast.ast/-node/-expression/-block-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.BlockExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.BooleanLiteralExpression.supplement","location":"ast/ktast.ast/-node/-expression/-boolean-literal-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.BooleanLiteralExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.BreakExpression.supplement","location":"ast/ktast.ast/-node/-expression/-break-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.BreakExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.CallExpression.supplement","location":"ast/ktast.ast/-node/-expression/-call-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.CallExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.CallableReferenceExpression.supplement","location":"ast/ktast.ast/-node/-expression/-callable-reference-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.CallableReferenceExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.CharacterLiteralExpression.supplement","location":"ast/ktast.ast/-node/-expression/-character-literal-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.CharacterLiteralExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.ClassLiteralExpression.supplement","location":"ast/ktast.ast/-node/-expression/-class-literal-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.ClassLiteralExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.CollectionLiteralExpression.supplement","location":"ast/ktast.ast/-node/-expression/-collection-literal-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.CollectionLiteralExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.ContinueExpression.supplement","location":"ast/ktast.ast/-node/-expression/-continue-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.ContinueExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.IfExpression.supplement","location":"ast/ktast.ast/-node/-expression/-if-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.IfExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.IndexedAccessExpression.supplement","location":"ast/ktast.ast/-node/-expression/-indexed-access-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.IndexedAccessExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.IntegerLiteralExpression.supplement","location":"ast/ktast.ast/-node/-expression/-integer-literal-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.IntegerLiteralExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.LabeledExpression.supplement","location":"ast/ktast.ast/-node/-expression/-labeled-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.LabeledExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.LambdaExpression.supplement","location":"ast/ktast.ast/-node/-expression/-lambda-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.LambdaExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.NameExpression.supplement","location":"ast/ktast.ast/-node/-expression/-name-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.NameExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.NullLiteralExpression.supplement","location":"ast/ktast.ast/-node/-expression/-null-literal-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.NullLiteralExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.ObjectLiteralExpression.supplement","location":"ast/ktast.ast/-node/-expression/-object-literal-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.ObjectLiteralExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.ParenthesizedExpression.supplement","location":"ast/ktast.ast/-node/-expression/-parenthesized-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.ParenthesizedExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.PostfixUnaryExpression.supplement","location":"ast/ktast.ast/-node/-expression/-postfix-unary-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.PostfixUnaryExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.PrefixUnaryExpression.supplement","location":"ast/ktast.ast/-node/-expression/-prefix-unary-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.PrefixUnaryExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.RealLiteralExpression.supplement","location":"ast/ktast.ast/-node/-expression/-real-literal-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.RealLiteralExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.ReturnExpression.supplement","location":"ast/ktast.ast/-node/-expression/-return-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.ReturnExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.StringLiteralExpression.EscapeStringEntry.supplement","location":"ast/ktast.ast/-node/-expression/-string-literal-expression/-escape-string-entry/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.StringLiteralExpression.EscapeStringEntry.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.StringLiteralExpression.LiteralStringEntry.supplement","location":"ast/ktast.ast/-node/-expression/-string-literal-expression/-literal-string-entry/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.StringLiteralExpression.LiteralStringEntry.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.StringLiteralExpression.TemplateStringEntry.supplement","location":"ast/ktast.ast/-node/-expression/-string-literal-expression/-template-string-entry/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.StringLiteralExpression.TemplateStringEntry.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.StringLiteralExpression.supplement","location":"ast/ktast.ast/-node/-expression/-string-literal-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.StringLiteralExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.SuperExpression.supplement","location":"ast/ktast.ast/-node/-expression/-super-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.SuperExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.ThisExpression.supplement","location":"ast/ktast.ast/-node/-expression/-this-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.ThisExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.ThrowExpression.supplement","location":"ast/ktast.ast/-node/-expression/-throw-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.ThrowExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.TryExpression.CatchClause.supplement","location":"ast/ktast.ast/-node/-expression/-try-expression/-catch-clause/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.TryExpression.CatchClause.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.TryExpression.supplement","location":"ast/ktast.ast/-node/-expression/-try-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.TryExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.WhenExpression.ConditionalWhenBranch.supplement","location":"ast/ktast.ast/-node/-expression/-when-expression/-conditional-when-branch/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.WhenExpression.ConditionalWhenBranch.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.WhenExpression.ElseWhenBranch.supplement","location":"ast/ktast.ast/-node/-expression/-when-expression/-else-when-branch/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.WhenExpression.ElseWhenBranch.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.WhenExpression.ExpressionWhenCondition.supplement","location":"ast/ktast.ast/-node/-expression/-when-expression/-expression-when-condition/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.WhenExpression.ExpressionWhenCondition.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.WhenExpression.RangeWhenCondition.supplement","location":"ast/ktast.ast/-node/-expression/-when-expression/-range-when-condition/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.WhenExpression.RangeWhenCondition.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.WhenExpression.TypeWhenCondition.supplement","location":"ast/ktast.ast/-node/-expression/-when-expression/-type-when-condition/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.WhenExpression.TypeWhenCondition.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.WhenExpression.WhenSubject.supplement","location":"ast/ktast.ast/-node/-expression/-when-expression/-when-subject/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.WhenExpression.WhenSubject.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Expression.WhenExpression.supplement","location":"ast/ktast.ast/-node/-expression/-when-expression/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Expression.WhenExpression.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Extra.Comment.supplement","location":"ast/ktast.ast/-node/-extra/-comment/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Extra.Comment.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Extra.Semicolon.supplement","location":"ast/ktast.ast/-node/-extra/-semicolon/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Extra.Semicolon.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Extra.TrailingComma.supplement","location":"ast/ktast.ast/-node/-extra/-trailing-comma/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Extra.TrailingComma.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Extra.Whitespace.supplement","location":"ast/ktast.ast/-node/-extra/-whitespace/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Extra.Whitespace.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.FunctionParameter.supplement","location":"ast/ktast.ast/-node/-function-parameter/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.FunctionParameter.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.ImportDirective.supplement","location":"ast/ktast.ast/-node/-import-directive/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.ImportDirective.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Abstract.supplement","location":"ast/ktast.ast/-node/-keyword/-abstract/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Abstract.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Actual.supplement","location":"ast/ktast.ast/-node/-keyword/-actual/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Actual.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.AndAnd.supplement","location":"ast/ktast.ast/-node/-keyword/-and-and/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.AndAnd.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Annotation.supplement","location":"ast/ktast.ast/-node/-keyword/-annotation/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Annotation.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Arrow.supplement","location":"ast/ktast.ast/-node/-keyword/-arrow/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Arrow.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.As.supplement","location":"ast/ktast.ast/-node/-keyword/-as/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.As.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.AsQuestion.supplement","location":"ast/ktast.ast/-node/-keyword/-as-question/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.AsQuestion.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Asterisk.supplement","location":"ast/ktast.ast/-node/-keyword/-asterisk/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Asterisk.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.AsteriskEqual.supplement","location":"ast/ktast.ast/-node/-keyword/-asterisk-equal/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.AsteriskEqual.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Class.supplement","location":"ast/ktast.ast/-node/-keyword/-class/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Class.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Companion.supplement","location":"ast/ktast.ast/-node/-keyword/-companion/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Companion.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Const.supplement","location":"ast/ktast.ast/-node/-keyword/-const/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Const.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Constructor.supplement","location":"ast/ktast.ast/-node/-keyword/-constructor/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Constructor.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.CrossInline.supplement","location":"ast/ktast.ast/-node/-keyword/-cross-inline/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.CrossInline.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Data.supplement","location":"ast/ktast.ast/-node/-keyword/-data/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Data.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Delegate.supplement","location":"ast/ktast.ast/-node/-keyword/-delegate/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Delegate.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Dot.supplement","location":"ast/ktast.ast/-node/-keyword/-dot/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Dot.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.DotDot.supplement","location":"ast/ktast.ast/-node/-keyword/-dot-dot/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.DotDot.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.DotDotLess.supplement","location":"ast/ktast.ast/-node/-keyword/-dot-dot-less/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.DotDotLess.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Enum.supplement","location":"ast/ktast.ast/-node/-keyword/-enum/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Enum.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.EqualEqual.supplement","location":"ast/ktast.ast/-node/-keyword/-equal-equal/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.EqualEqual.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Expect.supplement","location":"ast/ktast.ast/-node/-keyword/-expect/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Expect.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.External.supplement","location":"ast/ktast.ast/-node/-keyword/-external/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.External.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Field.supplement","location":"ast/ktast.ast/-node/-keyword/-field/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Field.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.File.supplement","location":"ast/ktast.ast/-node/-keyword/-file/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.File.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Final.supplement","location":"ast/ktast.ast/-node/-keyword/-final/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Final.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Fun.supplement","location":"ast/ktast.ast/-node/-keyword/-fun/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Fun.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Get.supplement","location":"ast/ktast.ast/-node/-keyword/-get/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Get.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Greater.supplement","location":"ast/ktast.ast/-node/-keyword/-greater/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Greater.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.GreaterEqual.supplement","location":"ast/ktast.ast/-node/-keyword/-greater-equal/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.GreaterEqual.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.In.supplement","location":"ast/ktast.ast/-node/-keyword/-in/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.In.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Infix.supplement","location":"ast/ktast.ast/-node/-keyword/-infix/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Infix.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Inline.supplement","location":"ast/ktast.ast/-node/-keyword/-inline/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Inline.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Inner.supplement","location":"ast/ktast.ast/-node/-keyword/-inner/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Inner.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Interface.supplement","location":"ast/ktast.ast/-node/-keyword/-interface/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Interface.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Internal.supplement","location":"ast/ktast.ast/-node/-keyword/-internal/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Internal.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Is.supplement","location":"ast/ktast.ast/-node/-keyword/-is/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Is.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.LBracket.supplement","location":"ast/ktast.ast/-node/-keyword/-l-bracket/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.LBracket.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.LPar.supplement","location":"ast/ktast.ast/-node/-keyword/-l-par/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.LPar.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.LateInit.supplement","location":"ast/ktast.ast/-node/-keyword/-late-init/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.LateInit.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Less.supplement","location":"ast/ktast.ast/-node/-keyword/-less/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Less.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.LessEqual.supplement","location":"ast/ktast.ast/-node/-keyword/-less-equal/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.LessEqual.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Minus.supplement","location":"ast/ktast.ast/-node/-keyword/-minus/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Minus.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.MinusEqual.supplement","location":"ast/ktast.ast/-node/-keyword/-minus-equal/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.MinusEqual.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.MinusMinus.supplement","location":"ast/ktast.ast/-node/-keyword/-minus-minus/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.MinusMinus.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Noinline.supplement","location":"ast/ktast.ast/-node/-keyword/-noinline/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Noinline.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Not.supplement","location":"ast/ktast.ast/-node/-keyword/-not/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Not.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.NotEqual.supplement","location":"ast/ktast.ast/-node/-keyword/-not-equal/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.NotEqual.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.NotIn.supplement","location":"ast/ktast.ast/-node/-keyword/-not-in/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.NotIn.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.NotIs.supplement","location":"ast/ktast.ast/-node/-keyword/-not-is/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.NotIs.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.NotNot.supplement","location":"ast/ktast.ast/-node/-keyword/-not-not/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.NotNot.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Object.supplement","location":"ast/ktast.ast/-node/-keyword/-object/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Object.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Open.supplement","location":"ast/ktast.ast/-node/-keyword/-open/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Open.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Operator.supplement","location":"ast/ktast.ast/-node/-keyword/-operator/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Operator.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.OrOr.supplement","location":"ast/ktast.ast/-node/-keyword/-or-or/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.OrOr.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Out.supplement","location":"ast/ktast.ast/-node/-keyword/-out/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Out.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Override.supplement","location":"ast/ktast.ast/-node/-keyword/-override/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Override.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Param.supplement","location":"ast/ktast.ast/-node/-keyword/-param/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Param.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Percent.supplement","location":"ast/ktast.ast/-node/-keyword/-percent/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Percent.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.PercentEqual.supplement","location":"ast/ktast.ast/-node/-keyword/-percent-equal/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.PercentEqual.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Plus.supplement","location":"ast/ktast.ast/-node/-keyword/-plus/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Plus.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.PlusEqual.supplement","location":"ast/ktast.ast/-node/-keyword/-plus-equal/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.PlusEqual.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.PlusPlus.supplement","location":"ast/ktast.ast/-node/-keyword/-plus-plus/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.PlusPlus.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Private.supplement","location":"ast/ktast.ast/-node/-keyword/-private/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Private.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Property.supplement","location":"ast/ktast.ast/-node/-keyword/-property/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Property.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Protected.supplement","location":"ast/ktast.ast/-node/-keyword/-protected/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Protected.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Public.supplement","location":"ast/ktast.ast/-node/-keyword/-public/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Public.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Question.supplement","location":"ast/ktast.ast/-node/-keyword/-question/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Question.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.QuestionColon.supplement","location":"ast/ktast.ast/-node/-keyword/-question-colon/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.QuestionColon.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.QuestionDot.supplement","location":"ast/ktast.ast/-node/-keyword/-question-dot/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.QuestionDot.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.RBracket.supplement","location":"ast/ktast.ast/-node/-keyword/-r-bracket/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.RBracket.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.RPar.supplement","location":"ast/ktast.ast/-node/-keyword/-r-par/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.RPar.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Receiver.supplement","location":"ast/ktast.ast/-node/-keyword/-receiver/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Receiver.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Reified.supplement","location":"ast/ktast.ast/-node/-keyword/-reified/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Reified.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Sealed.supplement","location":"ast/ktast.ast/-node/-keyword/-sealed/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Sealed.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Set.supplement","location":"ast/ktast.ast/-node/-keyword/-set/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Set.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.SetParam.supplement","location":"ast/ktast.ast/-node/-keyword/-set-param/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.SetParam.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Slash.supplement","location":"ast/ktast.ast/-node/-keyword/-slash/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Slash.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.SlashEqual.supplement","location":"ast/ktast.ast/-node/-keyword/-slash-equal/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.SlashEqual.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Suspend.supplement","location":"ast/ktast.ast/-node/-keyword/-suspend/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Suspend.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.TailRec.supplement","location":"ast/ktast.ast/-node/-keyword/-tail-rec/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.TailRec.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Val.supplement","location":"ast/ktast.ast/-node/-keyword/-val/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Val.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Value.supplement","location":"ast/ktast.ast/-node/-keyword/-value/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Value.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Var.supplement","location":"ast/ktast.ast/-node/-keyword/-var/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Var.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.Vararg.supplement","location":"ast/ktast.ast/-node/-keyword/-vararg/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.Vararg.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Keyword.When.supplement","location":"ast/ktast.ast/-node/-keyword/-when/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Keyword.When.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.KotlinFile.supplement","location":"ast/ktast.ast/-node/-kotlin-file/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.KotlinFile.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.LambdaParameter.supplement","location":"ast/ktast.ast/-node/-lambda-parameter/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.LambdaParameter.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Modifier.AnnotationSet.Annotation.supplement","location":"ast/ktast.ast/-node/-modifier/-annotation-set/-annotation/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Modifier.AnnotationSet.Annotation.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Modifier.AnnotationSet.supplement","location":"ast/ktast.ast/-node/-modifier/-annotation-set/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Modifier.AnnotationSet.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.PackageDirective.supplement","location":"ast/ktast.ast/-node/-package-directive/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.PackageDirective.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.PostModifier.Contract.supplement","location":"ast/ktast.ast/-node/-post-modifier/-contract/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.PostModifier.Contract.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.PostModifier.TypeConstraintSet.TypeConstraint.supplement","location":"ast/ktast.ast/-node/-post-modifier/-type-constraint-set/-type-constraint/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.PostModifier.TypeConstraintSet.TypeConstraint.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.PostModifier.TypeConstraintSet.supplement","location":"ast/ktast.ast/-node/-post-modifier/-type-constraint-set/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.PostModifier.TypeConstraintSet.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Statement.DoWhileStatement.supplement","location":"ast/ktast.ast/-node/-statement/-do-while-statement/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Statement.DoWhileStatement.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Statement.ForStatement.supplement","location":"ast/ktast.ast/-node/-statement/-for-statement/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Statement.ForStatement.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Statement.WhileStatement.supplement","location":"ast/ktast.ast/-node/-statement/-while-statement/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Statement.WhileStatement.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Type.DynamicType.supplement","location":"ast/ktast.ast/-node/-type/-dynamic-type/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Type.DynamicType.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Type.FunctionType.FunctionTypeParameter.supplement","location":"ast/ktast.ast/-node/-type/-function-type/-function-type-parameter/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Type.FunctionType.FunctionTypeParameter.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Type.FunctionType.supplement","location":"ast/ktast.ast/-node/-type/-function-type/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Type.FunctionType.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Type.NullableType.supplement","location":"ast/ktast.ast/-node/-type/-nullable-type/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Type.NullableType.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Type.ParenthesizedType.supplement","location":"ast/ktast.ast/-node/-type/-parenthesized-type/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Type.ParenthesizedType.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Type.SimpleType.SimpleTypeQualifier.supplement","location":"ast/ktast.ast/-node/-type/-simple-type/-simple-type-qualifier/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Type.SimpleType.SimpleTypeQualifier.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Type.SimpleType.supplement","location":"ast/ktast.ast/-node/-type/-simple-type/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Type.SimpleType.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.TypeArgument.supplement","location":"ast/ktast.ast/-node/-type-argument/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.TypeArgument.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.TypeParameter.supplement","location":"ast/ktast.ast/-node/-type-parameter/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.TypeParameter.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.ValueArgument.supplement","location":"ast/ktast.ast/-node/-value-argument/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.ValueArgument.supplement"]},{"name":"open override val supplement: NodeSupplement","description":"ktast.ast.Node.Variable.supplement","location":"ast/ktast.ast/-node/-variable/supplement.html","searchKeys":["supplement","open override val supplement: NodeSupplement","ktast.ast.Node.Variable.supplement"]},{"name":"open override val text: String","description":"ktast.ast.Node.Expression.BooleanLiteralExpression.text","location":"ast/ktast.ast/-node/-expression/-boolean-literal-expression/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Expression.BooleanLiteralExpression.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Expression.CharacterLiteralExpression.text","location":"ast/ktast.ast/-node/-expression/-character-literal-expression/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Expression.CharacterLiteralExpression.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Expression.IntegerLiteralExpression.text","location":"ast/ktast.ast/-node/-expression/-integer-literal-expression/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Expression.IntegerLiteralExpression.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Expression.NameExpression.text","location":"ast/ktast.ast/-node/-expression/-name-expression/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Expression.NameExpression.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Expression.NullLiteralExpression.text","location":"ast/ktast.ast/-node/-expression/-null-literal-expression/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Expression.NullLiteralExpression.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Expression.RealLiteralExpression.text","location":"ast/ktast.ast/-node/-expression/-real-literal-expression/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Expression.RealLiteralExpression.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Expression.StringLiteralExpression.EscapeStringEntry.text","location":"ast/ktast.ast/-node/-expression/-string-literal-expression/-escape-string-entry/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Expression.StringLiteralExpression.EscapeStringEntry.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Expression.StringLiteralExpression.LiteralStringEntry.text","location":"ast/ktast.ast/-node/-expression/-string-literal-expression/-literal-string-entry/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Expression.StringLiteralExpression.LiteralStringEntry.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Extra.Comment.text","location":"ast/ktast.ast/-node/-extra/-comment/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Extra.Comment.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Extra.Semicolon.text","location":"ast/ktast.ast/-node/-extra/-semicolon/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Extra.Semicolon.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Extra.TrailingComma.text","location":"ast/ktast.ast/-node/-extra/-trailing-comma/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Extra.TrailingComma.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Extra.Whitespace.text","location":"ast/ktast.ast/-node/-extra/-whitespace/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Extra.Whitespace.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Abstract.text","location":"ast/ktast.ast/-node/-keyword/-abstract/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Abstract.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Actual.text","location":"ast/ktast.ast/-node/-keyword/-actual/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Actual.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.AndAnd.text","location":"ast/ktast.ast/-node/-keyword/-and-and/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.AndAnd.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Annotation.text","location":"ast/ktast.ast/-node/-keyword/-annotation/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Annotation.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Arrow.text","location":"ast/ktast.ast/-node/-keyword/-arrow/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Arrow.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.As.text","location":"ast/ktast.ast/-node/-keyword/-as/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.As.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.AsQuestion.text","location":"ast/ktast.ast/-node/-keyword/-as-question/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.AsQuestion.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Asterisk.text","location":"ast/ktast.ast/-node/-keyword/-asterisk/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Asterisk.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.AsteriskEqual.text","location":"ast/ktast.ast/-node/-keyword/-asterisk-equal/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.AsteriskEqual.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Class.text","location":"ast/ktast.ast/-node/-keyword/-class/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Class.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Companion.text","location":"ast/ktast.ast/-node/-keyword/-companion/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Companion.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Const.text","location":"ast/ktast.ast/-node/-keyword/-const/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Const.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Constructor.text","location":"ast/ktast.ast/-node/-keyword/-constructor/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Constructor.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.CrossInline.text","location":"ast/ktast.ast/-node/-keyword/-cross-inline/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.CrossInline.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Data.text","location":"ast/ktast.ast/-node/-keyword/-data/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Data.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Delegate.text","location":"ast/ktast.ast/-node/-keyword/-delegate/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Delegate.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Dot.text","location":"ast/ktast.ast/-node/-keyword/-dot/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Dot.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.DotDot.text","location":"ast/ktast.ast/-node/-keyword/-dot-dot/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.DotDot.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.DotDotLess.text","location":"ast/ktast.ast/-node/-keyword/-dot-dot-less/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.DotDotLess.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Enum.text","location":"ast/ktast.ast/-node/-keyword/-enum/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Enum.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.EqualEqual.text","location":"ast/ktast.ast/-node/-keyword/-equal-equal/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.EqualEqual.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Expect.text","location":"ast/ktast.ast/-node/-keyword/-expect/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Expect.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.External.text","location":"ast/ktast.ast/-node/-keyword/-external/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.External.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Field.text","location":"ast/ktast.ast/-node/-keyword/-field/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Field.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.File.text","location":"ast/ktast.ast/-node/-keyword/-file/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.File.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Final.text","location":"ast/ktast.ast/-node/-keyword/-final/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Final.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Fun.text","location":"ast/ktast.ast/-node/-keyword/-fun/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Fun.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Get.text","location":"ast/ktast.ast/-node/-keyword/-get/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Get.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Greater.text","location":"ast/ktast.ast/-node/-keyword/-greater/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Greater.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.GreaterEqual.text","location":"ast/ktast.ast/-node/-keyword/-greater-equal/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.GreaterEqual.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.In.text","location":"ast/ktast.ast/-node/-keyword/-in/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.In.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Infix.text","location":"ast/ktast.ast/-node/-keyword/-infix/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Infix.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Inline.text","location":"ast/ktast.ast/-node/-keyword/-inline/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Inline.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Inner.text","location":"ast/ktast.ast/-node/-keyword/-inner/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Inner.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Interface.text","location":"ast/ktast.ast/-node/-keyword/-interface/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Interface.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Internal.text","location":"ast/ktast.ast/-node/-keyword/-internal/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Internal.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Is.text","location":"ast/ktast.ast/-node/-keyword/-is/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Is.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.LBracket.text","location":"ast/ktast.ast/-node/-keyword/-l-bracket/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.LBracket.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.LPar.text","location":"ast/ktast.ast/-node/-keyword/-l-par/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.LPar.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.LateInit.text","location":"ast/ktast.ast/-node/-keyword/-late-init/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.LateInit.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Less.text","location":"ast/ktast.ast/-node/-keyword/-less/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Less.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.LessEqual.text","location":"ast/ktast.ast/-node/-keyword/-less-equal/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.LessEqual.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Minus.text","location":"ast/ktast.ast/-node/-keyword/-minus/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Minus.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.MinusEqual.text","location":"ast/ktast.ast/-node/-keyword/-minus-equal/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.MinusEqual.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.MinusMinus.text","location":"ast/ktast.ast/-node/-keyword/-minus-minus/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.MinusMinus.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Noinline.text","location":"ast/ktast.ast/-node/-keyword/-noinline/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Noinline.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Not.text","location":"ast/ktast.ast/-node/-keyword/-not/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Not.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.NotEqual.text","location":"ast/ktast.ast/-node/-keyword/-not-equal/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.NotEqual.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.NotIn.text","location":"ast/ktast.ast/-node/-keyword/-not-in/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.NotIn.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.NotIs.text","location":"ast/ktast.ast/-node/-keyword/-not-is/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.NotIs.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.NotNot.text","location":"ast/ktast.ast/-node/-keyword/-not-not/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.NotNot.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Object.text","location":"ast/ktast.ast/-node/-keyword/-object/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Object.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Open.text","location":"ast/ktast.ast/-node/-keyword/-open/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Open.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Operator.text","location":"ast/ktast.ast/-node/-keyword/-operator/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Operator.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.OrOr.text","location":"ast/ktast.ast/-node/-keyword/-or-or/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.OrOr.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Out.text","location":"ast/ktast.ast/-node/-keyword/-out/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Out.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Override.text","location":"ast/ktast.ast/-node/-keyword/-override/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Override.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Param.text","location":"ast/ktast.ast/-node/-keyword/-param/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Param.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Percent.text","location":"ast/ktast.ast/-node/-keyword/-percent/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Percent.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.PercentEqual.text","location":"ast/ktast.ast/-node/-keyword/-percent-equal/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.PercentEqual.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Plus.text","location":"ast/ktast.ast/-node/-keyword/-plus/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Plus.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.PlusEqual.text","location":"ast/ktast.ast/-node/-keyword/-plus-equal/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.PlusEqual.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.PlusPlus.text","location":"ast/ktast.ast/-node/-keyword/-plus-plus/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.PlusPlus.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Private.text","location":"ast/ktast.ast/-node/-keyword/-private/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Private.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Property.text","location":"ast/ktast.ast/-node/-keyword/-property/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Property.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Protected.text","location":"ast/ktast.ast/-node/-keyword/-protected/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Protected.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Public.text","location":"ast/ktast.ast/-node/-keyword/-public/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Public.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Question.text","location":"ast/ktast.ast/-node/-keyword/-question/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Question.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.QuestionColon.text","location":"ast/ktast.ast/-node/-keyword/-question-colon/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.QuestionColon.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.QuestionDot.text","location":"ast/ktast.ast/-node/-keyword/-question-dot/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.QuestionDot.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.RBracket.text","location":"ast/ktast.ast/-node/-keyword/-r-bracket/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.RBracket.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.RPar.text","location":"ast/ktast.ast/-node/-keyword/-r-par/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.RPar.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Receiver.text","location":"ast/ktast.ast/-node/-keyword/-receiver/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Receiver.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Reified.text","location":"ast/ktast.ast/-node/-keyword/-reified/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Reified.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Sealed.text","location":"ast/ktast.ast/-node/-keyword/-sealed/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Sealed.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Set.text","location":"ast/ktast.ast/-node/-keyword/-set/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Set.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.SetParam.text","location":"ast/ktast.ast/-node/-keyword/-set-param/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.SetParam.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Slash.text","location":"ast/ktast.ast/-node/-keyword/-slash/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Slash.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.SlashEqual.text","location":"ast/ktast.ast/-node/-keyword/-slash-equal/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.SlashEqual.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Suspend.text","location":"ast/ktast.ast/-node/-keyword/-suspend/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Suspend.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.TailRec.text","location":"ast/ktast.ast/-node/-keyword/-tail-rec/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.TailRec.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Val.text","location":"ast/ktast.ast/-node/-keyword/-val/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Val.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Value.text","location":"ast/ktast.ast/-node/-keyword/-value/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Value.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Var.text","location":"ast/ktast.ast/-node/-keyword/-var/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Var.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.Vararg.text","location":"ast/ktast.ast/-node/-keyword/-vararg/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.Vararg.text"]},{"name":"open override val text: String","description":"ktast.ast.Node.Keyword.When.text","location":"ast/ktast.ast/-node/-keyword/-when/text.html","searchKeys":["text","open override val text: String","ktast.ast.Node.Keyword.When.text"]},{"name":"open override val type: Node.Type","description":"ktast.ast.Node.Declaration.ClassOrObject.DelegationClassParent.type","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-delegation-class-parent/type.html","searchKeys":["type","open override val type: Node.Type","ktast.ast.Node.Declaration.ClassOrObject.DelegationClassParent.type"]},{"name":"open override val type: Node.Type","description":"ktast.ast.Node.Declaration.ClassOrObject.TypeClassParent.type","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-type-class-parent/type.html","searchKeys":["type","open override val type: Node.Type","ktast.ast.Node.Declaration.ClassOrObject.TypeClassParent.type"]},{"name":"open override val type: Node.Type","description":"ktast.ast.Node.Expression.WhenExpression.TypeWhenCondition.type","location":"ast/ktast.ast/-node/-expression/-when-expression/-type-when-condition/type.html","searchKeys":["type","open override val type: Node.Type","ktast.ast.Node.Expression.WhenExpression.TypeWhenCondition.type"]},{"name":"open override val type: Node.Type.SimpleType","description":"ktast.ast.Node.Declaration.ClassOrObject.ConstructorClassParent.type","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-constructor-class-parent/type.html","searchKeys":["type","open override val type: Node.Type.SimpleType","ktast.ast.Node.Declaration.ClassOrObject.ConstructorClassParent.type"]},{"name":"open override val type: Nothing? = null","description":"ktast.ast.Node.Expression.WhenExpression.ExpressionWhenCondition.type","location":"ast/ktast.ast/-node/-expression/-when-expression/-expression-when-condition/type.html","searchKeys":["type","open override val type: Nothing? = null","ktast.ast.Node.Expression.WhenExpression.ExpressionWhenCondition.type"]},{"name":"open override val type: Nothing? = null","description":"ktast.ast.Node.Expression.WhenExpression.RangeWhenCondition.type","location":"ast/ktast.ast/-node/-expression/-when-expression/-range-when-condition/type.html","searchKeys":["type","open override val type: Nothing? = null","ktast.ast.Node.Expression.WhenExpression.RangeWhenCondition.type"]},{"name":"open override val typeArguments: List<Node.TypeArgument>","description":"ktast.ast.Node.Expression.CallExpression.typeArguments","location":"ast/ktast.ast/-node/-expression/-call-expression/type-arguments.html","searchKeys":["typeArguments","open override val typeArguments: List<Node.TypeArgument>","ktast.ast.Node.Expression.CallExpression.typeArguments"]},{"name":"open override val typeArguments: List<Node.TypeArgument>","description":"ktast.ast.Node.Type.SimpleType.SimpleTypeQualifier.typeArguments","location":"ast/ktast.ast/-node/-type/-simple-type/-simple-type-qualifier/type-arguments.html","searchKeys":["typeArguments","open override val typeArguments: List<Node.TypeArgument>","ktast.ast.Node.Type.SimpleType.SimpleTypeQualifier.typeArguments"]},{"name":"open override val typeArguments: List<Node.TypeArgument>","description":"ktast.ast.Node.Type.SimpleType.typeArguments","location":"ast/ktast.ast/-node/-type/-simple-type/type-arguments.html","searchKeys":["typeArguments","open override val typeArguments: List<Node.TypeArgument>","ktast.ast.Node.Type.SimpleType.typeArguments"]},{"name":"open override val typeParameters: List<Node.TypeParameter>","description":"ktast.ast.Node.Declaration.ClassDeclaration.typeParameters","location":"ast/ktast.ast/-node/-declaration/-class-declaration/type-parameters.html","searchKeys":["typeParameters","open override val typeParameters: List<Node.TypeParameter>","ktast.ast.Node.Declaration.ClassDeclaration.typeParameters"]},{"name":"open override val typeParameters: List<Node.TypeParameter>","description":"ktast.ast.Node.Declaration.FunctionDeclaration.typeParameters","location":"ast/ktast.ast/-node/-declaration/-function-declaration/type-parameters.html","searchKeys":["typeParameters","open override val typeParameters: List<Node.TypeParameter>","ktast.ast.Node.Declaration.FunctionDeclaration.typeParameters"]},{"name":"open override val typeParameters: List<Node.TypeParameter>","description":"ktast.ast.Node.Declaration.PropertyDeclaration.typeParameters","location":"ast/ktast.ast/-node/-declaration/-property-declaration/type-parameters.html","searchKeys":["typeParameters","open override val typeParameters: List<Node.TypeParameter>","ktast.ast.Node.Declaration.PropertyDeclaration.typeParameters"]},{"name":"open override val typeParameters: List<Node.TypeParameter>","description":"ktast.ast.Node.Declaration.TypeAliasDeclaration.typeParameters","location":"ast/ktast.ast/-node/-declaration/-type-alias-declaration/type-parameters.html","searchKeys":["typeParameters","open override val typeParameters: List<Node.TypeParameter>","ktast.ast.Node.Declaration.TypeAliasDeclaration.typeParameters"]},{"name":"open val isClass: Boolean","description":"ktast.ast.Node.Declaration.ClassOrObject.isClass","location":"ast/ktast.ast/-node/-declaration/-class-or-object/is-class.html","searchKeys":["isClass","open val isClass: Boolean","ktast.ast.Node.Declaration.ClassOrObject.isClass"]},{"name":"open val isCompanion: Boolean","description":"ktast.ast.Node.Declaration.ClassOrObject.isCompanion","location":"ast/ktast.ast/-node/-declaration/-class-or-object/is-companion.html","searchKeys":["isCompanion","open val isCompanion: Boolean","ktast.ast.Node.Declaration.ClassOrObject.isCompanion"]},{"name":"open val isEnum: Boolean","description":"ktast.ast.Node.Declaration.ClassOrObject.isEnum","location":"ast/ktast.ast/-node/-declaration/-class-or-object/is-enum.html","searchKeys":["isEnum","open val isEnum: Boolean","ktast.ast.Node.Declaration.ClassOrObject.isEnum"]},{"name":"open val isInterface: Boolean","description":"ktast.ast.Node.Declaration.ClassOrObject.isInterface","location":"ast/ktast.ast/-node/-declaration/-class-or-object/is-interface.html","searchKeys":["isInterface","open val isInterface: Boolean","ktast.ast.Node.Declaration.ClassOrObject.isInterface"]},{"name":"open val isObject: Boolean","description":"ktast.ast.Node.Declaration.ClassOrObject.isObject","location":"ast/ktast.ast/-node/-declaration/-class-or-object/is-object.html","searchKeys":["isObject","open val isObject: Boolean","ktast.ast.Node.Declaration.ClassOrObject.isObject"]},{"name":"sealed interface Accessor : Node, Node.WithModifiers, Node.WithPostModifiers","description":"ktast.ast.Node.Declaration.PropertyDeclaration.Accessor","location":"ast/ktast.ast/-node/-declaration/-property-declaration/-accessor/index.html","searchKeys":["Accessor","sealed interface Accessor : Node, Node.WithModifiers, Node.WithPostModifiers","ktast.ast.Node.Declaration.PropertyDeclaration.Accessor"]},{"name":"sealed interface AnnotationTarget : Node.Keyword","description":"ktast.ast.Node.Modifier.AnnotationSet.AnnotationTarget","location":"ast/ktast.ast/-node/-modifier/-annotation-set/-annotation-target/index.html","searchKeys":["AnnotationTarget","sealed interface AnnotationTarget : Node.Keyword","ktast.ast.Node.Modifier.AnnotationSet.AnnotationTarget"]},{"name":"sealed interface BinaryOperator : Node.SimpleTextNode","description":"ktast.ast.Node.Expression.BinaryExpression.BinaryOperator","location":"ast/ktast.ast/-node/-expression/-binary-expression/-binary-operator/index.html","searchKeys":["BinaryOperator","sealed interface BinaryOperator : Node.SimpleTextNode","ktast.ast.Node.Expression.BinaryExpression.BinaryOperator"]},{"name":"sealed interface BinaryTypeOperator : Node.Keyword","description":"ktast.ast.Node.Expression.BinaryTypeExpression.BinaryTypeOperator","location":"ast/ktast.ast/-node/-expression/-binary-type-expression/-binary-type-operator/index.html","searchKeys":["BinaryTypeOperator","sealed interface BinaryTypeOperator : Node.Keyword","ktast.ast.Node.Expression.BinaryTypeExpression.BinaryTypeOperator"]},{"name":"sealed interface ClassDeclarationKeyword : Node.Keyword","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassDeclarationKeyword","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-declaration-keyword/index.html","searchKeys":["ClassDeclarationKeyword","sealed interface ClassDeclarationKeyword : Node.Keyword","ktast.ast.Node.Declaration.ClassOrObject.ClassDeclarationKeyword"]},{"name":"sealed interface ClassOrInterfaceKeyword : Node.Declaration.ClassOrObject.ClassDeclarationKeyword","description":"ktast.ast.Node.Declaration.ClassDeclaration.ClassOrInterfaceKeyword","location":"ast/ktast.ast/-node/-declaration/-class-declaration/-class-or-interface-keyword/index.html","searchKeys":["ClassOrInterfaceKeyword","sealed interface ClassOrInterfaceKeyword : Node.Declaration.ClassOrObject.ClassDeclarationKeyword","ktast.ast.Node.Declaration.ClassDeclaration.ClassOrInterfaceKeyword"]},{"name":"sealed interface ClassOrObject : Node.Declaration, Node.WithModifiers","description":"ktast.ast.Node.Declaration.ClassOrObject","location":"ast/ktast.ast/-node/-declaration/-class-or-object/index.html","searchKeys":["ClassOrObject","sealed interface ClassOrObject : Node.Declaration, Node.WithModifiers","ktast.ast.Node.Declaration.ClassOrObject"]},{"name":"sealed interface ClassParent : Node, Node.WithValueArguments","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassParent","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-parent/index.html","searchKeys":["ClassParent","sealed interface ClassParent : Node, Node.WithValueArguments","ktast.ast.Node.Declaration.ClassOrObject.ClassParent"]},{"name":"sealed interface ConstantLiteralExpression : Node.Expression, Node.SimpleTextNode","description":"ktast.ast.Node.Expression.ConstantLiteralExpression","location":"ast/ktast.ast/-node/-expression/-constant-literal-expression/index.html","searchKeys":["ConstantLiteralExpression","sealed interface ConstantLiteralExpression : Node.Expression, Node.SimpleTextNode","ktast.ast.Node.Expression.ConstantLiteralExpression"]},{"name":"sealed interface Declaration : Node.Statement","description":"ktast.ast.Node.Declaration","location":"ast/ktast.ast/-node/-declaration/index.html","searchKeys":["Declaration","sealed interface Declaration : Node.Statement","ktast.ast.Node.Declaration"]},{"name":"sealed interface DoubleColonExpression : Node.Expression","description":"ktast.ast.Node.Expression.DoubleColonExpression","location":"ast/ktast.ast/-node/-expression/-double-colon-expression/index.html","searchKeys":["DoubleColonExpression","sealed interface DoubleColonExpression : Node.Expression","ktast.ast.Node.Expression.DoubleColonExpression"]},{"name":"sealed interface Expression : Node.Statement","description":"ktast.ast.Node.Expression","location":"ast/ktast.ast/-node/-expression/index.html","searchKeys":["Expression","sealed interface Expression : Node.Statement","ktast.ast.Node.Expression"]},{"name":"sealed interface Extra : Node.SimpleTextNode","description":"ktast.ast.Node.Extra","location":"ast/ktast.ast/-node/-extra/index.html","searchKeys":["Extra","sealed interface Extra : Node.SimpleTextNode","ktast.ast.Node.Extra"]},{"name":"sealed interface Keyword : Node.SimpleTextNode","description":"ktast.ast.Node.Keyword","location":"ast/ktast.ast/-node/-keyword/index.html","searchKeys":["Keyword","sealed interface Keyword : Node.SimpleTextNode","ktast.ast.Node.Keyword"]},{"name":"sealed interface KeywordModifier : Node.Modifier, Node.Keyword","description":"ktast.ast.Node.Modifier.KeywordModifier","location":"ast/ktast.ast/-node/-modifier/-keyword-modifier/index.html","searchKeys":["KeywordModifier","sealed interface KeywordModifier : Node.Modifier, Node.Keyword","ktast.ast.Node.Modifier.KeywordModifier"]},{"name":"sealed interface Modifier : Node","description":"ktast.ast.Node.Modifier","location":"ast/ktast.ast/-node/-modifier/index.html","searchKeys":["Modifier","sealed interface Modifier : Node","ktast.ast.Node.Modifier"]},{"name":"sealed interface Node","description":"ktast.ast.Node","location":"ast/ktast.ast/-node/index.html","searchKeys":["Node","sealed interface Node","ktast.ast.Node"]},{"name":"sealed interface PostModifier : Node","description":"ktast.ast.Node.PostModifier","location":"ast/ktast.ast/-node/-post-modifier/index.html","searchKeys":["PostModifier","sealed interface PostModifier : Node","ktast.ast.Node.PostModifier"]},{"name":"sealed interface SimpleTextNode : Node","description":"ktast.ast.Node.SimpleTextNode","location":"ast/ktast.ast/-node/-simple-text-node/index.html","searchKeys":["SimpleTextNode","sealed interface SimpleTextNode : Node","ktast.ast.Node.SimpleTextNode"]},{"name":"sealed interface Statement : Node","description":"ktast.ast.Node.Statement","location":"ast/ktast.ast/-node/-statement/index.html","searchKeys":["Statement","sealed interface Statement : Node","ktast.ast.Node.Statement"]},{"name":"sealed interface StringEntry : Node","description":"ktast.ast.Node.Expression.StringLiteralExpression.StringEntry","location":"ast/ktast.ast/-node/-expression/-string-literal-expression/-string-entry/index.html","searchKeys":["StringEntry","sealed interface StringEntry : Node","ktast.ast.Node.Expression.StringLiteralExpression.StringEntry"]},{"name":"sealed interface Type : Node, Node.WithModifiers","description":"ktast.ast.Node.Type","location":"ast/ktast.ast/-node/-type/index.html","searchKeys":["Type","sealed interface Type : Node, Node.WithModifiers","ktast.ast.Node.Type"]},{"name":"sealed interface UnaryExpression : Node.Expression","description":"ktast.ast.Node.Expression.UnaryExpression","location":"ast/ktast.ast/-node/-expression/-unary-expression/index.html","searchKeys":["UnaryExpression","sealed interface UnaryExpression : Node.Expression","ktast.ast.Node.Expression.UnaryExpression"]},{"name":"sealed interface UnaryOperator : Node.Keyword","description":"ktast.ast.Node.Expression.UnaryExpression.UnaryOperator","location":"ast/ktast.ast/-node/-expression/-unary-expression/-unary-operator/index.html","searchKeys":["UnaryOperator","sealed interface UnaryOperator : Node.Keyword","ktast.ast.Node.Expression.UnaryExpression.UnaryOperator"]},{"name":"sealed interface ValOrVarKeyword : Node.Keyword","description":"ktast.ast.Node.Keyword.ValOrVarKeyword","location":"ast/ktast.ast/-node/-keyword/-val-or-var-keyword/index.html","searchKeys":["ValOrVarKeyword","sealed interface ValOrVarKeyword : Node.Keyword","ktast.ast.Node.Keyword.ValOrVarKeyword"]},{"name":"sealed interface WhenBranch : Node","description":"ktast.ast.Node.Expression.WhenExpression.WhenBranch","location":"ast/ktast.ast/-node/-expression/-when-expression/-when-branch/index.html","searchKeys":["WhenBranch","sealed interface WhenBranch : Node","ktast.ast.Node.Expression.WhenExpression.WhenBranch"]},{"name":"sealed interface WhenCondition : Node","description":"ktast.ast.Node.Expression.WhenExpression.WhenCondition","location":"ast/ktast.ast/-node/-expression/-when-expression/-when-condition/index.html","searchKeys":["WhenCondition","sealed interface WhenCondition : Node","ktast.ast.Node.Expression.WhenExpression.WhenCondition"]},{"name":"sealed interface WhenConditionOperator : Node.Keyword","description":"ktast.ast.Node.Expression.WhenExpression.WhenConditionOperator","location":"ast/ktast.ast/-node/-expression/-when-expression/-when-condition-operator/index.html","searchKeys":["WhenConditionOperator","sealed interface WhenConditionOperator : Node.Keyword","ktast.ast.Node.Expression.WhenExpression.WhenConditionOperator"]},{"name":"sealed interface WhenConditionRangeOperator : Node.Expression.WhenExpression.WhenConditionOperator","description":"ktast.ast.Node.Expression.WhenExpression.WhenConditionRangeOperator","location":"ast/ktast.ast/-node/-expression/-when-expression/-when-condition-range-operator/index.html","searchKeys":["WhenConditionRangeOperator","sealed interface WhenConditionRangeOperator : Node.Expression.WhenExpression.WhenConditionOperator","ktast.ast.Node.Expression.WhenExpression.WhenConditionRangeOperator"]},{"name":"sealed interface WhenConditionTypeOperator : Node.Expression.WhenExpression.WhenConditionOperator","description":"ktast.ast.Node.Expression.WhenExpression.WhenConditionTypeOperator","location":"ast/ktast.ast/-node/-expression/-when-expression/-when-condition-type-operator/index.html","searchKeys":["WhenConditionTypeOperator","sealed interface WhenConditionTypeOperator : Node.Expression.WhenExpression.WhenConditionOperator","ktast.ast.Node.Expression.WhenExpression.WhenConditionTypeOperator"]},{"name":"sealed interface WhileStatementBase : Node.Statement","description":"ktast.ast.Node.Statement.WhileStatementBase","location":"ast/ktast.ast/-node/-statement/-while-statement-base/index.html","searchKeys":["WhileStatementBase","sealed interface WhileStatementBase : Node.Statement","ktast.ast.Node.Statement.WhileStatementBase"]},{"name":"val accessors: List<Node.Declaration.PropertyDeclaration.Accessor>","description":"ktast.ast.Node.Declaration.PropertyDeclaration.accessors","location":"ast/ktast.ast/-node/-declaration/-property-declaration/accessors.html","searchKeys":["accessors","val accessors: List<Node.Declaration.PropertyDeclaration.Accessor>","ktast.ast.Node.Declaration.PropertyDeclaration.accessors"]},{"name":"val aliasName: Node.Expression.NameExpression?","description":"ktast.ast.Node.ImportDirective.aliasName","location":"ast/ktast.ast/-node/-import-directive/alias-name.html","searchKeys":["aliasName","val aliasName: Node.Expression.NameExpression?","ktast.ast.Node.ImportDirective.aliasName"]},{"name":"val annotationSets: List<Node.Modifier.AnnotationSet>","description":"ktast.ast.Node.KotlinFile.annotationSets","location":"ast/ktast.ast/-node/-kotlin-file/annotation-sets.html","searchKeys":["annotationSets","val annotationSets: List<Node.Modifier.AnnotationSet>","ktast.ast.Node.KotlinFile.annotationSets"]},{"name":"val annotations: List<Node.Modifier.AnnotationSet.Annotation>","description":"ktast.ast.Node.Modifier.AnnotationSet.annotations","location":"ast/ktast.ast/-node/-modifier/-annotation-set/annotations.html","searchKeys":["annotations","val annotations: List<Node.Modifier.AnnotationSet.Annotation>","ktast.ast.Node.Modifier.AnnotationSet.annotations"]},{"name":"val arrow: Node.Keyword.Arrow?","description":"ktast.ast.Node.Expression.LambdaExpression.arrow","location":"ast/ktast.ast/-node/-expression/-lambda-expression/arrow.html","searchKeys":["arrow","val arrow: Node.Keyword.Arrow?","ktast.ast.Node.Expression.LambdaExpression.arrow"]},{"name":"val block: Node.Expression.BlockExpression","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.Initializer.block","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-initializer/block.html","searchKeys":["block","val block: Node.Expression.BlockExpression","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.Initializer.block"]},{"name":"val block: Node.Expression.BlockExpression","description":"ktast.ast.Node.Expression.TryExpression.CatchClause.block","location":"ast/ktast.ast/-node/-expression/-try-expression/-catch-clause/block.html","searchKeys":["block","val block: Node.Expression.BlockExpression","ktast.ast.Node.Expression.TryExpression.CatchClause.block"]},{"name":"val block: Node.Expression.BlockExpression","description":"ktast.ast.Node.Expression.TryExpression.block","location":"ast/ktast.ast/-node/-expression/-try-expression/block.html","searchKeys":["block","val block: Node.Expression.BlockExpression","ktast.ast.Node.Expression.TryExpression.block"]},{"name":"val block: Node.Expression.BlockExpression?","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.SecondaryConstructor.block","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-secondary-constructor/block.html","searchKeys":["block","val block: Node.Expression.BlockExpression?","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.SecondaryConstructor.block"]},{"name":"val body: Node.Expression","description":"ktast.ast.Node.Expression.IfExpression.body","location":"ast/ktast.ast/-node/-expression/-if-expression/body.html","searchKeys":["body","val body: Node.Expression","ktast.ast.Node.Expression.IfExpression.body"]},{"name":"val body: Node.Expression","description":"ktast.ast.Node.Statement.ForStatement.body","location":"ast/ktast.ast/-node/-statement/-for-statement/body.html","searchKeys":["body","val body: Node.Expression","ktast.ast.Node.Statement.ForStatement.body"]},{"name":"val body: Node.Expression?","description":"ktast.ast.Node.Declaration.FunctionDeclaration.body","location":"ast/ktast.ast/-node/-declaration/-function-declaration/body.html","searchKeys":["body","val body: Node.Expression?","ktast.ast.Node.Declaration.FunctionDeclaration.body"]},{"name":"val body: Node.Statement","description":"ktast.ast.Node.Declaration.ScriptInitializer.body","location":"ast/ktast.ast/-node/-declaration/-script-initializer/body.html","searchKeys":["body","val body: Node.Statement","ktast.ast.Node.Declaration.ScriptInitializer.body"]},{"name":"val branches: List<Node.Expression.WhenExpression.WhenBranch>","description":"ktast.ast.Node.Expression.WhenExpression.branches","location":"ast/ktast.ast/-node/-expression/-when-expression/branches.html","searchKeys":["branches","val branches: List<Node.Expression.WhenExpression.WhenBranch>","ktast.ast.Node.Expression.WhenExpression.branches"]},{"name":"val calleeExpression: Node.Expression","description":"ktast.ast.Node.Expression.CallExpression.calleeExpression","location":"ast/ktast.ast/-node/-expression/-call-expression/callee-expression.html","searchKeys":["calleeExpression","val calleeExpression: Node.Expression","ktast.ast.Node.Expression.CallExpression.calleeExpression"]},{"name":"val catchClauses: List<Node.Expression.TryExpression.CatchClause>","description":"ktast.ast.Node.Expression.TryExpression.catchClauses","location":"ast/ktast.ast/-node/-expression/-try-expression/catch-clauses.html","searchKeys":["catchClauses","val catchClauses: List<Node.Expression.TryExpression.CatchClause>","ktast.ast.Node.Expression.TryExpression.catchClauses"]},{"name":"val classBody: Node.Declaration.ClassOrObject.ClassBody?","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.EnumEntry.classBody","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-enum-entry/class-body.html","searchKeys":["classBody","val classBody: Node.Declaration.ClassOrObject.ClassBody?","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.EnumEntry.classBody"]},{"name":"val condition: Node.Expression","description":"ktast.ast.Node.Expression.IfExpression.condition","location":"ast/ktast.ast/-node/-expression/-if-expression/condition.html","searchKeys":["condition","val condition: Node.Expression","ktast.ast.Node.Expression.IfExpression.condition"]},{"name":"val constraints: List<Node.PostModifier.TypeConstraintSet.TypeConstraint>","description":"ktast.ast.Node.PostModifier.TypeConstraintSet.constraints","location":"ast/ktast.ast/-node/-post-modifier/-type-constraint-set/constraints.html","searchKeys":["constraints","val constraints: List<Node.PostModifier.TypeConstraintSet.TypeConstraint>","ktast.ast.Node.PostModifier.TypeConstraintSet.constraints"]},{"name":"val constructorKeyword: Node.Keyword.Constructor","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.SecondaryConstructor.constructorKeyword","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-secondary-constructor/constructor-keyword.html","searchKeys":["constructorKeyword","val constructorKeyword: Node.Keyword.Constructor","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.SecondaryConstructor.constructorKeyword"]},{"name":"val constructorKeyword: Node.Keyword.Constructor?","description":"ktast.ast.Node.Declaration.ClassDeclaration.PrimaryConstructor.constructorKeyword","location":"ast/ktast.ast/-node/-declaration/-class-declaration/-primary-constructor/constructor-keyword.html","searchKeys":["constructorKeyword","val constructorKeyword: Node.Keyword.Constructor?","ktast.ast.Node.Declaration.ClassDeclaration.PrimaryConstructor.constructorKeyword"]},{"name":"val contextReceiver: Node.ContextReceiver?","description":"ktast.ast.Node.Type.FunctionType.contextReceiver","location":"ast/ktast.ast/-node/-type/-function-type/context-receiver.html","searchKeys":["contextReceiver","val contextReceiver: Node.ContextReceiver?","ktast.ast.Node.Type.FunctionType.contextReceiver"]},{"name":"val contractEffects: List<Node.Expression>","description":"ktast.ast.Node.PostModifier.Contract.contractEffects","location":"ast/ktast.ast/-node/-post-modifier/-contract/contract-effects.html","searchKeys":["contractEffects","val contractEffects: List<Node.Expression>","ktast.ast.Node.PostModifier.Contract.contractEffects"]},{"name":"val declaration: Node.Declaration.ObjectDeclaration","description":"ktast.ast.Node.Expression.ObjectLiteralExpression.declaration","location":"ast/ktast.ast/-node/-expression/-object-literal-expression/declaration.html","searchKeys":["declaration","val declaration: Node.Declaration.ObjectDeclaration","ktast.ast.Node.Expression.ObjectLiteralExpression.declaration"]},{"name":"val defaultValue: Node.Expression?","description":"ktast.ast.Node.FunctionParameter.defaultValue","location":"ast/ktast.ast/-node/-function-parameter/default-value.html","searchKeys":["defaultValue","val defaultValue: Node.Expression?","ktast.ast.Node.FunctionParameter.defaultValue"]},{"name":"val delegateExpression: Node.Expression?","description":"ktast.ast.Node.Declaration.PropertyDeclaration.delegateExpression","location":"ast/ktast.ast/-node/-declaration/-property-declaration/delegate-expression.html","searchKeys":["delegateExpression","val delegateExpression: Node.Expression?","ktast.ast.Node.Declaration.PropertyDeclaration.delegateExpression"]},{"name":"val delegationCall: Node.Expression.CallExpression?","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.SecondaryConstructor.delegationCall","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-secondary-constructor/delegation-call.html","searchKeys":["delegationCall","val delegationCall: Node.Expression.CallExpression?","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.SecondaryConstructor.delegationCall"]},{"name":"val destructuringType: Node.Type?","description":"ktast.ast.Node.LambdaParameter.destructuringType","location":"ast/ktast.ast/-node/-lambda-parameter/destructuring-type.html","searchKeys":["destructuringType","val destructuringType: Node.Type?","ktast.ast.Node.LambdaParameter.destructuringType"]},{"name":"val elseBody: Node.Expression?","description":"ktast.ast.Node.Expression.IfExpression.elseBody","location":"ast/ktast.ast/-node/-expression/-if-expression/else-body.html","searchKeys":["elseBody","val elseBody: Node.Expression?","ktast.ast.Node.Expression.IfExpression.elseBody"]},{"name":"val entries: List<Node.Expression.StringLiteralExpression.StringEntry>","description":"ktast.ast.Node.Expression.StringLiteralExpression.entries","location":"ast/ktast.ast/-node/-expression/-string-literal-expression/entries.html","searchKeys":["entries","val entries: List<Node.Expression.StringLiteralExpression.StringEntry>","ktast.ast.Node.Expression.StringLiteralExpression.entries"]},{"name":"val enumEntries: List<Node.Declaration.ClassOrObject.ClassBody.EnumEntry>","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.enumEntries","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/enum-entries.html","searchKeys":["enumEntries","val enumEntries: List<Node.Declaration.ClassOrObject.ClassBody.EnumEntry>","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.enumEntries"]},{"name":"val expression: Node.Expression","description":"ktast.ast.Node.Expression.IndexedAccessExpression.expression","location":"ast/ktast.ast/-node/-expression/-indexed-access-expression/expression.html","searchKeys":["expression","val expression: Node.Expression","ktast.ast.Node.Expression.IndexedAccessExpression.expression"]},{"name":"val expression: Node.Expression","description":"ktast.ast.Node.Expression.StringLiteralExpression.TemplateStringEntry.expression","location":"ast/ktast.ast/-node/-expression/-string-literal-expression/-template-string-entry/expression.html","searchKeys":["expression","val expression: Node.Expression","ktast.ast.Node.Expression.StringLiteralExpression.TemplateStringEntry.expression"]},{"name":"val expression: Node.Expression","description":"ktast.ast.Node.Expression.ThrowExpression.expression","location":"ast/ktast.ast/-node/-expression/-throw-expression/expression.html","searchKeys":["expression","val expression: Node.Expression","ktast.ast.Node.Expression.ThrowExpression.expression"]},{"name":"val expression: Node.Expression","description":"ktast.ast.Node.Expression.WhenExpression.WhenSubject.expression","location":"ast/ktast.ast/-node/-expression/-when-expression/-when-subject/expression.html","searchKeys":["expression","val expression: Node.Expression","ktast.ast.Node.Expression.WhenExpression.WhenSubject.expression"]},{"name":"val expression: Node.Expression","description":"ktast.ast.Node.ValueArgument.expression","location":"ast/ktast.ast/-node/-value-argument/expression.html","searchKeys":["expression","val expression: Node.Expression","ktast.ast.Node.ValueArgument.expression"]},{"name":"val expression: Node.Expression?","description":"ktast.ast.Node.Expression.ReturnExpression.expression","location":"ast/ktast.ast/-node/-expression/-return-expression/expression.html","searchKeys":["expression","val expression: Node.Expression?","ktast.ast.Node.Expression.ReturnExpression.expression"]},{"name":"val expressions: List<Node.Expression>","description":"ktast.ast.Node.Expression.CollectionLiteralExpression.expressions","location":"ast/ktast.ast/-node/-expression/-collection-literal-expression/expressions.html","searchKeys":["expressions","val expressions: List<Node.Expression>","ktast.ast.Node.Expression.CollectionLiteralExpression.expressions"]},{"name":"val finallyBlock: Node.Expression.BlockExpression?","description":"ktast.ast.Node.Expression.TryExpression.finallyBlock","location":"ast/ktast.ast/-node/-expression/-try-expression/finally-block.html","searchKeys":["finallyBlock","val finallyBlock: Node.Expression.BlockExpression?","ktast.ast.Node.Expression.TryExpression.finallyBlock"]},{"name":"val function: Node.Declaration.FunctionDeclaration","description":"ktast.ast.Node.Expression.AnonymousFunctionExpression.function","location":"ast/ktast.ast/-node/-expression/-anonymous-function-expression/function.html","searchKeys":["function","val function: Node.Declaration.FunctionDeclaration","ktast.ast.Node.Expression.AnonymousFunctionExpression.function"]},{"name":"val importDirectives: List<Node.ImportDirective>","description":"ktast.ast.Node.KotlinFile.importDirectives","location":"ast/ktast.ast/-node/-kotlin-file/import-directives.html","searchKeys":["importDirectives","val importDirectives: List<Node.ImportDirective>","ktast.ast.Node.KotlinFile.importDirectives"]},{"name":"val inKeyword: Node.Keyword.In","description":"ktast.ast.Node.Statement.ForStatement.inKeyword","location":"ast/ktast.ast/-node/-statement/-for-statement/in-keyword.html","searchKeys":["inKeyword","val inKeyword: Node.Keyword.In","ktast.ast.Node.Statement.ForStatement.inKeyword"]},{"name":"val indices: List<Node.Expression>","description":"ktast.ast.Node.Expression.IndexedAccessExpression.indices","location":"ast/ktast.ast/-node/-expression/-indexed-access-expression/indices.html","searchKeys":["indices","val indices: List<Node.Expression>","ktast.ast.Node.Expression.IndexedAccessExpression.indices"]},{"name":"val initializerExpression: Node.Expression?","description":"ktast.ast.Node.Declaration.PropertyDeclaration.initializerExpression","location":"ast/ktast.ast/-node/-declaration/-property-declaration/initializer-expression.html","searchKeys":["initializerExpression","val initializerExpression: Node.Expression?","ktast.ast.Node.Declaration.PropertyDeclaration.initializerExpression"]},{"name":"val innerExpression: Node.Expression","description":"ktast.ast.Node.Expression.ParenthesizedExpression.innerExpression","location":"ast/ktast.ast/-node/-expression/-parenthesized-expression/inner-expression.html","searchKeys":["innerExpression","val innerExpression: Node.Expression","ktast.ast.Node.Expression.ParenthesizedExpression.innerExpression"]},{"name":"val innerType: Node.Type","description":"ktast.ast.Node.Type.NullableType.innerType","location":"ast/ktast.ast/-node/-type/-nullable-type/inner-type.html","searchKeys":["innerType","val innerType: Node.Type","ktast.ast.Node.Type.NullableType.innerType"]},{"name":"val innerType: Node.Type","description":"ktast.ast.Node.Type.ParenthesizedType.innerType","location":"ast/ktast.ast/-node/-type/-parenthesized-type/inner-type.html","searchKeys":["innerType","val innerType: Node.Type","ktast.ast.Node.Type.ParenthesizedType.innerType"]},{"name":"val lBracket: Node.Keyword.LBracket","description":"ktast.ast.Node.PostModifier.Contract.lBracket","location":"ast/ktast.ast/-node/-post-modifier/-contract/l-bracket.html","searchKeys":["lBracket","val lBracket: Node.Keyword.LBracket","ktast.ast.Node.PostModifier.Contract.lBracket"]},{"name":"val lBracket: Node.Keyword.LBracket?","description":"ktast.ast.Node.Modifier.AnnotationSet.lBracket","location":"ast/ktast.ast/-node/-modifier/-annotation-set/l-bracket.html","searchKeys":["lBracket","val lBracket: Node.Keyword.LBracket?","ktast.ast.Node.Modifier.AnnotationSet.lBracket"]},{"name":"val lPar: Node.Keyword.LPar","description":"ktast.ast.Node.ContextReceiver.lPar","location":"ast/ktast.ast/-node/-context-receiver/l-par.html","searchKeys":["lPar","val lPar: Node.Keyword.LPar","ktast.ast.Node.ContextReceiver.lPar"]},{"name":"val lPar: Node.Keyword.LPar","description":"ktast.ast.Node.Expression.IfExpression.lPar","location":"ast/ktast.ast/-node/-expression/-if-expression/l-par.html","searchKeys":["lPar","val lPar: Node.Keyword.LPar","ktast.ast.Node.Expression.IfExpression.lPar"]},{"name":"val lPar: Node.Keyword.LPar","description":"ktast.ast.Node.Expression.WhenExpression.WhenSubject.lPar","location":"ast/ktast.ast/-node/-expression/-when-expression/-when-subject/l-par.html","searchKeys":["lPar","val lPar: Node.Keyword.LPar","ktast.ast.Node.Expression.WhenExpression.WhenSubject.lPar"]},{"name":"val lPar: Node.Keyword.LPar","description":"ktast.ast.Node.Statement.ForStatement.lPar","location":"ast/ktast.ast/-node/-statement/-for-statement/l-par.html","searchKeys":["lPar","val lPar: Node.Keyword.LPar","ktast.ast.Node.Statement.ForStatement.lPar"]},{"name":"val lPar: Node.Keyword.LPar","description":"ktast.ast.Node.Type.FunctionType.lPar","location":"ast/ktast.ast/-node/-type/-function-type/l-par.html","searchKeys":["lPar","val lPar: Node.Keyword.LPar","ktast.ast.Node.Type.FunctionType.lPar"]},{"name":"val lPar: Node.Keyword.LPar","description":"ktast.ast.Node.Type.ParenthesizedType.lPar","location":"ast/ktast.ast/-node/-type/-parenthesized-type/l-par.html","searchKeys":["lPar","val lPar: Node.Keyword.LPar","ktast.ast.Node.Type.ParenthesizedType.lPar"]},{"name":"val lPar: Node.Keyword.LPar?","description":"ktast.ast.Node.Declaration.PropertyDeclaration.lPar","location":"ast/ktast.ast/-node/-declaration/-property-declaration/l-par.html","searchKeys":["lPar","val lPar: Node.Keyword.LPar?","ktast.ast.Node.Declaration.PropertyDeclaration.lPar"]},{"name":"val lPar: Node.Keyword.LPar?","description":"ktast.ast.Node.LambdaParameter.lPar","location":"ast/ktast.ast/-node/-lambda-parameter/l-par.html","searchKeys":["lPar","val lPar: Node.Keyword.LPar?","ktast.ast.Node.LambdaParameter.lPar"]},{"name":"val label: Node.Expression.NameExpression","description":"ktast.ast.Node.Expression.LabeledExpression.label","location":"ast/ktast.ast/-node/-expression/-labeled-expression/label.html","searchKeys":["label","val label: Node.Expression.NameExpression","ktast.ast.Node.Expression.LabeledExpression.label"]},{"name":"val lambdaArgument: Node.Expression?","description":"ktast.ast.Node.Expression.CallExpression.lambdaArgument","location":"ast/ktast.ast/-node/-expression/-call-expression/lambda-argument.html","searchKeys":["lambdaArgument","val lambdaArgument: Node.Expression?","ktast.ast.Node.Expression.CallExpression.lambdaArgument"]},{"name":"val lhs: Node.Expression","description":"ktast.ast.Node.Expression.BinaryExpression.lhs","location":"ast/ktast.ast/-node/-expression/-binary-expression/lhs.html","searchKeys":["lhs","val lhs: Node.Expression","ktast.ast.Node.Expression.BinaryExpression.lhs"]},{"name":"val lhs: Node.Expression","description":"ktast.ast.Node.Expression.BinaryTypeExpression.lhs","location":"ast/ktast.ast/-node/-expression/-binary-type-expression/lhs.html","searchKeys":["lhs","val lhs: Node.Expression","ktast.ast.Node.Expression.BinaryTypeExpression.lhs"]},{"name":"val loopParameter: Node.LambdaParameter","description":"ktast.ast.Node.Statement.ForStatement.loopParameter","location":"ast/ktast.ast/-node/-statement/-for-statement/loop-parameter.html","searchKeys":["loopParameter","val loopParameter: Node.LambdaParameter","ktast.ast.Node.Statement.ForStatement.loopParameter"]},{"name":"val loopRange: Node.Expression","description":"ktast.ast.Node.Statement.ForStatement.loopRange","location":"ast/ktast.ast/-node/-statement/-for-statement/loop-range.html","searchKeys":["loopRange","val loopRange: Node.Expression","ktast.ast.Node.Statement.ForStatement.loopRange"]},{"name":"val name: Node.Expression.NameExpression","description":"ktast.ast.Node.Declaration.ClassOrObject.ClassBody.EnumEntry.name","location":"ast/ktast.ast/-node/-declaration/-class-or-object/-class-body/-enum-entry/name.html","searchKeys":["name","val name: Node.Expression.NameExpression","ktast.ast.Node.Declaration.ClassOrObject.ClassBody.EnumEntry.name"]},{"name":"val name: Node.Expression.NameExpression","description":"ktast.ast.Node.Declaration.TypeAliasDeclaration.name","location":"ast/ktast.ast/-node/-declaration/-type-alias-declaration/name.html","searchKeys":["name","val name: Node.Expression.NameExpression","ktast.ast.Node.Declaration.TypeAliasDeclaration.name"]},{"name":"val name: Node.Expression.NameExpression","description":"ktast.ast.Node.FunctionParameter.name","location":"ast/ktast.ast/-node/-function-parameter/name.html","searchKeys":["name","val name: Node.Expression.NameExpression","ktast.ast.Node.FunctionParameter.name"]},{"name":"val name: Node.Expression.NameExpression","description":"ktast.ast.Node.PostModifier.TypeConstraintSet.TypeConstraint.name","location":"ast/ktast.ast/-node/-post-modifier/-type-constraint-set/-type-constraint/name.html","searchKeys":["name","val name: Node.Expression.NameExpression","ktast.ast.Node.PostModifier.TypeConstraintSet.TypeConstraint.name"]},{"name":"val name: Node.Expression.NameExpression","description":"ktast.ast.Node.TypeParameter.name","location":"ast/ktast.ast/-node/-type-parameter/name.html","searchKeys":["name","val name: Node.Expression.NameExpression","ktast.ast.Node.TypeParameter.name"]},{"name":"val name: Node.Expression.NameExpression","description":"ktast.ast.Node.Variable.name","location":"ast/ktast.ast/-node/-variable/name.html","searchKeys":["name","val name: Node.Expression.NameExpression","ktast.ast.Node.Variable.name"]},{"name":"val name: Node.Expression.NameExpression?","description":"ktast.ast.Node.Declaration.FunctionDeclaration.name","location":"ast/ktast.ast/-node/-declaration/-function-declaration/name.html","searchKeys":["name","val name: Node.Expression.NameExpression?","ktast.ast.Node.Declaration.FunctionDeclaration.name"]},{"name":"val name: Node.Expression.NameExpression?","description":"ktast.ast.Node.Type.FunctionType.FunctionTypeParameter.name","location":"ast/ktast.ast/-node/-type/-function-type/-function-type-parameter/name.html","searchKeys":["name","val name: Node.Expression.NameExpression?","ktast.ast.Node.Type.FunctionType.FunctionTypeParameter.name"]},{"name":"val name: Node.Expression.NameExpression?","description":"ktast.ast.Node.ValueArgument.name","location":"ast/ktast.ast/-node/-value-argument/name.html","searchKeys":["name","val name: Node.Expression.NameExpression?","ktast.ast.Node.ValueArgument.name"]},{"name":"val names: List<Node.Expression.NameExpression>","description":"ktast.ast.Node.ImportDirective.names","location":"ast/ktast.ast/-node/-import-directive/names.html","searchKeys":["names","val names: List<Node.Expression.NameExpression>","ktast.ast.Node.ImportDirective.names"]},{"name":"val names: List<Node.Expression.NameExpression>","description":"ktast.ast.Node.PackageDirective.names","location":"ast/ktast.ast/-node/-package-directive/names.html","searchKeys":["names","val names: List<Node.Expression.NameExpression>","ktast.ast.Node.PackageDirective.names"]},{"name":"val node: T","description":"ktast.ast.NodePath.node","location":"ast/ktast.ast/-node-path/node.html","searchKeys":["node","val node: T","ktast.ast.NodePath.node"]},{"name":"val operator: Node.Expression.BinaryExpression.BinaryOperator","description":"ktast.ast.Node.Expression.BinaryExpression.operator","location":"ast/ktast.ast/-node/-expression/-binary-expression/operator.html","searchKeys":["operator","val operator: Node.Expression.BinaryExpression.BinaryOperator","ktast.ast.Node.Expression.BinaryExpression.operator"]},{"name":"val operator: Node.Expression.BinaryTypeExpression.BinaryTypeOperator","description":"ktast.ast.Node.Expression.BinaryTypeExpression.operator","location":"ast/ktast.ast/-node/-expression/-binary-type-expression/operator.html","searchKeys":["operator","val operator: Node.Expression.BinaryTypeExpression.BinaryTypeOperator","ktast.ast.Node.Expression.BinaryTypeExpression.operator"]},{"name":"val packageDirective: Node.PackageDirective?","description":"ktast.ast.Node.KotlinFile.packageDirective","location":"ast/ktast.ast/-node/-kotlin-file/package-directive.html","searchKeys":["packageDirective","val packageDirective: Node.PackageDirective?","ktast.ast.Node.KotlinFile.packageDirective"]},{"name":"val parameter: Node.FunctionParameter?","description":"ktast.ast.Node.Declaration.PropertyDeclaration.Setter.parameter","location":"ast/ktast.ast/-node/-declaration/-property-declaration/-setter/parameter.html","searchKeys":["parameter","val parameter: Node.FunctionParameter?","ktast.ast.Node.Declaration.PropertyDeclaration.Setter.parameter"]},{"name":"val parameters: List<Node.LambdaParameter>","description":"ktast.ast.Node.Expression.LambdaExpression.parameters","location":"ast/ktast.ast/-node/-expression/-lambda-expression/parameters.html","searchKeys":["parameters","val parameters: List<Node.LambdaParameter>","ktast.ast.Node.Expression.LambdaExpression.parameters"]},{"name":"val parameters: List<Node.Type.FunctionType.FunctionTypeParameter>","description":"ktast.ast.Node.Type.FunctionType.parameters","location":"ast/ktast.ast/-node/-type/-function-type/parameters.html","searchKeys":["parameters","val parameters: List<Node.Type.FunctionType.FunctionTypeParameter>","ktast.ast.Node.Type.FunctionType.parameters"]},{"name":"val parent: NodePath<*>?","description":"ktast.ast.NodePath.parent","location":"ast/ktast.ast/-node-path/parent.html","searchKeys":["parent","val parent: NodePath<*>?","ktast.ast.NodePath.parent"]},{"name":"val primaryConstructor: Node.Declaration.ClassDeclaration.PrimaryConstructor?","description":"ktast.ast.Node.Declaration.ClassDeclaration.primaryConstructor","location":"ast/ktast.ast/-node/-declaration/-class-declaration/primary-constructor.html","searchKeys":["primaryConstructor","val primaryConstructor: Node.Declaration.ClassDeclaration.PrimaryConstructor?","ktast.ast.Node.Declaration.ClassDeclaration.primaryConstructor"]},{"name":"val qualifiers: List<Node.Type.SimpleType.SimpleTypeQualifier>","description":"ktast.ast.Node.Type.SimpleType.qualifiers","location":"ast/ktast.ast/-node/-type/-simple-type/qualifiers.html","searchKeys":["qualifiers","val qualifiers: List<Node.Type.SimpleType.SimpleTypeQualifier>","ktast.ast.Node.Type.SimpleType.qualifiers"]},{"name":"val questionMark: Node.Keyword.Question","description":"ktast.ast.Node.Type.NullableType.questionMark","location":"ast/ktast.ast/-node/-type/-nullable-type/question-mark.html","searchKeys":["questionMark","val questionMark: Node.Keyword.Question","ktast.ast.Node.Type.NullableType.questionMark"]},{"name":"val rBracket: Node.Keyword.RBracket","description":"ktast.ast.Node.PostModifier.Contract.rBracket","location":"ast/ktast.ast/-node/-post-modifier/-contract/r-bracket.html","searchKeys":["rBracket","val rBracket: Node.Keyword.RBracket","ktast.ast.Node.PostModifier.Contract.rBracket"]},{"name":"val rBracket: Node.Keyword.RBracket?","description":"ktast.ast.Node.Modifier.AnnotationSet.rBracket","location":"ast/ktast.ast/-node/-modifier/-annotation-set/r-bracket.html","searchKeys":["rBracket","val rBracket: Node.Keyword.RBracket?","ktast.ast.Node.Modifier.AnnotationSet.rBracket"]},{"name":"val rPar: Node.Keyword.RPar","description":"ktast.ast.Node.ContextReceiver.rPar","location":"ast/ktast.ast/-node/-context-receiver/r-par.html","searchKeys":["rPar","val rPar: Node.Keyword.RPar","ktast.ast.Node.ContextReceiver.rPar"]},{"name":"val rPar: Node.Keyword.RPar","description":"ktast.ast.Node.Expression.IfExpression.rPar","location":"ast/ktast.ast/-node/-expression/-if-expression/r-par.html","searchKeys":["rPar","val rPar: Node.Keyword.RPar","ktast.ast.Node.Expression.IfExpression.rPar"]},{"name":"val rPar: Node.Keyword.RPar","description":"ktast.ast.Node.Expression.WhenExpression.WhenSubject.rPar","location":"ast/ktast.ast/-node/-expression/-when-expression/-when-subject/r-par.html","searchKeys":["rPar","val rPar: Node.Keyword.RPar","ktast.ast.Node.Expression.WhenExpression.WhenSubject.rPar"]},{"name":"val rPar: Node.Keyword.RPar","description":"ktast.ast.Node.Statement.ForStatement.rPar","location":"ast/ktast.ast/-node/-statement/-for-statement/r-par.html","searchKeys":["rPar","val rPar: Node.Keyword.RPar","ktast.ast.Node.Statement.ForStatement.rPar"]},{"name":"val rPar: Node.Keyword.RPar","description":"ktast.ast.Node.Type.FunctionType.rPar","location":"ast/ktast.ast/-node/-type/-function-type/r-par.html","searchKeys":["rPar","val rPar: Node.Keyword.RPar","ktast.ast.Node.Type.FunctionType.rPar"]},{"name":"val rPar: Node.Keyword.RPar","description":"ktast.ast.Node.Type.ParenthesizedType.rPar","location":"ast/ktast.ast/-node/-type/-parenthesized-type/r-par.html","searchKeys":["rPar","val rPar: Node.Keyword.RPar","ktast.ast.Node.Type.ParenthesizedType.rPar"]},{"name":"val rPar: Node.Keyword.RPar?","description":"ktast.ast.Node.Declaration.PropertyDeclaration.rPar","location":"ast/ktast.ast/-node/-declaration/-property-declaration/r-par.html","searchKeys":["rPar","val rPar: Node.Keyword.RPar?","ktast.ast.Node.Declaration.PropertyDeclaration.rPar"]},{"name":"val rPar: Node.Keyword.RPar?","description":"ktast.ast.Node.LambdaParameter.rPar","location":"ast/ktast.ast/-node/-lambda-parameter/r-par.html","searchKeys":["rPar","val rPar: Node.Keyword.RPar?","ktast.ast.Node.LambdaParameter.rPar"]},{"name":"val raw: Boolean","description":"ktast.ast.Node.Expression.StringLiteralExpression.raw","location":"ast/ktast.ast/-node/-expression/-string-literal-expression/raw.html","searchKeys":["raw","val raw: Boolean","ktast.ast.Node.Expression.StringLiteralExpression.raw"]},{"name":"val receiverType: Node.Type?","description":"ktast.ast.Node.Declaration.FunctionDeclaration.receiverType","location":"ast/ktast.ast/-node/-declaration/-function-declaration/receiver-type.html","searchKeys":["receiverType","val receiverType: Node.Type?","ktast.ast.Node.Declaration.FunctionDeclaration.receiverType"]},{"name":"val receiverType: Node.Type?","description":"ktast.ast.Node.Declaration.PropertyDeclaration.receiverType","location":"ast/ktast.ast/-node/-declaration/-property-declaration/receiver-type.html","searchKeys":["receiverType","val receiverType: Node.Type?","ktast.ast.Node.Declaration.PropertyDeclaration.receiverType"]},{"name":"val receiverType: Node.Type?","description":"ktast.ast.Node.Type.FunctionType.receiverType","location":"ast/ktast.ast/-node/-type/-function-type/receiver-type.html","searchKeys":["receiverType","val receiverType: Node.Type?","ktast.ast.Node.Type.FunctionType.receiverType"]},{"name":"val receiverTypes: List<Node.Type>","description":"ktast.ast.Node.ContextReceiver.receiverTypes","location":"ast/ktast.ast/-node/-context-receiver/receiver-types.html","searchKeys":["receiverTypes","val receiverTypes: List<Node.Type>","ktast.ast.Node.ContextReceiver.receiverTypes"]},{"name":"val returnType: Node.Type","description":"ktast.ast.Node.Type.FunctionType.returnType","location":"ast/ktast.ast/-node/-type/-function-type/return-type.html","searchKeys":["returnType","val returnType: Node.Type","ktast.ast.Node.Type.FunctionType.returnType"]},{"name":"val returnType: Node.Type?","description":"ktast.ast.Node.Declaration.FunctionDeclaration.returnType","location":"ast/ktast.ast/-node/-declaration/-function-declaration/return-type.html","searchKeys":["returnType","val returnType: Node.Type?","ktast.ast.Node.Declaration.FunctionDeclaration.returnType"]},{"name":"val rhs: Node.Expression","description":"ktast.ast.Node.Expression.BinaryExpression.rhs","location":"ast/ktast.ast/-node/-expression/-binary-expression/rhs.html","searchKeys":["rhs","val rhs: Node.Expression","ktast.ast.Node.Expression.BinaryExpression.rhs"]},{"name":"val rhs: Node.Expression.NameExpression","description":"ktast.ast.Node.Expression.CallableReferenceExpression.rhs","location":"ast/ktast.ast/-node/-expression/-callable-reference-expression/rhs.html","searchKeys":["rhs","val rhs: Node.Expression.NameExpression","ktast.ast.Node.Expression.CallableReferenceExpression.rhs"]},{"name":"val rhs: Node.Type","description":"ktast.ast.Node.Expression.BinaryTypeExpression.rhs","location":"ast/ktast.ast/-node/-expression/-binary-type-expression/rhs.html","searchKeys":["rhs","val rhs: Node.Type","ktast.ast.Node.Expression.BinaryTypeExpression.rhs"]},{"name":"val short: Boolean","description":"ktast.ast.Node.Expression.StringLiteralExpression.TemplateStringEntry.short","location":"ast/ktast.ast/-node/-expression/-string-literal-expression/-template-string-entry/short.html","searchKeys":["short","val short: Boolean","ktast.ast.Node.Expression.StringLiteralExpression.TemplateStringEntry.short"]},{"name":"val spreadOperator: Node.Keyword.Asterisk?","description":"ktast.ast.Node.ValueArgument.spreadOperator","location":"ast/ktast.ast/-node/-value-argument/spread-operator.html","searchKeys":["spreadOperator","val spreadOperator: Node.Keyword.Asterisk?","ktast.ast.Node.ValueArgument.spreadOperator"]},{"name":"val statement: Node.Statement","description":"ktast.ast.Node.Expression.AnnotatedExpression.statement","location":"ast/ktast.ast/-node/-expression/-annotated-expression/statement.html","searchKeys":["statement","val statement: Node.Statement","ktast.ast.Node.Expression.AnnotatedExpression.statement"]},{"name":"val statement: Node.Statement","description":"ktast.ast.Node.Expression.LabeledExpression.statement","location":"ast/ktast.ast/-node/-expression/-labeled-expression/statement.html","searchKeys":["statement","val statement: Node.Statement","ktast.ast.Node.Expression.LabeledExpression.statement"]},{"name":"val subject: Node.Expression.WhenExpression.WhenSubject?","description":"ktast.ast.Node.Expression.WhenExpression.subject","location":"ast/ktast.ast/-node/-expression/-when-expression/subject.html","searchKeys":["subject","val subject: Node.Expression.WhenExpression.WhenSubject?","ktast.ast.Node.Expression.WhenExpression.subject"]},{"name":"val target: Node.Modifier.AnnotationSet.AnnotationTarget?","description":"ktast.ast.Node.Modifier.AnnotationSet.target","location":"ast/ktast.ast/-node/-modifier/-annotation-set/target.html","searchKeys":["target","val target: Node.Modifier.AnnotationSet.AnnotationTarget?","ktast.ast.Node.Modifier.AnnotationSet.target"]},{"name":"val type: Node.Type","description":"ktast.ast.Node.Declaration.TypeAliasDeclaration.type","location":"ast/ktast.ast/-node/-declaration/-type-alias-declaration/type.html","searchKeys":["type","val type: Node.Type","ktast.ast.Node.Declaration.TypeAliasDeclaration.type"]},{"name":"val type: Node.Type","description":"ktast.ast.Node.PostModifier.TypeConstraintSet.TypeConstraint.type","location":"ast/ktast.ast/-node/-post-modifier/-type-constraint-set/-type-constraint/type.html","searchKeys":["type","val type: Node.Type","ktast.ast.Node.PostModifier.TypeConstraintSet.TypeConstraint.type"]},{"name":"val type: Node.Type","description":"ktast.ast.Node.Type.FunctionType.FunctionTypeParameter.type","location":"ast/ktast.ast/-node/-type/-function-type/-function-type-parameter/type.html","searchKeys":["type","val type: Node.Type","ktast.ast.Node.Type.FunctionType.FunctionTypeParameter.type"]},{"name":"val type: Node.Type","description":"ktast.ast.Node.TypeArgument.type","location":"ast/ktast.ast/-node/-type-argument/type.html","searchKeys":["type","val type: Node.Type","ktast.ast.Node.TypeArgument.type"]},{"name":"val type: Node.Type.SimpleType","description":"ktast.ast.Node.Modifier.AnnotationSet.Annotation.type","location":"ast/ktast.ast/-node/-modifier/-annotation-set/-annotation/type.html","searchKeys":["type","val type: Node.Type.SimpleType","ktast.ast.Node.Modifier.AnnotationSet.Annotation.type"]},{"name":"val type: Node.Type?","description":"ktast.ast.Node.Declaration.PropertyDeclaration.Getter.type","location":"ast/ktast.ast/-node/-declaration/-property-declaration/-getter/type.html","searchKeys":["type","val type: Node.Type?","ktast.ast.Node.Declaration.PropertyDeclaration.Getter.type"]},{"name":"val type: Node.Type?","description":"ktast.ast.Node.FunctionParameter.type","location":"ast/ktast.ast/-node/-function-parameter/type.html","searchKeys":["type","val type: Node.Type?","ktast.ast.Node.FunctionParameter.type"]},{"name":"val type: Node.Type?","description":"ktast.ast.Node.TypeParameter.type","location":"ast/ktast.ast/-node/-type-parameter/type.html","searchKeys":["type","val type: Node.Type?","ktast.ast.Node.TypeParameter.type"]},{"name":"val type: Node.Type?","description":"ktast.ast.Node.Variable.type","location":"ast/ktast.ast/-node/-variable/type.html","searchKeys":["type","val type: Node.Type?","ktast.ast.Node.Variable.type"]},{"name":"val typeArgument: Node.TypeArgument?","description":"ktast.ast.Node.Expression.SuperExpression.typeArgument","location":"ast/ktast.ast/-node/-expression/-super-expression/type-argument.html","searchKeys":["typeArgument","val typeArgument: Node.TypeArgument?","ktast.ast.Node.Expression.SuperExpression.typeArgument"]},{"name":"val typeConstraintSet: Node.PostModifier.TypeConstraintSet?","description":"ktast.ast.Node.Declaration.ClassDeclaration.typeConstraintSet","location":"ast/ktast.ast/-node/-declaration/-class-declaration/type-constraint-set.html","searchKeys":["typeConstraintSet","val typeConstraintSet: Node.PostModifier.TypeConstraintSet?","ktast.ast.Node.Declaration.ClassDeclaration.typeConstraintSet"]},{"name":"val typeConstraintSet: Node.PostModifier.TypeConstraintSet?","description":"ktast.ast.Node.Declaration.PropertyDeclaration.typeConstraintSet","location":"ast/ktast.ast/-node/-declaration/-property-declaration/type-constraint-set.html","searchKeys":["typeConstraintSet","val typeConstraintSet: Node.PostModifier.TypeConstraintSet?","ktast.ast.Node.Declaration.PropertyDeclaration.typeConstraintSet"]},{"name":"val valOrVarKeyword: Node.Keyword.ValOrVarKeyword","description":"ktast.ast.Node.Declaration.PropertyDeclaration.valOrVarKeyword","location":"ast/ktast.ast/-node/-declaration/-property-declaration/val-or-var-keyword.html","searchKeys":["valOrVarKeyword","val valOrVarKeyword: Node.Keyword.ValOrVarKeyword","ktast.ast.Node.Declaration.PropertyDeclaration.valOrVarKeyword"]},{"name":"val valOrVarKeyword: Node.Keyword.ValOrVarKeyword?","description":"ktast.ast.Node.FunctionParameter.valOrVarKeyword","location":"ast/ktast.ast/-node/-function-parameter/val-or-var-keyword.html","searchKeys":["valOrVarKeyword","val valOrVarKeyword: Node.Keyword.ValOrVarKeyword?","ktast.ast.Node.FunctionParameter.valOrVarKeyword"]},{"name":"val variable: Node.Variable?","description":"ktast.ast.Node.Expression.WhenExpression.WhenSubject.variable","location":"ast/ktast.ast/-node/-expression/-when-expression/-when-subject/variable.html","searchKeys":["variable","val variable: Node.Variable?","ktast.ast.Node.Expression.WhenExpression.WhenSubject.variable"]},{"name":"val variables: List<Node.Variable>","description":"ktast.ast.Node.Declaration.PropertyDeclaration.variables","location":"ast/ktast.ast/-node/-declaration/-property-declaration/variables.html","searchKeys":["variables","val variables: List<Node.Variable>","ktast.ast.Node.Declaration.PropertyDeclaration.variables"]},{"name":"val variables: List<Node.Variable>","description":"ktast.ast.Node.LambdaParameter.variables","location":"ast/ktast.ast/-node/-lambda-parameter/variables.html","searchKeys":["variables","val variables: List<Node.Variable>","ktast.ast.Node.LambdaParameter.variables"]},{"name":"val whenKeyword: Node.Keyword.When","description":"ktast.ast.Node.Expression.WhenExpression.whenKeyword","location":"ast/ktast.ast/-node/-expression/-when-expression/when-keyword.html","searchKeys":["whenKeyword","val whenKeyword: Node.Keyword.When","ktast.ast.Node.Expression.WhenExpression.whenKeyword"]},{"name":"var extrasAfter: List<Node.Extra>","description":"ktast.ast.NodeSupplement.extrasAfter","location":"ast/ktast.ast/-node-supplement/extras-after.html","searchKeys":["extrasAfter","var extrasAfter: List<Node.Extra>","ktast.ast.NodeSupplement.extrasAfter"]},{"name":"var extrasBefore: List<Node.Extra>","description":"ktast.ast.NodeSupplement.extrasBefore","location":"ast/ktast.ast/-node-supplement/extras-before.html","searchKeys":["extrasBefore","var extrasBefore: List<Node.Extra>","ktast.ast.NodeSupplement.extrasBefore"]},{"name":"var extrasWithin: List<Node.Extra>","description":"ktast.ast.NodeSupplement.extrasWithin","location":"ast/ktast.ast/-node-supplement/extras-within.html","searchKeys":["extrasWithin","var extrasWithin: List<Node.Extra>","ktast.ast.NodeSupplement.extrasWithin"]},{"name":"var tag: Any?","description":"ktast.ast.NodeSupplement.tag","location":"ast/ktast.ast/-node-supplement/tag.html","searchKeys":["tag","var tag: Any?","ktast.ast.NodeSupplement.tag"]},{"name":"class Unsupported(message: String) : UnsupportedOperationException","description":"ktast.ast.psi.Converter.Unsupported","location":"ast-psi/ktast.ast.psi/-converter/-unsupported/index.html","searchKeys":["Unsupported","class Unsupported(message: String) : UnsupportedOperationException","ktast.ast.psi.Converter.Unsupported"]},{"name":"constructor()","description":"ktast.ast.psi.Converter.Converter","location":"ast-psi/ktast.ast.psi/-converter/-converter.html","searchKeys":["Converter","constructor()","ktast.ast.psi.Converter.Converter"]},{"name":"constructor()","description":"ktast.ast.psi.ConverterWithExtras.ConverterWithExtras","location":"ast-psi/ktast.ast.psi/-converter-with-extras/-converter-with-extras.html","searchKeys":["ConverterWithExtras","constructor()","ktast.ast.psi.ConverterWithExtras.ConverterWithExtras"]},{"name":"constructor(converter: Converter = ConverterWithExtras())","description":"ktast.ast.psi.Parser.Parser","location":"ast-psi/ktast.ast.psi/-parser/-parser.html","searchKeys":["Parser","constructor(converter: Converter = ConverterWithExtras())","ktast.ast.psi.Parser.Parser"]},{"name":"constructor(file: KtFile, errors: List<PsiErrorElement>)","description":"ktast.ast.psi.Parser.ParseError.ParseError","location":"ast-psi/ktast.ast.psi/-parser/-parse-error/-parse-error.html","searchKeys":["ParseError","constructor(file: KtFile, errors: List<PsiErrorElement>)","ktast.ast.psi.Parser.ParseError.ParseError"]},{"name":"constructor(message: String)","description":"ktast.ast.psi.Converter.Unsupported.Unsupported","location":"ast-psi/ktast.ast.psi/-converter/-unsupported/-unsupported.html","searchKeys":["Unsupported","constructor(message: String)","ktast.ast.psi.Converter.Unsupported.Unsupported"]},{"name":"data class ParseError(val file: KtFile, val errors: List<PsiErrorElement>) : IllegalArgumentException","description":"ktast.ast.psi.Parser.ParseError","location":"ast-psi/ktast.ast.psi/-parser/-parse-error/index.html","searchKeys":["ParseError","data class ParseError(val file: KtFile, val errors: List<PsiErrorElement>) : IllegalArgumentException","ktast.ast.psi.Parser.ParseError"]},{"name":"fun parseFile(code: String, path: String = \"temp.kt\", throwOnError: Boolean = true): Node.KotlinFile","description":"ktast.ast.psi.Parser.parseFile","location":"ast-psi/ktast.ast.psi/-parser/parse-file.html","searchKeys":["parseFile","fun parseFile(code: String, path: String = \"temp.kt\", throwOnError: Boolean = true): Node.KotlinFile","ktast.ast.psi.Parser.parseFile"]},{"name":"object Companion : Parser","description":"ktast.ast.psi.Parser.Companion","location":"ast-psi/ktast.ast.psi/-parser/-companion/index.html","searchKeys":["Companion","object Companion : Parser","ktast.ast.psi.Parser.Companion"]},{"name":"open class Converter","description":"ktast.ast.psi.Converter","location":"ast-psi/ktast.ast.psi/-converter/index.html","searchKeys":["Converter","open class Converter","ktast.ast.psi.Converter"]},{"name":"open class ConverterWithExtras : Converter","description":"ktast.ast.psi.ConverterWithExtras","location":"ast-psi/ktast.ast.psi/-converter-with-extras/index.html","searchKeys":["ConverterWithExtras","open class ConverterWithExtras : Converter","ktast.ast.psi.ConverterWithExtras"]},{"name":"open class Parser(converter: Converter = ConverterWithExtras())","description":"ktast.ast.psi.Parser","location":"ast-psi/ktast.ast.psi/-parser/index.html","searchKeys":["Parser","open class Parser(converter: Converter = ConverterWithExtras())","ktast.ast.psi.Parser"]},{"name":"open fun convert(v: KtFile): Node.KotlinFile","description":"ktast.ast.psi.Converter.convert","location":"ast-psi/ktast.ast.psi/-converter/convert.html","searchKeys":["convert","open fun convert(v: KtFile): Node.KotlinFile","ktast.ast.psi.Converter.convert"]},{"name":"open override fun convert(v: KtFile): Node.KotlinFile","description":"ktast.ast.psi.ConverterWithExtras.convert","location":"ast-psi/ktast.ast.psi/-converter-with-extras/convert.html","searchKeys":["convert","open override fun convert(v: KtFile): Node.KotlinFile","ktast.ast.psi.ConverterWithExtras.convert"]},{"name":"val errors: List<PsiErrorElement>","description":"ktast.ast.psi.Parser.ParseError.errors","location":"ast-psi/ktast.ast.psi/-parser/-parse-error/errors.html","searchKeys":["errors","val errors: List<PsiErrorElement>","ktast.ast.psi.Parser.ParseError.errors"]},{"name":"val file: KtFile","description":"ktast.ast.psi.Parser.ParseError.file","location":"ast-psi/ktast.ast.psi/-parser/-parse-error/file.html","searchKeys":["file","val file: KtFile","ktast.ast.psi.Parser.ParseError.file"]}]